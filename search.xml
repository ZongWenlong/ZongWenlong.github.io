<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[读书笔记-《Java并发编程实战》]]></title>
      <url>http://zongwenlong.github.io/2017/02/26/ReadingNotes-JavaConcurrencyInPractice/</url>
      <content type="html"><![CDATA[<p>&#x2003;&#x2003;&#x5BD2;&#x5047;&#x5728;&#x5BB6;&#x8BA4;&#x771F;&#x9605;&#x8BFB;&#x4E86;<a href="https://www.amazon.cn/~/dp/B0077K9XHW/ref=sr_1_1?ie=UTF8&amp;qid=1488119648&amp;sr=8-1&amp;keywords=java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98" target="_blank" rel="external">&#x300A;Java&#x5E76;&#x53D1;&#x7F16;&#x7A0B;&#x5B9E;&#x6218;&#x300B;&#xFF08;&#x82F1;&#x6587;&#x540D;&#xFF1A;Java Concurrency in Practice) </a>&#x4E00;&#x4E66;&#xFF0C;&#x8FC7;&#x7A0B;&#x4E2D;&#x78B0;&#x5230;&#x4E86;&#x8BB8;&#x591A;&#x95EE;&#x9898;&#x548C;&#x503C;&#x5F97;&#x6DF1;&#x7A76;&#x7684;&#x5185;&#x5BB9;&#x3002;&#x5728;&#x5B9E;&#x9645;&#x7F16;&#x7A0B;&#x5B9E;&#x8DF5;&#x7684;&#x540C;&#x65F6;&#xFF0C;&#x968F;&#x624B;&#x5C06;&#x4E2A;&#x4EBA;&#x7591;&#x60D1;&#x7684;&#x77E5;&#x8BC6;&#x70B9;&#x901A;&#x8FC7;&#x67E5;&#x8BE2;&#x76F8;&#x5173;&#x8D44;&#x6599;&#x8FDB;&#x884C;&#x8865;&#x5145;&#x8BF4;&#x660E;&#xFF0C;&#x6574;&#x7406;&#x5230;&#x4E86;GitHub&#x4E0A;&#x3002;</p>
<h2 id="&#x7B14;&#x8BB0;&#x76EE;&#x5F55;"><a href="#&#x7B14;&#x8BB0;&#x76EE;&#x5F55;" class="headerlink" title="&#x7B14;&#x8BB0;&#x76EE;&#x5F55;"></a>&#x7B14;&#x8BB0;&#x76EE;&#x5F55;</h2><ol>
<li><a href="https://github.com/ZongWenlong/JavaLab/tree/master/src/main/java/multithread/tools/" target="_blank" rel="external">Java Concurrent Tools Class &#x5E76;&#x53D1;&#x5DE5;&#x5177;&#x7C7B;+&#x81EA;&#x5B9A;&#x4E49;&#x540C;&#x6B65;&#x5DE5;&#x5177;&#xFF08;&#x975E;&#x963B;&#x585E;&#x7B97;&#x6CD5;&#x7B49;&#xFF09;</a></li>
<li><a href="https://github.com/ZongWenlong/JavaLab/tree/master/src/main/java/multithread/task/executor" target="_blank" rel="external">Java Task Execution &#x4EFB;&#x52A1;&#x7684;&#x6267;&#x884C;</a></li>
<li><a href="https://github.com/ZongWenlong/JavaLab/tree/master/src/main/java/multithread/task/close" target="_blank" rel="external">Java Task Cancel and Close &#x4EFB;&#x52A1;&#x7684;&#x53D6;&#x6D88;&#x4E0E;&#x5173;&#x95ED;</a></li>
<li><a href="https://github.com/ZongWenlong/JavaLab/tree/master/src/main/java/multithread/lock" target="_blank" rel="external">Java Lock &#x9501;</a></li>
<li><a href="https://github.com/ZongWenlong/JavaLab/tree/master/src/main/java/multithread/pool" target="_blank" rel="external">Java Pool &#x7EBF;&#x7A0B;&#x6C60;</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java源码阅读-DualPivotQuicksort]]></title>
      <url>http://zongwenlong.github.io/2017/01/06/Java-SourceCode-Sort/</url>
      <content type="html"><![CDATA[<p>&#x2003;&#x2003;&#x4E4B;&#x524D;&#x4E00;&#x76F4;&#x5BF9;JDK&#x7684;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x5F88;&#x597D;&#x5947;&#xFF0C;&#x62BD;&#x4E86;&#x70B9;&#x65F6;&#x95F4;&#x770B;&#x4E86;&#x4E0B;&#x6E90;&#x7801;&#xFF0C;&#x6536;&#x83B7;&#x826F;&#x591A;&#x3002;&#x5176;&#x6838;&#x5FC3;&#x601D;&#x60F3;&#x5728;&#x4E8E;&#xFF0C;&#x6839;&#x636E;&#x6570;&#x636E;&#x7684;&#x4E0D;&#x540C;&#x7279;&#x6027;&#xFF0C;&#x52A8;&#x6001;&#x7684;&#x91C7;&#x7528;&#x4E0D;&#x540C;&#x7684;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#xFF0C;&#x5145;&#x5206;&#x5229;&#x7528;&#x5404;&#x79CD;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x7684;&#x4F18;&#x52BF;&#xFF0C;&#x4EE5;&#x671F;&#x8FBE;&#x5230;&#x66F4;&#x597D;&#x7684;&#x7EFC;&#x5408;&#x6548;&#x679C;&#x3002;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x53EA;&#x662F;Sort&#x76F8;&#x5173;&#x7684;&#x6E90;&#x7801;&#x4E00;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#xFF0C;&#x4E4B;&#x540E;&#x4F1A;&#x7EE7;&#x7EED;&#x6DF1;&#x5165;&#x63A2;&#x7A76;&#x5176;&#x4ED6;&#x90E8;&#x5206;&#x7684;&#x5185;&#x5BB9;&#x3002;</p>
<h1 id="&#x57FA;&#x672C;&#x6D41;&#x7A0B;&#xFF1A;"><a href="#&#x57FA;&#x672C;&#x6D41;&#x7A0B;&#xFF1A;" class="headerlink" title="&#x57FA;&#x672C;&#x6D41;&#x7A0B;&#xFF1A;"></a>&#x57FA;&#x672C;&#x6D41;&#x7A0B;&#xFF1A;</h1><ul>
<li><p>&#x5982;&#x679C;&#x957F;&#x5EA6;&#x5C0F;&#x4E8E;<code>QUICKSORT_THRESHOLD(286)</code>&#xFF0C;&#x5219;&#x91C7;&#x7528;&#x975E;&#x5F52;&#x5E76;&#x6392;&#x5E8F;</p>
<ul>
<li>&#x5982;&#x679C;&#x957F;&#x5EA6;&#x5C0F;&#x4E8E;<code>INSERTION_SORT_THRESHOLD(47)</code>&#xFF0C;&#x5219;&#x91C7;&#x7528;&#x63D2;&#x5165;&#x6392;&#x5E8F;<ul>
<li>&#x6700;&#x5DE6;&#x533A;&#x95F4;&#xFF08;&#x4EE5;&#x521D;&#x59CB;left&#x5F00;&#x59CB;&#x7684;&#x533A;&#x95F4;&#xFF09; <code>leftmost</code>&#xFF1A;&#x666E;&#x901A;&#x63D2;&#x5165;&#x6392;&#x5E8F;</li>
<li>&#x5426;&#x5219;&#xFF1A;<code>pair insertion sort</code></li>
</ul>
</li>
<li><p>&#x5426;&#x5219;&#xFF0C;&#x5FEB;&#x901F;&#x6392;&#x5E8F;</p>
<ul>
<li>&#x5C06;&#x6570;&#x7EC4;&#x5212;&#x5206;&#x4E3A;7&#x6BB5;&#xFF08;&#x5927;&#x7EA6;&#xFF09;&#xFF0C;&#x7136;&#x540E;&#x627E;&#x51FA;&#x7B2C;2&#x3001;3&#x3001;4&#x3001;5&#x3001;6&#x6BB5;&#x7684;&#x53F3;&#x7AEF;&#x70B9;&#x5BF9;&#x5E94;&#x7684;&#x4F4D;&#x7F6E;</li>
<li>&#x5BF9;&#x8FD9;5&#x4E2A;&#x4F4D;&#x7F6E;&#x4E0A;&#x7684;&#x6570;&#x5B57;&#x8FDB;&#x884C;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#xFF0C;&#x4F5C;&#x4E3A;&#x67A2;&#x8F74;&#x7684;&#x5019;&#x9009;</li>
<li><p>&#x5982;&#x679C;5&#x4E2A;&#x6570;&#x90FD;&#x4E0D;&#x76F8;&#x7B49;</p>
<ul>
<li>&#x9009;&#x53D6;&#x6392;&#x5E8F;&#x540E;&#x7684;2&#x3001;4&#x4F5C;&#x4E3A;&#x67A2;&#x8F74;&#xFF0C;&#x8FDB;&#x884C;&#x53CC;&#x67A2;&#x8F74;&#x6392;&#x5E8F;<code>Dual-Pivot Quicksort</code></li>
<li><p>&#x6548;&#x679C;&#xFF1A;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">left part         center part                  right part</span><br><span class="line">+----------------------------------------------------------+</span><br><span class="line">| == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |</span><br><span class="line">+----------------------------------------------------------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>&#x6392;&#x5E8F;&#x540E;&#x5982;&#x679C;&#xFF0C;&#x4E2D;&#x95F4;&#x90E8;&#x5206;&#x5143;&#x7D20;&#x8FC7;&#x591A;&#xFF0C;&#x53EF;&#x80FD;&#x539F;&#x56E0;&#x662F;&#x7B49;&#x4E8E;pivort1&#x548C;&#x7B49;&#x4E8E;pivort2&#x7684;&#x5143;&#x7D20;&#x8FC7;&#x591A;&#xFF0C;&#x5219;&#x5C06;&#x5176;&#x8C03;&#x6574;&#x4E3A;&#xFF1A;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">left part         center part                  right part</span><br><span class="line">+----------------------------------------------------------+</span><br><span class="line">| == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |</span><br><span class="line">+----------------------------------------------------------+</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>&#x5426;&#x5219;&#xFF0C;&#x8FDB;&#x884C;&#x666E;&#x901A;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#xFF0C;&#x67A2;&#x8F74;&#x6392;&#x5E8F;&#x540E;&#x4E3A;&#x7B2C;3&#x4E2A;&#x5143;&#x7D20;</p>
</li>
</ul>
</li>
</ul>
</li>
<li>&#x5426;&#x5219;&#xFF0C;&#x8003;&#x8651;Timsort(&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x7684;&#x4F18;&#x5316;&#x7248;&#x672C;&#xFF0C;&#x5BF9;&#x4E00;&#x4F1A;&#x5347;&#x5E8F;&#x3001;&#x4E00;&#x4F1A;&#x964D;&#x5E8F;&#x7684;&#x6DF7;&#x5408;&#x60C5;&#x51B5;&#x5904;&#x7406;&#x6BD4;&#x8F83;&#x597D;)<ul>
<li>&#x521B;&#x5EFA;Timsort run&#x6570;&#x7EC4;&#xFF0C;&#x5927;&#x5C0F;&#x4E3A;<code>MAX_RUN_COUNT(67) + 1</code><ul>
<li>a[run[i]] ~ a[run[i + 1]]&#x4E4B;&#x95F4;&#x4E3A;&#x5347;&#x5E8F;&#x6570;&#x7EC4;</li>
<li>&#x68C0;&#x67E5;&#x5F53;&#x524D;&#x5F85;&#x6392;&#x5E8F;&#x6570;&#x7EC4;&#x662F;&#x5426;&#x9002;&#x5408;&#x4F7F;&#x7528;Timsort,&#x5373;run&#x6570;&#x7EC4;&#x4E2D;&#x5347;&#x5E8F;&#x6570;&#x7EC4;&#x4E2A;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x4E2A;&#x6570;&#x4E0D;&#x5C0F;&#x4E8E;<code>MAX_RUN_COUNT</code>&#x5219;&#x8BA4;&#x4E3A;&#x6570;&#x7EC4;&#x5185;&#x5143;&#x7D20;&#x6392;&#x5E8F;&#x6BD4;&#x8F83;&#x6DF7;&#x4E71;&#xFF0C;&#x9002;&#x5408;&#x975E;&#x5F52;&#x5E76;&#x6392;&#x5E8F;<ul>
<li>&#x6CE8;&#xFF1A;&#x5BF9;&#x4E8E;&#x8FDE;&#x7EED;&#x4E0B;&#x964D;&#x7684;&#x5143;&#x7D20;&#x4F1A;&#x5C06;&#x5176;&#x8C03;&#x6574;&#x4E3A;&#x8FDE;&#x7EED;&#x4E0A;&#x5347;</li>
</ul>
</li>
</ul>
</li>
<li>&#x5982;&#x679C;&#x901A;&#x8FC7;&#x4E0A;&#x8FF0;&#x68C0;&#x6D4B;&#xFF0C;&#x5219;&#x8FDB;&#x884C;&#x5F52;&#x5E76;&#x6392;&#x5E8F;      </li>
</ul>
</li>
</ul>
<h1 id="&#x4EE3;&#x7801;&#x8BE6;&#x89E3;&#xFF1A;"><a href="#&#x4EE3;&#x7801;&#x8BE6;&#x89E3;&#xFF1A;" class="headerlink" title="&#x4EE3;&#x7801;&#x8BE6;&#x89E3;&#xFF1A;"></a>&#x4EE3;&#x7801;&#x8BE6;&#x89E3;&#xFF1A;</h1><ul>
<li><p>&#x666E;&#x901A;&#x7684;&#x63D2;&#x5165;&#x6392;&#x5E8F;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = left, j = i; i &lt; right; j = ++i) {</span><br><span class="line">    <span class="keyword">int</span> ai = a[i + <span class="number">1</span>];      <span class="comment">// &#x5E26;&#x63D2;&#x5165;&#x5143;&#x7D20;</span></span><br><span class="line">    <span class="keyword">while</span> (ai &lt; a[j]) {     <span class="comment">// &#x5BFB;&#x627E;&#x63D2;&#x5165;&#x4F4D;&#x7F6E;</span></span><br><span class="line">        a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">        <span class="keyword">if</span> (j-- == left) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    a[j + <span class="number">1</span>] = ai;          <span class="comment">// &#x63D2;&#x5165;&#x65B0;&#x5143;&#x7D20;</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</li>
<li><p>&#x6539;&#x8FDB;&#x7684;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#xFF1A;pair insertion sort,&#x6BCF;&#x6B21;&#x63D2;&#x5165;&#x4E24;&#x4E2A;&#x5143;&#x7D20;</p>
<ul>
<li>pair insertion&#x4E4B;&#x6240;&#x4EE5;&#x4E0D;&#x4F7F;&#x7528;&#x5728;&#x505A;&#x533A;&#x95F4;&#x7684;&#x539F;&#x56E0;&#xFF0C;&#x5982;&#x679C;&#x5C06;&#x5176;&#x5E94;&#x7528;&#x5728;&#x5DE6;&#x533A;&#x95F4;&#xFF0C;&#x9700;&#x8981;&#x589E;&#x52A0;&#x989D;&#x5916;&#x7684;&#x8FB9;&#x754C;&#x63A7;&#x5236;&#x3002;&#x4F46;&#x4E3A;&#x4EC0;&#x4E48;&#x6CA1;&#x6709;&#x5DE6;&#x8FB9;&#x754C;&#x6CA1;&#x6709;&#x4F7F;&#x7528;&#x8FD9;&#x79CD;&#x6539;&#x826F;&#x7684;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x5462;&#xFF1F;&#x8FD9;&#x4E00;&#x70B9;&#x8FD8;&#x9700;&#x8981;&#x63A2;&#x7A76;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * &#x6CE8;&#xFF1A;left&#x5DE6;&#x4FA7;&#x7684;&#x5185;&#x5BB9;&#x5747;&#x5DF2;&#x6392;&#x597D;&#x5E8F;&#xFF0C;&#x9ED8;&#x8BA4;&#x7684;&#x524D;&#x63D0;&#x6761;&#x4EF6;</span><br><span class="line"> */</span></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Skip the longest ascending sequence.</span><br><span class="line"> */</span></span><br><span class="line">do {</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">} <span class="keyword">while</span> (a[++left] &gt;= a[left - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Every element from adjoining part plays the role</span><br><span class="line"> * of sentinel, therefore this allows us to avoid the</span><br><span class="line"> * left range check on each iteration. Moreover, we use</span><br><span class="line"> * the more optimized algorithm, so called pair insertion</span><br><span class="line"> * sort, which is faster (in the context of Quicksort)</span><br><span class="line"> * than traditional implementation of insertion sort.</span><br><span class="line"> * &#x4E00;&#x6B21;&#x904D;&#x5386;&#x63D2;&#x5165;&#x4E24;&#x4E2A;&#x5143;&#x7D20;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = left; ++left &lt;= right; k = ++left) {</span><br><span class="line">    <span class="keyword">int</span> a1 = a[k], a2 = a[left];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// &#x4F7F;&#x5F97; a1 &gt;= a2</span></span><br><span class="line">    <span class="keyword">if</span> (a1 &lt; a2) {</span><br><span class="line">        a2 = a1; a1 = a[left];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#x5BFB;&#x627E;a1&#x7684;&#x63D2;&#x5165;&#x4F4D;&#x7F6E;&#xFF0C;&#x76F8;&#x9694;&#x8DDD;&#x79BB;&#x4E3A;2</span></span><br><span class="line">    <span class="keyword">while</span> (a1 &lt; a[--k]) {</span><br><span class="line">        a[k + <span class="number">2</span>] = a[k];</span><br><span class="line">    }</span><br><span class="line">    a[++k + <span class="number">1</span>] = a1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#x5BFB;&#x627E;a2&#x7684;&#x63D2;&#x5165;&#x4F4D;&#x7F6E;&#xFF0C;&#x76F8;&#x9694;&#x8DDD;&#x79BB;&#x4E3A;1</span></span><br><span class="line">    <span class="keyword">while</span> (a2 &lt; a[--k]) {</span><br><span class="line">        a[k + <span class="number">1</span>] = a[k];</span><br><span class="line">    }</span><br><span class="line">    a[k + <span class="number">1</span>] = a2;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x5C06;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#x63D2;&#x5165;&#x5230;&#x5408;&#x9002;&#x4F4D;&#x7F6E;</span></span><br><span class="line"><span class="keyword">int</span> last = a[right];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (last &lt; a[--right]) {</span><br><span class="line">    a[right + <span class="number">1</span>] = a[right];</span><br><span class="line">}</span><br><span class="line">a[right + <span class="number">1</span>] = last;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>&#x53CC;&#x67A2;&#x8F74;&#x6392;&#x5E8F;<code>Dual-Pivot Quicksort</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Inexpensive approximation of length / 7</span></span><br><span class="line"><span class="keyword">int</span> seventh = (length &gt;&gt; <span class="number">3</span>) + (length &gt;&gt; <span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Sort five evenly spaced elements around (and including) the</span><br><span class="line"> * center element in the range. These elements will be used for</span><br><span class="line"> * pivot selection as described below. The choice for spacing</span><br><span class="line"> * these elements was empirically determined to work well on</span><br><span class="line"> * a wide variety of inputs.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">int</span> e3 = (left + right) &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">// The midpoint</span></span><br><span class="line"><span class="keyword">int</span> e2 = e3 - seventh;</span><br><span class="line"><span class="keyword">int</span> e1 = e2 - seventh;</span><br><span class="line"><span class="keyword">int</span> e4 = e3 + seventh;</span><br><span class="line"><span class="keyword">int</span> e5 = e4 + seventh;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sort these elements using insertion sort</span></span><br><span class="line"><span class="keyword">if</span> (a[e2] &lt; a[e1]) { <span class="keyword">long</span> t = a[e2]; a[e2] = a[e1]; a[e1] = t; }</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a[e3] &lt; a[e2]) { <span class="keyword">long</span> t = a[e3]; a[e3] = a[e2]; a[e2] = t;</span><br><span class="line">    <span class="keyword">if</span> (t &lt; a[e1]) { a[e2] = a[e1]; a[e1] = t; }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (a[e4] &lt; a[e3]) { <span class="keyword">long</span> t = a[e4]; a[e4] = a[e3]; a[e3] = t;</span><br><span class="line">    <span class="keyword">if</span> (t &lt; a[e2]) { a[e3] = a[e2]; a[e2] = t;</span><br><span class="line">        <span class="keyword">if</span> (t &lt; a[e1]) { a[e2] = a[e1]; a[e1] = t; }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (a[e5] &lt; a[e4]) { <span class="keyword">long</span> t = a[e5]; a[e5] = a[e4]; a[e4] = t;</span><br><span class="line">    <span class="keyword">if</span> (t &lt; a[e3]) { a[e4] = a[e3]; a[e3] = t;</span><br><span class="line">        <span class="keyword">if</span> (t &lt; a[e2]) { a[e3] = a[e2]; a[e2] = t;</span><br><span class="line">            <span class="keyword">if</span> (t &lt; a[e1]) { a[e2] = a[e1]; a[e1] = t; }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pointers</span></span><br><span class="line"><span class="keyword">int</span> less  = left;  <span class="comment">// The index of the first element of center part</span></span><br><span class="line"><span class="keyword">int</span> great = right; <span class="comment">// The index before the first element of right part</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a[e1] != a[e2] &amp;&amp; a[e2] != a[e3] &amp;&amp; a[e3] != a[e4] &amp;&amp; a[e4] != a[e5]) {</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * Use the second and fourth of the five sorted elements as pivots.</span><br><span class="line">     * These values are inexpensive approximations of the first and</span><br><span class="line">     * second terciles of the array. Note that pivot1 &lt;= pivot2.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">long</span> pivot1 = a[e2];</span><br><span class="line">    <span class="keyword">long</span> pivot2 = a[e4];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * The first and the last elements to be sorted are moved to the</span><br><span class="line">     * locations formerly occupied by the pivots. When partitioning</span><br><span class="line">     * is complete, the pivots are swapped back into their final</span><br><span class="line">     * positions, and excluded from subsequent sorting.</span><br><span class="line">     */</span></span><br><span class="line">    a[e2] = a[left];</span><br><span class="line">    a[e4] = a[right];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * Skip elements, which are less or greater than pivot values.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">while</span> (a[++less] &lt; pivot1);</span><br><span class="line">    <span class="keyword">while</span> (a[--great] &gt; pivot2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * Partitioning:</span><br><span class="line">     *</span><br><span class="line">     *   left part           center part                   right part</span><br><span class="line">     * +--------------------------------------------------------------+</span><br><span class="line">     * |  &lt; pivot1  |  pivot1 &lt;= &amp;&amp; &lt;= pivot2  |    ?    |  &gt; pivot2  |</span><br><span class="line">     * +--------------------------------------------------------------+</span><br><span class="line">     *               ^                          ^       ^</span><br><span class="line">     *               |                          |       |</span><br><span class="line">     *              less                        k     great</span><br><span class="line">     *</span><br><span class="line">     * Invariants:</span><br><span class="line">     *</span><br><span class="line">     *              all in (left, less)   &lt; pivot1</span><br><span class="line">     *    pivot1 &lt;= all in [less, k)     &lt;= pivot2</span><br><span class="line">     *              all in (great, right) &gt; pivot2</span><br><span class="line">     *</span><br><span class="line">     * Pointer k is the first index of ?-part.</span><br><span class="line">     */</span></span><br><span class="line">    outer:</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = less - <span class="number">1</span>; ++k &lt;= great; ) {</span><br><span class="line">        <span class="keyword">long</span> ak = a[k];</span><br><span class="line">        <span class="keyword">if</span> (ak &lt; pivot1) { <span class="comment">// Move a[k] to left part</span></span><br><span class="line">            a[k] = a[less];</span><br><span class="line">            <span class="comment">/*</span><br><span class="line">             - Here and below we use &quot;a[i] = b; i++;&quot; instead</span><br><span class="line">             - of &quot;a[i++] = b;&quot; due to performance issue.</span><br><span class="line">             */</span></span><br><span class="line">            a[less] = ak;</span><br><span class="line">            ++less;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (ak &gt; pivot2) { <span class="comment">// Move a[k] to right part</span></span><br><span class="line">            <span class="keyword">while</span> (a[great] &gt; pivot2) {</span><br><span class="line">                <span class="keyword">if</span> (great-- == k) {</span><br><span class="line">                    <span class="keyword">break</span> outer;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (a[great] &lt; pivot1) { <span class="comment">// a[great] &lt;= pivot2</span></span><br><span class="line">                a[k] = a[less];</span><br><span class="line">                a[less] = a[great];</span><br><span class="line">                ++less;</span><br><span class="line">            } <span class="keyword">else</span> { <span class="comment">// pivot1 &lt;= a[great] &lt;= pivot2</span></span><br><span class="line">                a[k] = a[great];</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">/*</span><br><span class="line">             - Here and below we use &quot;a[i] = b; i--;&quot; instead</span><br><span class="line">             - of &quot;a[i--] = b;&quot; due to performance issue.</span><br><span class="line">             */</span></span><br><span class="line">            a[great] = ak;</span><br><span class="line">            --great;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Swap pivots into their final positions</span></span><br><span class="line">    a[left]  = a[less  - <span class="number">1</span>]; a[less  - <span class="number">1</span>] = pivot1;</span><br><span class="line">    a[right] = a[great + <span class="number">1</span>]; a[great + <span class="number">1</span>] = pivot2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sort left and right parts recursively, excluding known pivots</span></span><br><span class="line">    sort(a, left, less - <span class="number">2</span>, leftmost);</span><br><span class="line">    sort(a, great + <span class="number">2</span>, right, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * If center part is too large (comprises &gt; 4/7 of the array),</span><br><span class="line">     * swap internal pivot values to ends.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">if</span> (less &lt; e1 &amp;&amp; e5 &lt; great) {</span><br><span class="line">        <span class="comment">/*</span><br><span class="line">         * Skip elements, which are equal to pivot values.</span><br><span class="line">         */</span></span><br><span class="line">        <span class="keyword">while</span> (a[less] == pivot1) {</span><br><span class="line">            ++less;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (a[great] == pivot2) {</span><br><span class="line">            --great;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span><br><span class="line">         * Partitioning:</span><br><span class="line">         *</span><br><span class="line">         *   left part         center part                  right part</span><br><span class="line">         * +----------------------------------------------------------+</span><br><span class="line">         * | == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |</span><br><span class="line">         * +----------------------------------------------------------+</span><br><span class="line">         *              ^                        ^       ^</span><br><span class="line">         *              |                        |       |</span><br><span class="line">         *             less                      k     great</span><br><span class="line">         *</span><br><span class="line">         * Invariants:</span><br><span class="line">         *</span><br><span class="line">         *              all in (*,  less) == pivot1</span><br><span class="line">         *     pivot1 &lt; all in [less,  k)  &lt; pivot2</span><br><span class="line">         *              all in (great, *) == pivot2</span><br><span class="line">         *</span><br><span class="line">         * Pointer k is the first index of ?-part.</span><br><span class="line">         */</span></span><br><span class="line">        outer:</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = less - <span class="number">1</span>; ++k &lt;= great; ) {</span><br><span class="line">            <span class="keyword">long</span> ak = a[k];</span><br><span class="line">            <span class="keyword">if</span> (ak == pivot1) { <span class="comment">// Move a[k] to left part</span></span><br><span class="line">                a[k] = a[less];</span><br><span class="line">                a[less] = ak;</span><br><span class="line">                ++less;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (ak == pivot2) { <span class="comment">// Move a[k] to right part</span></span><br><span class="line">                <span class="keyword">while</span> (a[great] == pivot2) {</span><br><span class="line">                    <span class="keyword">if</span> (great-- == k) {</span><br><span class="line">                        <span class="keyword">break</span> outer;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (a[great] == pivot1) { <span class="comment">// a[great] &lt; pivot2</span></span><br><span class="line">                    a[k] = a[less];</span><br><span class="line">                    <span class="comment">/*</span><br><span class="line">                     * Even though a[great] equals to pivot1, the</span><br><span class="line">                     * assignment a[less] = pivot1 may be incorrect,</span><br><span class="line">                     * if a[great] and pivot1 are floating-point zeros</span><br><span class="line">                     * of different signs. Therefore in float and</span><br><span class="line">                     * double sorting methods we have to use more</span><br><span class="line">                     * accurate assignment a[less] = a[great].</span><br><span class="line">                     */</span></span><br><span class="line">                    a[less] = pivot1;</span><br><span class="line">                    ++less;</span><br><span class="line">                } <span class="keyword">else</span> { <span class="comment">// pivot1 &lt; a[great] &lt; pivot2</span></span><br><span class="line">                    a[k] = a[great];</span><br><span class="line">                }</span><br><span class="line">                a[great] = ak;</span><br><span class="line">                --great;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sort center part recursively</span></span><br><span class="line">    sort(a, less, great, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">} <span class="keyword">else</span> { <span class="comment">// Partitioning with one pivot</span></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * Use the third of the five sorted elements as pivot.</span><br><span class="line">     * This value is inexpensive approximation of the median.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">long</span> pivot = a[e3];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * Partitioning degenerates to the traditional 3-way</span><br><span class="line">     * (or &quot;Dutch National Flag&quot;) schema:</span><br><span class="line">     *</span><br><span class="line">     *   left part    center part              right part</span><br><span class="line">     * +-------------------------------------------------+</span><br><span class="line">     * |  &lt; pivot  |   == pivot   |     ?    |  &gt; pivot  |</span><br><span class="line">     * +-------------------------------------------------+</span><br><span class="line">     *              ^              ^        ^</span><br><span class="line">     *              |              |        |</span><br><span class="line">     *             less            k      great</span><br><span class="line">     *</span><br><span class="line">     * Invariants:</span><br><span class="line">     *</span><br><span class="line">     *   all in (left, less)   &lt; pivot</span><br><span class="line">     *   all in [less, k)     == pivot</span><br><span class="line">     *   all in (great, right) &gt; pivot</span><br><span class="line">     *</span><br><span class="line">     * Pointer k is the first index of ?-part.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = less; k &lt;= great; ++k) {</span><br><span class="line">        <span class="keyword">if</span> (a[k] == pivot) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">long</span> ak = a[k];</span><br><span class="line">        <span class="keyword">if</span> (ak &lt; pivot) { <span class="comment">// Move a[k] to left part</span></span><br><span class="line">            a[k] = a[less];</span><br><span class="line">            a[less] = ak;</span><br><span class="line">            ++less;</span><br><span class="line">        } <span class="keyword">else</span> { <span class="comment">// a[k] &gt; pivot - Move a[k] to right part</span></span><br><span class="line">            <span class="keyword">while</span> (a[great] &gt; pivot) {</span><br><span class="line">                --great;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (a[great] &lt; pivot) { <span class="comment">// a[great] &lt;= pivot</span></span><br><span class="line">                a[k] = a[less];</span><br><span class="line">                a[less] = a[great];</span><br><span class="line">                ++less;</span><br><span class="line">            } <span class="keyword">else</span> { <span class="comment">// a[great] == pivot</span></span><br><span class="line">                <span class="comment">/*</span><br><span class="line">                 * Even though a[great] equals to pivot, the</span><br><span class="line">                 * assignment a[k] = pivot may be incorrect,</span><br><span class="line">                 * if a[great] and pivot are floating-point</span><br><span class="line">                 * zeros of different signs. Therefore in float</span><br><span class="line">                 * and double sorting methods we have to use</span><br><span class="line">                 * more accurate assignment a[k] = a[great].</span><br><span class="line">                 */</span></span><br><span class="line">                a[k] = pivot;</span><br><span class="line">            }</span><br><span class="line">            a[great] = ak;</span><br><span class="line">            --great;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * Sort left and right parts recursively.</span><br><span class="line">     * All elements from center part are equal</span><br><span class="line">     * and, therefore, already sorted.</span><br><span class="line">     */</span></span><br><span class="line">    sort(a, left, less - <span class="number">1</span>, leftmost);</span><br><span class="line">    sort(a, great + <span class="number">1</span>, right, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Timsort&#x5F52;&#x5E76;&#x6392;&#x5E8F;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * Index run[i] is the start of i-th run</span><br><span class="line"> * (ascending or descending sequence).</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">int</span>[] run = <span class="keyword">new</span> <span class="keyword">int</span>[MAX_RUN_COUNT + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>; run[<span class="number">0</span>] = left;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if the array is nearly sorted</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = left; k &lt; right; run[count] = k) {</span><br><span class="line">    <span class="keyword">if</span> (a[k] &lt; a[k + <span class="number">1</span>]) { <span class="comment">// ascending</span></span><br><span class="line">        <span class="keyword">while</span> (++k &lt;= right &amp;&amp; a[k - <span class="number">1</span>] &lt;= a[k]);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (a[k] &gt; a[k + <span class="number">1</span>]) { <span class="comment">// descending</span></span><br><span class="line">        <span class="comment">// &#x5C06;&#x964D;&#x5E8F;&#x6570;&#x7EC4;&#x53D8;&#x4E3A;&#x5347;&#x5E8F;</span></span><br><span class="line">        <span class="keyword">while</span> (++k &lt;= right &amp;&amp; a[k - <span class="number">1</span>] &gt;= a[k]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> lo = run[count] - <span class="number">1</span>, hi = k; ++lo &lt; --hi; ) {</span><br><span class="line">            <span class="keyword">int</span> t = a[lo]; a[lo] = a[hi]; a[hi] = t;</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> { <span class="comment">// equal</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = MAX_RUN_LENGTH; ++k &lt;= right &amp;&amp; a[k - <span class="number">1</span>] == a[k]; ) {</span><br><span class="line">            <span class="keyword">if</span> (--m == <span class="number">0</span>) {</span><br><span class="line">                sort(a, left, right, <span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * The array is not highly structured,</span><br><span class="line">     * use Quicksort instead of merge sort.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">if</span> (++count == MAX_RUN_COUNT) {</span><br><span class="line">        sort(a, left, right, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check special cases</span></span><br><span class="line"><span class="comment">// Implementation note: variable &quot;right&quot; is increased by 1.</span></span><br><span class="line"><span class="keyword">if</span> (run[count] == right++) { <span class="comment">// The last run contains one element</span></span><br><span class="line">    run[++count] = right;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">1</span>) { <span class="comment">// The array is already sorted</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine alternation base for merge</span></span><br><span class="line"><span class="comment">// &#x786E;&#x5B9A;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x7684;&#x8FED;&#x4EE3;&#x6B21;&#x6570;&#xFF08;&#x6BCF;&#x8FED;&#x4EE3;&#x4E00;&#x6B21;&#xFF0C;&#x5C06;&#x76F8;&#x90BB;&#x5347;&#x5E8F;&#x5B50;&#x5E8F;&#x5217;&#x5408;&#x5E76;&#xFF0C;&#x5373;run&#x5185;&#x5143;&#x7D20;&#x6570;&#x76EE;&#x51CF;&#x534A;&#xFF09;</span></span><br><span class="line"><span class="comment">// &#x7B80;&#x5355;&#x793A;&#x4F8B;&#xFF1A;a[1, 5, 2, 6, 3, 7, 4, 8] ==&gt; a[1, 2, 5, 6, 3, 4, 7, 8]</span></span><br><span class="line"><span class="keyword">byte</span> odd = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; (n &lt;&lt;= <span class="number">1</span>) &lt; count; odd ^= <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use or create temporary array b for merging</span></span><br><span class="line"><span class="keyword">int</span>[] b;                 <span class="comment">// temp array; alternates with a</span></span><br><span class="line"><span class="keyword">int</span> ao, bo;              <span class="comment">// array offsets from &apos;left&apos;</span></span><br><span class="line"><span class="keyword">int</span> blen = right - left; <span class="comment">// space needed for b</span></span><br><span class="line"><span class="keyword">if</span> (work == <span class="keyword">null</span> || workLen &lt; blen || workBase + blen &gt; work.length) {</span><br><span class="line">    work = <span class="keyword">new</span> <span class="keyword">int</span>[blen];</span><br><span class="line">    workBase = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// &#x6839;&#x636E;&#x5F52;&#x5E76;&#x7684;&#x8FED;&#x4EE3;&#x6B21;&#x6570;&#xFF0C;&#x66F4;&#x6539;a,b</span></span><br><span class="line"><span class="comment">// a,b&#x4E2D;&#x5FC5;&#x6709;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x4E3A;&#x539F;&#x59CB;&#x6570;&#x7EC4;&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x4E3A;&#x4E34;&#x65F6;&#x6570;&#x7EC4;</span></span><br><span class="line"><span class="comment">// &#x5728;&#x5F52;&#x5E76;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x6BCF;&#x8FED;&#x4EE3;&#x4E00;&#x6B21;&#xFF0C;run&#x5185;&#x5143;&#x7D20;&#x6570;&#x76EE;&#x51CF;&#x534A;&#xFF0C;&#x540C;&#x65F6;a,b&#x4F1A;&#x4EA4;&#x6362;&#x4E00;&#x6B21;</span></span><br><span class="line"><span class="comment">// &#x4E3A;&#x4E86;&#x4FDD;&#x8BC1;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x8FED;&#x4EE3;&#x540E;&#xFF0C;&#x539F;&#x59CB;&#x6570;&#x7EC4;&#x5185;&#x5B58;&#x6709;&#x5F52;&#x5E76;&#x597D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x5982;&#x4E0B;&#x8003;&#x8651;</span></span><br><span class="line"><span class="keyword">if</span> (odd == <span class="number">0</span>) {</span><br><span class="line">    System.arraycopy(a, left, work, workBase, blen);</span><br><span class="line">    b = a;</span><br><span class="line">    bo = <span class="number">0</span>;</span><br><span class="line">    a = work;</span><br><span class="line">    ao = workBase - left;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    b = work;</span><br><span class="line">    ao = <span class="number">0</span>;</span><br><span class="line">    bo = workBase - left;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Merging</span></span><br><span class="line"><span class="comment">// a&#x662F;&#x539F;&#x59CB;&#x6570;&#x7EC4;&#xFF0C;b&#x662F;&#x76EE;&#x6807;&#x6570;&#x7EC4;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> last; count &gt; <span class="number">1</span>; count = last) {</span><br><span class="line">    <span class="comment">// &#x5408;&#x5E76;&#x4E24;&#x4E2A;&#x76F8;&#x90BB;&#x5347;&#x5E8F;&#x5E8F;&#x5217;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = (last = <span class="number">0</span>) + <span class="number">2</span>; k &lt;= count; k += <span class="number">2</span>) {</span><br><span class="line">        <span class="comment">// &#x786E;&#x5B9A;&#x8FB9;&#x754C;</span></span><br><span class="line">        <span class="keyword">int</span> hi = run[k], mi = run[k - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = run[k - <span class="number">2</span>], p = i, q = mi; i &lt; hi; ++i) {</span><br><span class="line">            <span class="keyword">if</span> (q &gt;= hi || p &lt; mi &amp;&amp; a[p + ao] &lt;= a[q + ao]) {</span><br><span class="line">                b[i + bo] = a[p++ + ao];</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                b[i + bo] = a[q++ + ao];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// &#x66F4;&#x65B0;&#x5B50;&#x5E8F;&#x5217;&#x6807;&#x793A;</span></span><br><span class="line">        run[++last] = hi;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// &#x5982;&#x679C;&#x5347;&#x5E8F;&#x5B50;&#x5E8F;&#x5217;&#x4E2A;&#x6570;&#x4E3A;&#x5947;&#x6570;&#xFF0C;&#x4E4B;&#x524D;&#x4E24;&#x4E24;&#x5408;&#x5E76;&#x65F6;&#xFF0C;&#x6700;&#x540E;&#x4F1A;&#x5269;&#x4F59;&#x4E00;&#x4E2A;&#xFF0C;&#x5C06;&#x5269;&#x4F59;&#x7684;&#x76F4;&#x63A5;&#x62F7;&#x8D1D;&#x5230;b, &#x7B49;&#x5F85;&#x4E0B;&#x4E00;&#x6B21;&#x5408;&#x5E76;</span></span><br><span class="line">    <span class="keyword">if</span> ((count &amp; <span class="number">1</span>) != <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = right, lo = run[count - <span class="number">1</span>]; --i &gt;= lo;</span><br><span class="line">            b[i + bo] = a[i + ao]</span><br><span class="line">        );</span><br><span class="line">        run[++last] = right;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#x4EA4;&#x6362;a b</span></span><br><span class="line">    <span class="keyword">int</span>[] t = a; a = b; b = t;</span><br><span class="line">    <span class="keyword">int</span> o = ao; ao = bo; bo = o;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Reference:</p>
<ul>
<li><a href="http://bindog.github.io/blog/2015/03/30/use-formal-method-to-find-the-bug-in-timsort-and-lunar-rover" target="_blank" rel="external">&#x5F62;&#x5F0F;&#x5316;&#x65B9;&#x6CD5;&#x7684;&#x9006;&#x88AD;&#x2014;&#x2014;&#x5982;&#x4F55;&#x627E;&#x51FA;Timsort&#x7B97;&#x6CD5;&#x548C;&#x7389;&#x5154;&#x6708;&#x7403;&#x8F66;&#x4E2D;&#x7684;Bug&#xFF1F;
</a></li>
<li><a href="http://lib.csdn.net/article/datastructure/9282" target="_blank" rel="external">&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x2014;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#xFF08;JDK1.7 DualPivotQuicksort &#x6E90;&#x7801;&#x89E3;&#x6790;&#xFF09;</a></li>
<li><a href="http://www.voidcn.com/blog/octopusflying/article/p-6181740.html" target="_blank" rel="external">JDK&#x6E90;&#x7801;&#x89E3;&#x6790;(1)&#x2014;&#x2014;&#x6570;&#x636E;&#x6570;&#x7EC4;&#x6392;&#x5E8F;&#xFF1A;Arrays.sort()</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker 常用命令]]></title>
      <url>http://zongwenlong.github.io/2016/10/23/Docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>&#x2003;&#x2003;&#x521D;&#x5B66;Docker&#xFF0C;&#x8BB0;&#x5F55;&#x4E00;&#x4E9B;&#x5E38;&#x7528;&#x547D;&#x4EE4;&#x4E0E;&#x914D;&#x7F6E;&#x65B9;&#x6CD5;&#x3002;</p>
<h2 id="&#x4FE1;&#x606F;&#x67E5;&#x770B;"><a href="#&#x4FE1;&#x606F;&#x67E5;&#x770B;" class="headerlink" title="&#x4FE1;&#x606F;&#x67E5;&#x770B;"></a>&#x4FE1;&#x606F;&#x67E5;&#x770B;</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info                  <span class="comment"># &#x67E5;&#x770B;docker&#x57FA;&#x672C;&#x4FE1;&#x606F;</span></span><br><span class="line">docker images                <span class="comment"># &#x67E5;&#x770B;&#x955C;&#x50CF;&#x5217;&#x8868;</span></span><br><span class="line">docker ps                    <span class="comment"># &#x67E5;&#x770B;&#x8FD0;&#x884C;&#x4E2D;&#x7684;&#x5BB9;&#x5668;&#x5217;&#x8868;</span></span><br><span class="line">docker logs 819f822966a6     <span class="comment"># &#x67E5;&#x770B;&#x5BB9;&#x5668;&#x8FD0;&#x884C;log</span></span><br><span class="line">docker search (image-name)   <span class="comment"># &#x4ED3;&#x5E93;&#x4E2D;&#x955C;&#x50CF;&#x67E5;&#x627E;</span></span><br><span class="line">docker stats                 <span class="comment"># &#x67E5;&#x770B;docker&#x4F7F;&#x7528;cpu&#x3001;&#x5185;&#x5B58;&#x3001;&#x7F51;&#x7EDC;&#x3001;io&#x60C5;&#x51B5;</span></span><br></pre></td></tr></table></figure>
<h2 id="&#x542F;&#x52A8;&#x548C;&#x7EC8;&#x6B62;&#x5BB9;&#x5668;"><a href="#&#x542F;&#x52A8;&#x548C;&#x7EC8;&#x6B62;&#x5BB9;&#x5668;" class="headerlink" title="&#x542F;&#x52A8;&#x548C;&#x7EC8;&#x6B62;&#x5BB9;&#x5668;"></a>&#x542F;&#x52A8;&#x548C;&#x7EC8;&#x6B62;&#x5BB9;&#x5668;</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run busybox /bin/<span class="built_in">echo</span> Hello Docker          <span class="comment"># &#x5BB9;&#x5668;&#x540D;&#x79F0;&#x201C;Helo Docker&#x201D;</span></span><br><span class="line">docker start 819f822966a6                          <span class="comment"># &#x8FD0;&#x884C;</span></span><br><span class="line">docker stop 819f822966a6                           <span class="comment"># &#x505C;&#x6B62;</span></span><br><span class="line">docker restart 819f822966a6                        <span class="comment"># &#x91CD;&#x542F;</span></span><br><span class="line">docker rm 819f822966a6                             <span class="comment"># &#x5220;&#x9664;</span></span><br><span class="line">docker commit 819f822966a6 job1                    <span class="comment"># &#x5C06;&#x5BB9;&#x5668;&#x4FDD;&#x5B58;&#x4E3A;&#x955C;&#x50CF;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x8FDB;&#x5165;&#x5BB9;&#x5668;&#x5185;&#x90E8;</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 775c7c9ee1e1 /bin/bash</span><br></pre></td></tr></table></figure>
<h2 id="&#x5BFC;&#x5165;&#x548C;&#x5BFC;&#x51FA;&#x5BB9;&#x5668;"><a href="#&#x5BFC;&#x5165;&#x548C;&#x5BFC;&#x51FA;&#x5BB9;&#x5668;" class="headerlink" title="&#x5BFC;&#x5165;&#x548C;&#x5BFC;&#x51FA;&#x5BB9;&#x5668;"></a>&#x5BFC;&#x5165;&#x548C;&#x5BFC;&#x51FA;&#x5BB9;&#x5668;</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">export</span> 7691a814370e &gt; ubuntu.tar   <span class="comment"># export</span></span><br></pre></td></tr></table></figure>
<h2 id="CentOS-7-&#x8FC1;&#x79FB;Docker&#x76EE;&#x5F55;"><a href="#CentOS-7-&#x8FC1;&#x79FB;Docker&#x76EE;&#x5F55;" class="headerlink" title="CentOS 7 &#x8FC1;&#x79FB;Docker&#x76EE;&#x5F55;"></a>CentOS 7 &#x8FC1;&#x79FB;Docker&#x76EE;&#x5F55;</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -r /var/lib/docker/ /data/docker  </span><br><span class="line">vim /lib/systemd/system/docker.service</span><br><span class="line">   ExecStart=/usr/bin/dockerd --graph=<span class="string">&quot;/data/docker&quot;</span></span><br><span class="line">systemctl daemon-reload   <span class="comment">#&#x91CD;&#x65B0;&#x52A0;&#x8F7D;&#x914D;&#x7F6E;</span></span><br><span class="line">service docker restart    <span class="comment">#&#x91CD;&#x542F;&#x670D;&#x52A1;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://docs.docker.com/engine/admin/systemd/" target="_blank" rel="external">&#x53C2;&#x8003;</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用Docker快速搭建WordPress博客]]></title>
      <url>http://zongwenlong.github.io/2016/10/07/%E5%88%A9%E7%94%A8Docker%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAWordPress%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>&#x2003;&#x2003;&#x8BFB;&#x7814;&#x4E00;&#x5E74;&#x591A;&#x4E86;&#xFF0C;&#x4E00;&#x76F4;&#x60F3;&#x7740;&#x7ED9;&#x8BFE;&#x9898;&#x7EC4;&#x91CC;&#x642D;&#x5EFA;&#x4E00;&#x4E2A;&#x535A;&#x5BA2;&#x7F51;&#x7AD9;&#xFF0C;&#x65B9;&#x4FBF;&#x5C0F;&#x4F19;&#x4F34;&#x4EEC;&#x5206;&#x4EAB;&#x5404;&#x79CD;&#x6280;&#x672F;&#x3001;&#x4EA7;&#x54C1;&#x7ECF;&#x9A8C;&#xFF0C;&#x540C;&#x65F6;&#x56E2;&#x961F;&#x4E5F;&#x80FD;&#x6C89;&#x6DC0;&#x4E0B;&#x4E00;&#x4E9B;&#x4E1C;&#x897F;&#x3002;&#x5341;&#x4E00;&#x521A;&#x597D;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x4E8B;&#x60C5;&#xFF0C;&#x5C31;&#x67E5;&#x4E86;&#x67E5;&#x8D44;&#x6599;&#xFF0C;&#x7528;Docker&#x548C;WordPress&#x642D;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;&#x535A;&#x5BA2;&#x7F51;&#x7AD9;&#x3002;&#x4E0B;&#x9762;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B;&#x4E00;&#x4E9B;&#x642D;&#x5EFA;&#x8FC7;&#x7A0B;&#x3002;</p>
<h2 id="&#x9009;&#x62E9;"><a href="#&#x9009;&#x62E9;" class="headerlink" title="&#x9009;&#x62E9;"></a>&#x9009;&#x62E9;</h2><ul>
<li>WordPress: &#x4E16;&#x754C;&#x4E0A;&#x5E94;&#x7528;&#x6700;&#x5E7F;&#x6CDB;&#x7684;&#x5F00;&#x6E90;&#x535A;&#x5BA2;&#x7A0B;&#x5E8F;&#xFF0C;&#x57FA;&#x4E8E;PHP&#x548C;MySQL&#x6570;&#x636E;&#x5E93;&#xFF0C;&#x7279;&#x70B9;&#x662F;&#xFF1A;&#x5B89;&#x88C5;&#x7B80;&#x4FBF;&#xFF0C;&#x51FA;&#x4E86;&#x540D;&#x7684;5&#x5206;&#x949F;&#x5B89;&#x88C5;&#xFF0C;&#x5E76;&#x4E14;&#x529F;&#x80FD;&#x5F3A;&#x5927;&#x3002;&#x53EA;&#x662F;&#x4F7F;&#x7528;&#x7684;&#x8BDD;&#xFF0C;&#x65E0;&#x9700;&#x540E;&#x671F;&#x7F16;&#x7A0B;&#xFF0C;&#x9F20;&#x6807;&#x70B9;&#x70B9;&#x3001;&#x952E;&#x76D8;&#x6572;&#x6572;&#x5373;&#x53EF;&#x6EE1;&#x8DB3;&#x9700;&#x6C42;&#x3002;</li>
<li>Docker&#xFF1A;&#x65B9;&#x4FBF;WordPress&#x73AF;&#x5883;&#x642D;&#x5EFA;&#x4EE5;&#x53CA;&#x540E;&#x671F;&#x5907;&#x4EFD;&#xFF0C;&#x8FC1;&#x79FB;&#x3002;</li>
</ul>
<h2 id="Version-1-&#x4E0D;&#x63A8;&#x8350;"><a href="#Version-1-&#x4E0D;&#x63A8;&#x8350;" class="headerlink" title="Version 1 (&#x4E0D;&#x63A8;&#x8350;)"></a>Version 1 (&#x4E0D;&#x63A8;&#x8350;)</h2><ol>
<li><p>&#x5B89;&#x88C5;Docker &#xFF08;CentOS 7 &#x4E3A;&#x4F8B;&#xFF09;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br><span class="line"></span><br><span class="line">sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-<span class="string">&apos;EOF&apos;</span></span><br><span class="line">[dockerrepo]</span><br><span class="line">name=Docker Repository</span><br><span class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/7/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://yum.dockerproject.org/gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo yum install docker-engine       <span class="comment"># Install the Docker package</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker.service <span class="comment"># Enable the service</span></span><br><span class="line">sudo systemctl start docker          <span class="comment"># Start the Docker daemon.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>&#x5B89;&#x88C5;WordPress<br>&#x2003;&#x2003;&#x4F7F;&#x7528;WrodPress&#x6240;&#x9700;&#x7684;&#x57FA;&#x672C;&#x73AF;&#x5883;&#xFF1A;Apache + PHP + MySQL&#x3002;&#x672C;&#x6765;&#x60F3;&#x7528;Docker&#x7684;lamp&#x955C;&#x50CF;&#xFF0C;&#x641C;&#x7D22;&#x4E86;&#x4E00;&#x4E0B;&#xFF0C;&#x53D1;&#x73B0;WordPress&#x5C31;&#x6709;&#x955C;&#x50CF;&#x3002;&#x4F46;&#x5B98;&#x65B9;&#x7684;WordPress&#x955C;&#x50CF;&#x4ECD;&#x9700;&#x8981;&#x5355;&#x72EC;&#x7684;MySQL&#x6570;&#x636E;&#x5E93;&#xFF0C;&#x540E;&#x6765;&#x641C;&#x7D22;&#x5230;&#x4E86;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x4E0D;&#x9519;&#x7684;&#x955C;&#x50CF;<a href="https://hub.docker.com/r/tutum/wordpress/" target="_blank" rel="external">tutum/wordpress</a>&#x5305;&#x542B;&#x4E86;WordPress&#x8FD0;&#x884C;&#x6240;&#x9700;&#x7684;&#x6240;&#x6709;&#x73AF;&#x5883;&#xFF0C;&#x6240;&#x4EE5;&#x76F4;&#x63A5;&#x62C9;&#x53D6;&#x955C;&#x50CF;&#x3001;&#x8FD0;&#x884C;&#x5BB9;&#x5668;&#x5C31;&#x597D;&#x4E86;&#x3002;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker pull tutum/wordpress                    <span class="comment"># &#x62C9;&#x53D6;&#x955C;&#x50CF;</span></span><br><span class="line">sudo docker run <span class="_">-d</span> -p 80:80 tutum/wordpress  <span class="string">&quot;blog&quot;</span> <span class="comment"># &#x8FD0;&#x884C;&#x5BB9;&#x5668;</span></span><br><span class="line">sudo curl http://localhost/                         <span class="comment"># &#x6D4B;&#x8BD5;&#x5B89;&#x88C5;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>WordPress &#x81EA;&#x4E3B;&#x914D;&#x7F6E;(&#x6BD4;&#x8F83;&#x7B80;&#x5355;&#xFF0C;&#x7EC6;&#x8282;&#x4E0D;&#x518D;&#x7D2F;&#x8FF0;)</p>
<ul>
<li>&#x8BBE;&#x7F6E;&#x8D26;&#x53F7;&#x57FA;&#x672C;&#x4FE1;&#x606F;&#xFF0C;&#x8FDB;&#x5165;&#x63A7;&#x5236;&#x53F0;</li>
<li>&#x9009;&#x62E9;&#x4E3B;&#x9898;</li>
<li>&#x6309;&#x4E2A;&#x4EBA;&#x9700;&#x6C42;&#xFF0C;&#x5B89;&#x88C5;&#x63D2;&#x4EF6;(JP Markdown&#x7B49;)</li>
<li>&#x914D;&#x7F6E;&#x9875;&#x9762;&#x5E03;&#x5C40;</li>
</ul>
</li>
<li><p>&#x5E38;&#x7528;Docker&#x547D;&#x4EE4;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker.service <span class="comment"># Enable the service</span></span><br><span class="line">sudo systemctl start docker          <span class="comment"># Start the Docker daemon.</span></span><br><span class="line">sudo docker images                   <span class="comment"># Show local images</span></span><br><span class="line">sudo docker run <span class="_">-d</span> -p 80:80 tutum/wordpress  <span class="string">&quot;blog&quot;</span>  <span class="comment"># Run container</span></span><br><span class="line">sudo docker stop <span class="string">&quot;blog&quot;</span>              <span class="comment"># Stop container</span></span><br><span class="line">sudo docker ps <span class="_">-a</span>                    <span class="comment"># Show container list</span></span><br><span class="line">sudo docker <span class="built_in">export</span> 7691a814370e &gt; blog.tar                          <span class="comment"># Export container</span></span><br><span class="line">cat blog.tar | sudo docker import - tutum/wordpress blog.tar        <span class="comment"># Import container</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Version-2-&#x63A8;&#x8350;"><a href="#Version-2-&#x63A8;&#x8350;" class="headerlink" title="Version 2 (&#x63A8;&#x8350;)"></a>Version 2 (&#x63A8;&#x8350;)</h2><p>&#x2003;&#x2003;&#x5176;&#x5B9E;Docker&#x5B98;&#x65B9;&#x6709;wordpress&#x7684;&#x5B89;&#x88C5;&#x5B9E;&#x4F8B;&#x6587;&#x6863;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x4E00;&#x952E;&#x5B89;&#x88C5;&#xFF0C;&#x8BE6;&#x60C5;&#x8BF7;&#x89C1;&#xFF1A;<a href="https://docs.docker.com/compose/wordpress/" target="_blank" rel="external">Quickstart: Compose and WordPress</a></p>
<h2 id="&#x603B;&#x7ED3;"><a href="#&#x603B;&#x7ED3;" class="headerlink" title="&#x603B;&#x7ED3;"></a>&#x603B;&#x7ED3;</h2><p>&#x2003;&#x2003;&#x672C;&#x6587;&#x4EC5;&#x4EC5;&#x662F;&#x5BF9;Docker&#x7684;&#x7B80;&#x5355;&#x4F7F;&#x7528;&#xFF0C;Docker&#x3001;OpenStack&#x76F8;&#x5173;&#x7684;&#x4E91;&#x5E73;&#x53F0;&#x3001;&#x5BB9;&#x5668;&#x6280;&#x672F;&#x4EE5;&#x540E;&#x4F1A;&#x7EE7;&#x7EED;&#x5173;&#x6CE8;&#x3002;&#x6700;&#x540E;&#x653E;&#x4E00;&#x5F20;&#x642D;&#x5EFA;&#x5B8C;&#x7684;&#x535A;&#x5BA2;&#x56FE;&#x3002;<br><img src="/2016/10/07/&#x5229;&#x7528;Docker&#x5FEB;&#x901F;&#x642D;&#x5EFA;WordPress&#x535A;&#x5BA2;/blog.PNG" alt=""> </p>
<h2 id="&#x4E3B;&#x8981;&#x53C2;&#x8003;"><a href="#&#x4E3B;&#x8981;&#x53C2;&#x8003;" class="headerlink" title="&#x4E3B;&#x8981;&#x53C2;&#x8003;"></a>&#x4E3B;&#x8981;&#x53C2;&#x8003;</h2><blockquote>
<ol>
<li>&#x8BE6;&#x7EC6;Docker&#x5B89;&#x88C5;&#x5373;&#x4F7F;&#x7528;&#x6B65;&#x9AA4;&#x8BF7;&#x770B; <a href="https://docs.docker.com/engine/installation/linux/centos/" target="_blank" rel="external">Docker&#x5B98;&#x65B9;&#x6587;&#x6863;</a></li>
<li>Docker&#x4F7F;&#x7528;&#x4ECB;&#x7ECD; <a href="https://www.gitbook.com/book/yeasy/docker_practice/details" target="_blank" rel="external">Docker &#x2014;&#x2014; &#x4ECE;&#x5165;&#x95E8;&#x5230;&#x5B9E;&#x8DF5;</a></li>
<li><a href="https://hub.docker.com/r/tutum/wordpress/" target="_blank" rel="external">tutum/wordpress</a></li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RESTful SpringMVC Swagger Demo]]></title>
      <url>http://zongwenlong.github.io/2016/09/18/RESTful-SpringMVC-Swagger-Demo/</url>
      <content type="html"><![CDATA[<p>SpringMVC&#x6846;&#x67B6;&#x642D;&#x5EFA; RESTful &#x98CE;&#x683C;&#x540E;&#x7AEF;&#x670D;&#x52A1;&#x5668;&#x793A;&#x4F8B;<br>&#x6E90;&#x7801;&#xFF1A;<a href="https://github.com/ZongWenlong/RESTful-SpringMVC-Swagger-Demo" target="_blank" rel="external">RESTful-SpringMVC-Swagger-Demo</a></p>
<h1 id="&#x7B80;&#x4ECB;&#xFF1A;"><a href="#&#x7B80;&#x4ECB;&#xFF1A;" class="headerlink" title="&#x7B80;&#x4ECB;&#xFF1A;"></a>&#x7B80;&#x4ECB;&#xFF1A;</h1><h2 id="&#x6D89;&#x53CA;&#x6846;&#x67B6;&#x6216;&#x6570;&#x636E;&#x5E93;"><a href="#&#x6D89;&#x53CA;&#x6846;&#x67B6;&#x6216;&#x6570;&#x636E;&#x5E93;" class="headerlink" title="&#x6D89;&#x53CA;&#x6846;&#x67B6;&#x6216;&#x6570;&#x636E;&#x5E93;"></a>&#x6D89;&#x53CA;&#x6846;&#x67B6;&#x6216;&#x6570;&#x636E;&#x5E93;</h2><ul>
<li>SpringMVC &#x6846;&#x67B6;</li>
<li>Spring &#x6846;&#x67B6;</li>
<li>MyBatis &#x6846;&#x67B6;</li>
<li>Log4j &#x65E5;&#x5FD7;&#x6846;&#x67B6;</li>
<li>MySQL &#x6570;&#x636E;&#x5E93;</li>
<li>Redis &#x6570;&#x636E;&#x5E93;</li>
<li>Swagger-UI API&#x63A5;&#x53E3;&#x7BA1;&#x7406;&#x5DE5;&#x5177;</li>
</ul>
<h2 id="Try-it"><a href="#Try-it" class="headerlink" title="Try it"></a>Try it</h2><ol>
<li>&#x5BFC;&#x5165;&#x9879;&#x76EE;&#x5230;<code>IDEA/Eclipse</code>&#x4E2D;</li>
<li>&#x521D;&#x59CB;&#x5316;&#x6570;&#x636E;&#x5E93;&#xFF0C;&#x5BFC;&#x5165;<code>tools/mysql-init.sql</code>&#x5230;MySQL&#x6570;&#x636E;&#x5E93;&#xFF08;&#x672C;&#x793A;&#x4F8B;&#x4EC5;&#x5305;&#x542B;&#x4E00;&#x5F20;&#x8868;&#xFF0C;&#x4E00;&#x6761;&#x8BB0;&#x5F55;&#xFF09;</li>
<li>&#x914D;&#x7F6E;MySQL&#x548C;Redis&#xFF0C;&#x4FEE;&#x6539;<code>src//main/resource/database.properties</code><ul>
<li>mysql.url</li>
<li>mysql.username</li>
<li>mysql.password</li>
<li>redis.host</li>
</ul>
</li>
<li><p>&#x4FEE;&#x6539;<code>src/main/webapp/WEB-INF/swagger-ui/index.html</code></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url = &quot;http://localhost:8888/api-docs&quot;;</span><br><span class="line">&#x4FEE;&#x6539;&#x4E3A;&#xFF1A;</span><br><span class="line">url = &quot;http://ip:port/{&#x9879;&#x76EE;&#x540D;}/api-docs</span><br></pre></td></tr></table></figure>
</li>
<li><p>&#x542F;&#x52A8;</p>
</li>
<li>&#x6D4F;&#x89C8;&#x5668;&#x4E2D;&#x67E5;&#x770B;<code>http://ip:port/{&#x9879;&#x76EE;&#x540D;}/swagger/index.html</code>&#x9875;&#x9762;&#x663E;&#x793A;&#x5982;&#x4E0B;&#xFF1A; <img src="https://github.com/ZongWenlong/Demos/blob/master/images/swagger/api-examples.PNG" alt="image"></li>
</ol>
<h1 id="&#x5177;&#x4F53;&#x8BF4;&#x660E;&#xFF1A;"><a href="#&#x5177;&#x4F53;&#x8BF4;&#x660E;&#xFF1A;" class="headerlink" title="&#x5177;&#x4F53;&#x8BF4;&#x660E;&#xFF1A;"></a>&#x5177;&#x4F53;&#x8BF4;&#x660E;&#xFF1A;</h1><h2 id="&#x8BF7;&#x6C42;&#x54CD;&#x5E94;&#x8FC7;&#x7A0B;"><a href="#&#x8BF7;&#x6C42;&#x54CD;&#x5E94;&#x8FC7;&#x7A0B;" class="headerlink" title="&#x8BF7;&#x6C42;&#x54CD;&#x5E94;&#x8FC7;&#x7A0B;"></a>&#x8BF7;&#x6C42;&#x54CD;&#x5E94;&#x8FC7;&#x7A0B;</h2><ul>
<li>&#x767B;&#x5F55;&#xFF1A;&#x8BF7;&#x6C42;&#x4E2D;&#x643A;&#x5E26;&#x7528;&#x6237;&#x540D;&#x5BC6;&#x7801;&#xFF0C;&#x83B7;&#x53D6;Token, &#x4E3A;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#x672C;&#x793A;&#x4F8B;&#x53EA;&#x8981;&#x7528;&#x6237;&#x540D;&#x548C;&#x5BC6;&#x7801;&#x76F8;&#x540C;&#x5219;&#x9A8C;&#x8BC1;&#x901A;&#x8FC7;<ul>
<li>Token<ul>
<li>&#x51ED;&#x8BC1;&#x4FE1;&#x606F;&#xFF0C;&#x7528;&#x6237;&#x5728;&#x4E4B;&#x540E;&#x7684;&#x8BF7;&#x6C42;&#x4E2D;&#x7528;Token&#x4E2D;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x4EE3;&#x66FF;&#x5BC6;&#x7801;&#x4F9B;&#x9274;&#x6743;&#x4F7F;&#x7528;&#xFF0C;&#x5E76;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x4F7F;&#x7528;&#x671F;&#x9650;</li>
<li>&#x4E3A;&#x52A0;&#x901F;&#x67E5;&#x8BE2;&#xFF0C;Token&#x5B57;&#x7B26;&#x4E32;&#x5B58;&#x50A8;&#x5728;Redis&#x4E2D;&#xFF0C;&#x5B58;&#x50A8;&#x683C;&#x5F0F;&#x4E3A;Key-Value&#xFF08;name-tokenStr&#xFF09;</li>
</ul>
</li>
</ul>
</li>
<li>&#x9274;&#x6743;&#xFF1A;&#x9664;&#x767B;&#x5F55;&#x5916;&#x7684;&#x5176;&#x4ED6;&#x64CD;&#x4F5C;&#x539F;&#x5219;&#x4E0A;&#x5747;&#x9700;&#x8981;&#x7ECF;&#x8FC7;&#x9274;&#x6743;&#x624D;&#x80FD;&#x4F7F;&#x7528;&#x7CFB;&#x7EDF;&#x7684;API<ul>
<li>&#x672C;&#x793A;&#x4F8B;&#x4E2D;&#x5229;&#x7528;&#x62E6;&#x622A;&#x5668;<code>src/java/pers/well/interceptor/AuthorizationInterceptor</code>&#x62E6;&#x622A;&#x8BF7;&#x6C42;&#xFF0C;&#x8FDB;&#x884C;Token&#x6B63;&#x786E;&#x6027;&#x9A8C;&#x8BC1;</li>
<li><code>AuthorizationInterceptor</code> &#x5728;<code>src/main/resource/spring-mvc.xml</code>&#x4E2D;&#x914D;&#x7F6E;</li>
</ul>
</li>
</ul>
<h2 id="&#x63A5;&#x53E3;&#x8BF4;&#x660E;"><a href="#&#x63A5;&#x53E3;&#x8BF4;&#x660E;" class="headerlink" title="&#x63A5;&#x53E3;&#x8BF4;&#x660E;"></a>&#x63A5;&#x53E3;&#x8BF4;&#x660E;</h2><ul>
<li>&#x793A;&#x4F8B;&#x4E2D;&#x6709;&#x4E09;&#x4E2A;&#x63A5;&#x53E3;&#xFF1A;/login, /student, token/student</li>
<li>/login<ul>
<li>&#x8BF7;&#x6C42;&#x4E2D;&#x643A;&#x5E26;&#x7528;&#x6237;&#x540D;&#x5BC6;&#x7801;&#xFF0C;&#x83B7;&#x53D6;Token</li>
</ul>
</li>
<li>/student<ul>
<li>&#x65E0;token&#x793A;&#x4F8B;&#xFF0C;&#x63D0;&#x4F9B;&#x7B80;&#x5355;&#x7684;id&#x53C2;&#x6570;&#x5373;&#x53EF;&#x8FDB;&#x884C;&#x67E5;&#x8BE2;</li>
</ul>
</li>
<li>/token/student<ul>
<li>&#x9700;&#x8981;&#x9274;&#x6743;&#x7684;&#x63A5;&#x53E3;&#x793A;&#x4F8B;&#xFF0C;&#x5FC5;&#x987B;&#x643A;&#x5E26;&#x6B63;&#x786E;&#x7684;token&#x548C;username&#xFF0C;&#x5426;&#x5219;&#x9274;&#x6743;&#x5931;&#x8D25;</li>
</ul>
</li>
</ul>
<h2 id="&#x90E8;&#x5206;&#x914D;&#x7F6E;&#x9879;&#x8BF4;&#x660E;"><a href="#&#x90E8;&#x5206;&#x914D;&#x7F6E;&#x9879;&#x8BF4;&#x660E;" class="headerlink" title="&#x90E8;&#x5206;&#x914D;&#x7F6E;&#x9879;&#x8BF4;&#x660E;"></a>&#x90E8;&#x5206;&#x914D;&#x7F6E;&#x9879;&#x8BF4;&#x660E;</h2><ul>
<li><p><code>src/main/resource/</code>&#x76EE;&#x5F55;&#xFF1A;</p>
<ul>
<li>database.properties: &#x6570;&#x636E;&#x5E93;&#x76F8;&#x5173;&#x914D;&#x7F6E;</li>
<li>log4j.properties: log4j&#x65E5;&#x5FD7;&#x914D;&#x7F6E;</li>
<li>mybatis-config.xml: mybatis&#x5206;&#x9875;&#x63D2;&#x4EF6;&#x7B49;&#x76F8;&#x5173;&#x914D;&#x7F6E;</li>
<li>spring.xml: redis&#x7B49;&#x914D;&#x7F6E;</li>
<li>spring-mvc.xml&#xFF1A; springmvc&#x914D;&#x7F6E;</li>
<li>spring-mybatis.xml: spring,mybatis&#x6574;&#x5408;&#x914D;&#x7F6E;</li>
</ul>
</li>
</ul>
<h2 id="Swagger-UI&#x8BF4;&#x660E;"><a href="#Swagger-UI&#x8BF4;&#x660E;" class="headerlink" title="Swagger-UI&#x8BF4;&#x660E;"></a>Swagger-UI&#x8BF4;&#x660E;</h2><ul>
<li><p>SpringMVC&#x9879;&#x76EE;&#x4E2D;&#x5F15;&#x5165;Swagger&#x7684;&#x4E3B;&#x8981;&#x6B65;&#x9AA4;&#xFF1A;</p>
<ul>
<li>&#x6DFB;&#x52A0;&#x4E2A;&#x6027;&#x5316;&#x914D;&#x7F6E;&#xFF1A;<code>src/java/pers/well/config/SwaggerConfig.java</code></li>
<li>Copy Swagger-UI&#x754C;&#x9762;&#x90E8;&#x5206;<a href="https://github.com/swagger-api/swagger-ui/tree/master/dist" target="_blank" rel="external">SWagger-UI</a> &#x5230;<code>webapp/WEB-INF/swagger-ui</code></li>
<li><p>Spring&#x914D;&#x7F6E;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean class=&quot;pers.well.config.SwaggerConfig&quot; /&gt;</span><br><span class="line">&lt;mvc:resources mapping=&quot;/swagger/**&quot; location=&quot;/WEB-INF/swagger-ui/&quot;/&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Controller&#x4E2D;&#x53EF;&#x4EE5;&#x81EA;&#x4E3B;&#x6DFB;&#x52A0;&#x914D;&#x7F6E;&#xFF0C;&#x66F4;&#x597D;&#x7684;&#x663E;&#x793A;API&#xFF1A;</p>
<ul>
<li>@API</li>
<li>@ApiOperation</li>
<li>@ApiModel</li>
<li>@ApiModelProperty</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>&#x4E3B;&#x8981;&#x53C2;&#x8003;&#xFF1A;</p>
<blockquote>
<ol>
<li><a href="https://github.com/albertchendao/demos/tree/master/java/spring/HelloWorld-MVC-Swagger" target="_blank" rel="external">HelloWorld-MVC-Swagger</a></li>
<li><a href="https://www.javacodegeeks.com/2013/10/swagger-make-developers-love-working-with-your-rest-api.html" target="_blank" rel="external">Swagger: make developers love working with your REST API</a></li>
</ol>
</blockquote>
<h2 id="&#x5176;&#x4ED6;&#x8BF4;&#x660E;&#xFF1A;"><a href="#&#x5176;&#x4ED6;&#x8BF4;&#x660E;&#xFF1A;" class="headerlink" title="&#x5176;&#x4ED6;&#x8BF4;&#x660E;&#xFF1A;"></a>&#x5176;&#x4ED6;&#x8BF4;&#x660E;&#xFF1A;</h2><ul>
<li>MyBatisGeneratorConfig.xml MyBatis&#x4EE3;&#x7801;&#x81EA;&#x52A8;&#x751F;&#x6210;&#x5668;&#x914D;&#x7F6E;&#xFF0C;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x6570;&#x636E;&#x5E93;&#x8868;&#x4FE1;&#x606F;&#x81EA;&#x52A8;&#x53CD;&#x5411;&#x751F;&#x6210;MyBatis Mapper&#x7B49;&#x6587;&#x4EF6;&#xFF0C;&#x8BE6;&#x7EC6;&#x8BF4;&#x660E;&#x89C1; <a href="http://generator.sturgeon.mopaas.com/index.html" target="_blank" rel="external">MyBatis Generator</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[西藏游记（六人七天）]]></title>
      <url>http://zongwenlong.github.io/2016/09/03/%E8%A5%BF%E8%97%8F%E6%B8%B8%E8%AE%B0%EF%BC%88%E5%85%AD%E4%BA%BA%E4%B8%83%E5%A4%A9%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>&#x2003;&#x2003;&#x897F;&#x85CF;&#xFF0C;&#x4E00;&#x4E2A;&#x795E;&#x79D8;&#x800C;&#x9065;&#x8FDC;&#x7684;&#x5730;&#x65B9;&#x3002;&#x4E00;&#x76F4;&#x4EE5;&#x6765;&#xFF0C;&#x6211;&#x5C31;&#x60F3;&#x53BB;&#x8FD9;&#x4E2A;&#x79BB;&#x592A;&#x9633;&#x6700;&#x8FD1;&#x7684;&#x5730;&#x65B9;&#x770B;&#x770B;&#x3002;&#x8FD9;&#x4E2A;&#x6691;&#x5047;&#xFF0C;&#x5728;&#x5C0F;&#x4F19;&#x4F34;&#x7684;&#x76F8;&#x4E92;&#x201C;&#x903C;&#x8FEB;&#x201D;&#x4E0B;&#xFF0C;&#x6211;&#x4EEC;&#x7EC8;&#x4E8E;&#x6765;&#x5230;&#x4E86;&#x8FD9;&#x4E2A;&#x8BA9;&#x4EBA;&#x75F4;&#x9189;&#x7684;&#x5730;&#x65B9;&#x3002;<br>&#x2003;&#x2003;&#x5728;&#x897F;&#x85CF;&#xFF0C;&#x6211;&#x4EEC;&#x4E00;&#x5171;&#x5446;&#x4E86;7&#x5929;&#x3002;7&#x5929;&#x91CC;&#xFF0C;&#x6211;&#x7B2C;&#x4E00;&#x6B21;&#x7ECF;&#x5386;&#x957F;&#x65F6;&#x95F4;&#x7684;&#x201C;&#x6C7D;&#x8F66;&#x65C5;&#x884C;&#x201D;&#xFF0C;&#x7B2C;&#x4E00;&#x6B21;&#x770B;&#x5230;&#x5982;&#x6B64;&#x6E5B;&#x84DD;&#x7684;&#x5929;&#x7A7A;&#x3001;&#x6E56;&#x6C34;&#xFF0C;&#x7B2C;&#x4E00;&#x6B21;&#x5C1D;&#x8BD5;&#x624B;&#x811A;&#x5E76;&#x7528;&#x6500;&#x722C;&#x5C0F;&#x5C71;&#x2014;&#x2014;&#x53EA;&#x4E3A;&#x79BB;&#x90A3;&#x51B0;&#x5DDD;&#x66F4;&#x8FD1;&#x4E00;&#x70B9;&#xFF0C;&#x7B2C;&#x4E00;&#x6B21;&#x89C9;&#x5F97;&#x4E16;&#x754C;&#x4E0A;&#x7ADF;&#x7136;&#x80FD;&#x6709;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x5730;&#x65B9;&#x5982;&#x6B64;&#x8BA9;&#x4EBA;&#x96BE;&#x4EE5;&#x5FD8;&#x6000;&#xFF0C;&#x671F;&#x5F85;&#x7740;&#x4E0E;&#x5979;&#x7684;&#x518D;&#x6B21;&#x76F8;&#x9047;&#x3002; </p>
<h1 id="&#x7F8E;&#x56FE;&#x4F18;&#x5148;"><a href="#&#x7F8E;&#x56FE;&#x4F18;&#x5148;" class="headerlink" title="&#x7F8E;&#x56FE;&#x4F18;&#x5148;"></a>&#x7F8E;&#x56FE;&#x4F18;&#x5148;</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x5148;&#x653E;&#x4E00;&#x6CE2;&#x5927;&#x56FE;&#xFF0C;&#x540E;&#x8FB9;&#x662F;&#x8BE6;&#x7EC6;&#x65C5;&#x884C;&#x653B;&#x7565;</span><br></pre></td></tr></table></figure>
<p><em>&#x6CE8;&#xFF1A;&#x4EE5;&#x4E0B;&#x56FE;&#x7247;&#x5927;&#x90E8;&#x5206;&#x6765;&#x6E90;&#x4E8E;&#x540C;&#x884C;&#x5C0F;&#x4F19;&#x4F34; <a href="http://weibo.com/u/2175302752?refer_flag=1001030201_&amp;is_hot=1&amp;noscale_head=1#_0" target="_blank" rel="external">&#x8944;&#x9633;&#x5C11;&#x9675;</a> &#x8F6C;&#x8F7D;&#x8BF7;&#x8BF4;&#x660E;</em></p>
<h2 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h2><p>&#x2003;&#x2003;&#x5317;&#x4EAC;&#x51FA;&#x53D1;&#xFF0C;&#x897F;&#x5B81;&#x8F6C;&#x7AD9;&#xFF0C;&#x7EC8;&#x70B9;&#x62C9;&#x8428;&#x3002;&#x706B;&#x8F66;&#x4E0A;&#xFF0C;&#x4E00;&#x89C9;&#x9192;&#x6765;&#xFF0C;&#x56DB;&#x5468;&#x90FD;&#x662F;&#x65F7;&#x91CE;&#xFF0C;&#x8FDC;&#x79BB;&#x4E86;&#x57CE;&#x5E02;&#xFF0C;&#x6CA1;&#x6709;&#x4E86;&#x55A7;&#x56A3;&#xFF0C;&#x6709;&#x7684;&#x53EA;&#x662F;&#x90A3;&#x5076;&#x5C14;&#x51FA;&#x6CA1;&#x7684;&#x85CF;&#x7F9A;&#x7F8A;&#x3001;&#x85CF;&#x91CE;&#x9A74;&#xFF0C;&#x904D;&#x5730;&#x7684;&#x7266;&#x725B;&#xFF0C;&#x8FDC;&#x65B9;&#x7684;&#x96EA;&#x5C71;&#x4EE5;&#x53CA;&#x5C71;&#x4E0B;&#x7684;&#x5C0F;&#x6751;&#x5E84;&#xFF0C;&#x3002;<br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/0-bridge.JPG" alt=""><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/0-train.JPG" alt=""><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/0-jokul.JPG" alt=""></p>
<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>&#x2003;&#x2003;&#x62C9;&#x8428;&#x4F11;&#x6574;&#x4E00;&#x665A;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x73B0;&#x5728;&#x5E02;&#x533A;&#x901B;&#x4E86;&#x4E00;&#x5929;&#xFF1A;&#x5E03;&#x8FBE;&#x62C9;&#x5BAB;-&#x5927;&#x662D;&#x5BFA;-&#x516B;&#x5ED3;&#x8857;&#x3002;<br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/1-potala.JPG" alt=""><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/1-temple.JPG" alt=""><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/1-pilgrim.JPG" alt=""></p>
<h2 id="Day-2-4"><a href="#Day-2-4" class="headerlink" title="Day 2 - 4"></a>Day 2 - 4</h2><p>&#x2003;&#x2003;&#x63A5;&#x4E0B;&#x6765;&#x662F;&#x4E09;&#x5929;&#x7684;&#x6797;&#x829D;&#x201C;&#x5F81;&#x7A0B;&#x201D;&#xFF0C;&#x79F0;&#x4E4B;&#x4E3A;&#x5F81;&#x7A0B;&#xFF0C;&#x5E76;&#x4E0D;&#x4E3A;&#x8FC7;&#x2014;&#x2014;&#x9014;&#x4E2D;&#x6B63;&#x5728;&#x4FEE;&#x8DEF;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x6211;&#x4EEC;9&#x70B9;&#x79BB;&#x5F00;&#x62C9;&#x8428;&#xFF0C;&#x665A;&#x4E0A;10&#x70B9;&#x591A;&#x624D;&#x5230;&#x8FBE;&#x4F4F;&#x5BBF;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x8FD4;&#x7A0B;&#x7A0D;&#x597D;&#x4E00;&#x70B9;&#xFF1B;&#x52A0;&#x4E4B;&#x8FD0;&#x6C14;&#x4E0D;&#x597D;&#xFF0C;&#x5728;&#x96C5;&#x9C81;&#x85CF;&#x5E03;&#x6C5F;&#x5927;&#x5CE1;&#x8C37;&#x4E5F;&#x6CA1;&#x770B;&#x5230;&#x5357;&#x8FE6;&#x5DF4;&#x74E6;&#x5CF0;&#xFF0C;&#x53EA;&#x770B;&#x5230;&#x539A;&#x539A;&#x7684;&#x4E91;&#x5C42;&#x548C;&#x7A81;&#x6765;&#x7684;&#x5927;&#x96E8;&#x3002;&#x5F53;&#x7136;&#xFF0C;&#x8FD9;&#x6BB5;&#x65C5;&#x7A0B;&#x603B;&#x5F52;&#x8FD8;&#x662F;&#x6709;&#x60CA;&#x559C;&#x7684;&#x2014;&#x2014;&#x624E;&#x897F;&#x5C97;&#x6751;&#x3002;&#x5F53;&#x665A;&#x6211;&#x4EEC;&#x5C31;&#x4F4F;&#x5728;&#x4E86;&#x8FD9;&#x4E2A;&#x5C0F;&#x6751;&#x5B50;&#xFF08;&#x5165;&#x85CF;&#x540E;&#x7761;&#x5F97;&#x6700;&#x597D;&#x7684;&#x4E00;&#x5929;&#xFF09;&#xFF0C;&#x7B2C;&#x4E8C;&#x5929;&#x9192;&#x6765;&#xFF0C;&#x542C;&#x5230;&#x7A97;&#x5916;&#x6DC5;&#x6DC5;&#x6CA5;&#x6CA5;&#x4E0B;&#x8D77;&#x4E86;&#x5C0F;&#x96E8;&#xFF0C;&#x4E0D;&#x7981;&#x62C5;&#x5FC3;&#x8D77;&#x4E86;&#x5373;&#x5C06;&#x5F00;&#x59CB;&#x7684;&#x884C;&#x7A0B;&#x3002;&#x597D;&#x5728;&#x8D77;&#x5E8A;&#x540E;&#x96E8;&#x5C31;&#x505C;&#x4E86;&#xFF0C;&#x7136;&#x540E;&#x51FA;&#x95E8;&#x5728;&#x6751;&#x5468;&#x56F4;&#x901B;&#x4E86;&#x901B;&#xFF0C;&#x6CA1;&#x770B;&#x5230;&#x4F20;&#x8BF4;&#x4E2D;&#x7684;&#x82B1;&#x6D77;&#xFF08;&#x5DF2;&#x7ECF;&#x8C22;&#x4E86;&#xFF09;&#xFF0C;&#x4F46;&#x4EE3;&#x4E4B;&#x4EE5;&#x522B;&#x6837;&#x7684;&#x7F8E;&#x4E3D;&#x3002;<br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/2-car.JPG" alt=""><br><em>&#x7C73;&#x62C9;&#x5C71;&#x53E3;</em><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/2-col.JPG" alt=""><br><em>&#x9C81;&#x6717;&#xFF0C;&#x665A;&#x4E0A;&#x5927;&#x5BB6;&#x5403;&#x4E86;&#x4E00;&#x987F;&#x77F3;&#x9505;&#x9E21;&#xFF0C;&#x987F;&#x65F6;&#x80FD;&#x91CF;&#x56DE;&#x590D;</em><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/2-lulang.jpg" alt=""><br><em>&#x624E;&#x897F;&#x5C97;&#x6751;</em><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/2-zha-1.JPG" alt=""><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/2-zha-2.JPG" alt=""><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/2-zha-3.jpg" alt=""><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/2-cow.JPG" alt=""><br><em>&#x8FD9;&#x53EA;&#x6709;&#x610F;&#x601D;&#x7684;&#x5C0F;&#x725B;&#xFF0C;&#x6444;&#x5F71;&#x5E08;&#x5728;&#x54EA;&#xFF0C;&#x5B83;&#x5C31;&#x4F1A;&#x8F6C;&#x5411;&#x54EA;&#x91CC;&#xFF0C;&#x62CD;&#x7167;&#x65F6;&#xFF0C;&#x611F;&#x89C9;&#x5C31;&#x548C;&#x5047;&#x7684;&#x4E00;&#x6837;&#xFF0C;&#x4E00;&#x52A8;&#x4E5F;&#x4E0D;&#x52A8;&#x3002;&#x5C0F;&#x63D2;&#x66F2;&#xFF1A;&#x7A7F;&#x4E86;&#x7EA2;&#x8272;&#x5916;&#x5957;&#x7684;&#x6211;&#x5DEE;&#x70B9;&#x88AB;&#x9876;&#x5230;&#xFF0C;&#x54C8;&#x54C8;&#xFF01;</em><br><em>&#x5927;&#x5CE1;&#x8C37;-&#x96C5;&#x9C81;&#x85CF;&#x5E03;&#x6C5F;</em><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/2-gu.JPG" alt=""><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/2-jiang.JPG" alt=""><br><em>&#x671F;&#x5F85;&#x4E2D;&#x7684;&#x5357;&#x8FE6;&#x5DF4;&#x74E6;&#x5CF0;&#x2014;&#x2014;&#x4E2D;&#x56FD;&#x6700;&#x7F8E;&#x5C71;&#x5CF0;&#x2014;&#xFF08;<a href="http://www.360doc.com/content/11/0418/18/6017453_110573678.shtml" target="_blank" rel="external">&#x6765;&#x6E90;&#x7F51;&#x7EDC;&#x56FE;&#x7247;</a>&#xFF09;</em><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/2-nanjia-1.jpg" alt=""><br><em>&#x5B9E;&#x9645;&#x770B;&#x5230;&#x7684;&#x5357;&#x8FE6;&#x5DF4;&#x74E6;&#x5CF0;&#xFF0C;&#x65E0;&#x5948;&#x5929;&#x516C;&#x4E0D;&#x4F5C;&#x7F8E;</em><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/2-nanjia-2.jpg" alt=""></p>
<h2 id="Day-5"><a href="#Day-5" class="headerlink" title="Day 5"></a>Day 5</h2><p>&#x2003;&#x2003;&#x7ED3;&#x675F;&#x201C;&#x8F9B;&#x82E6;&#x201D;&#x7684;&#x4E09;&#x5929;&#x6797;&#x829D;&#x4E4B;&#x884C;&#xFF0C;&#x4E0B;&#x4E00;&#x7AD9;&#xFF1A;&#x7F8A;&#x6E56;-&#x5361;&#x82E5;&#x62C9;&#x51B0;&#x5DDD;&#x3002;&#x7F8E;&#x4E3D;&#x7684;&#x7F8A;&#x6E56;&#xFF0C;&#x7F8E;&#x5230;&#x65E0;&#x610F;&#x9644;&#x52A0;&#xFF01;<br><em>&#x5982;&#x68A6;&#x5982;&#x5E7B;</em><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/5-mei.JPG" alt=""><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/5-jin.JPG" alt=""><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/5-qi.jpg" alt=""><br><em>&#x5361;&#x82E5;&#x62C9;&#x51B0;&#x5DDD;&#xFF0C;&#x624B;&#x811A;&#x5E76;&#x7528;&#x722C;&#x5230;&#x4E86;&#x79BB;&#x5B83;&#x6700;&#x8FD1;&#x7684;&#x5730;&#x65B9;</em><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/5-glacier.jpg" alt=""></p>
<h2 id="Day-6-7"><a href="#Day-6-7" class="headerlink" title="Day 6 - 7"></a>Day 6 - 7</h2><p>&#x2003;&#x2003;&#x897F;&#x85CF;&#x4E4B;&#x884C;&#xFF0C;&#x6700;&#x540E;&#x4E00;&#x7AD9;&#x2014;&#x2014;&#x7EB3;&#x6728;&#x9519;&#xFF0C;&#x7F8E;&#x4E0D;&#x7F8E;&#xFF0C;&#x6709;&#x56FE;&#x4E3A;&#x8BC1;<br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/6-0.jpg" alt=""><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/6-1.jpg" alt=""><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/6-2.jpg" alt=""><br><em>&#x5C0F;&#x4F19;&#x4F34;&#x62CD;&#x7684;&#x94F6;&#x6CB3;&#xFF0C;&#x8FDC;&#x79BB;&#x57CE;&#x5E02;&#xFF0C;&#x91CD;&#x65B0;&#x770B;&#x5230;&#x5C0F;&#x65F6;&#x5019;&#x770B;&#x5230;&#x8FC7;&#x7684;&#x661F;&#x7A7A;&#x3002;&#xFF08;&#x8FD8;&#x770B;&#x5230;&#x597D;&#x51E0;&#x9897;&#x6D41;&#x661F;&#xFF0C;&#x9ED8;&#x9ED8;&#x8BB8;&#x4E0B;&#x613F;&#x671B;&#xFF0C;&#x54C8;&#x54C8;&#xFF01;&#xFF09;</em><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/6-galaxy.JPG" alt=""><br><em>&#x636E;&#x8BF4;&#x5230;&#x4E86;&#x7EB3;&#x6728;&#x9519;&#xFF0C;&#x4E00;&#x5B9A;&#x8981;&#x770B;&#x65E5;&#x51FA;&#x65E5;&#x843D;&#xFF0C;&#x65E5;&#x843D;&#x7684;&#x786E;&#x5F88;&#x7F8E;&#xFF0C;&#x4F46;&#x65E5;&#x51FA;&#x5F88;&#x666E;&#x901A;&#xFF0C;&#x53EF;&#x80FD;&#x662F;&#x524D;&#x51E0;&#x65E5;&#x5BA1;&#x7F8E;&#x75B2;&#x52B3;&#x4E86;&#x5427;</em><br><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/6-sunset.JPG" alt=""><br><em>&#x53BB;&#x7EB3;&#x6728;&#x9519;&#xFF0C;&#x634E;&#x5E26;&#x4E00;&#x4E2A;&#x59D0;&#x59D0;&#x4E00;&#x8D77;&#x53BB;&#x7684;&#xFF0C;&#x59D0;&#x59D0;&#x5E73;&#x644A;&#x7684;&#x8F66;&#x8D39;&#x88AB;&#x6211;&#x4EEC;&#x62FF;&#x6765;&#x5728;&#x6700;&#x540E;&#x4E00;&#x5929;&#x5403;&#x4E86;&#x987F;&#x81EA;&#x52A9;&#x706B;&#x9505;&#x9910;&#xFF0C;&#x7B97;&#x662F;&#x7F13;&#x89E3;&#x4E86;&#x4E0B;&#x5403;&#x4E86;7&#x5929;&#x5DDD;&#x83DC;&#x7684;&#x6028;&#x5FF5;&#x3002;</em></p>
<h1 id="&#x653B;&#x7565;&#x603B;&#x7ED3;"><a href="#&#x653B;&#x7565;&#x603B;&#x7ED3;" class="headerlink" title="&#x653B;&#x7565;&#x603B;&#x7ED3;"></a>&#x653B;&#x7565;&#x603B;&#x7ED3;</h1><p>&#x2003;&#x2003;&#x897F;&#x85CF;&#x7684;&#x65C5;&#x884C;&#x4EE5;&#x62C9;&#x8428;&#x4E3A;&#x4E2D;&#x5FC3;&#xFF0C;7/8&#x6708;&#x4EFD;&#x4E3A;&#x65FA;&#x5B63;&#x3002;&#x6211;&#x4EEC;&#x9996;&#x5148;&#x786E;&#x5B9A;&#x7684;&#x662F;&#x5728;&#x5165;&#x85CF;&#x548C;&#x79BB;&#x85CF;&#x65F6;&#x95F4;&#x3002;&#x7531;&#x4E8E;&#x706B;&#x8F66;&#x8F66;&#x7968;&#x4E0D;&#x597D;&#x8D2D;&#x4E70;&#x7B49;&#x539F;&#x56E0;&#xFF0C;&#x6700;&#x7EC8;&#x786E;&#x5B9A;&#x603B;&#x65F6;&#x957F;11&#x5929;&#xFF0C;&#x5F80;&#x8FD4;&#x8DEF;&#x4E0A;4&#x5929;&#xFF0C;&#x5728;&#x897F;&#x85CF;&#x6E38;&#x73A9;7&#x5929;&#x3002;&#x63A5;&#x4E0B;&#x6765;&#x5F00;&#x59CB;&#x5236;&#x5B9A;&#x5177;&#x4F53;&#x7684;&#x884C;&#x7A0B;&#x3002;</p>
<h2 id="&#x6700;&#x521D;&#x8BBE;&#x60F3;"><a href="#&#x6700;&#x521D;&#x8BBE;&#x60F3;" class="headerlink" title="&#x6700;&#x521D;&#x8BBE;&#x60F3;"></a>&#x6700;&#x521D;&#x8BBE;&#x60F3;</h2><p><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/final-old.png" alt=""><br>&#x4E3B;&#x8981;&#x53C2;&#x770B;<a href="http://www.mafegwo.cn/localdeals/mdd_topic_297/?cid=1010607" target="_blank" rel="external">&#x5C0F;&#x4F19;&#x4F34;&#x627E;&#x5230;&#x7684;&#x653B;&#x7565;&#x4ECB;&#x7ECD;</a><br>&#x4F46;&#x7531;&#x4E8E;&#x540E;&#x6765;&#x5305;&#x8F66;&#xFF0C;&#x4EE5;&#x53CA;&#x8DEF;&#x51B5;&#x539F;&#x56E0;&#xFF0C;&#x884C;&#x7A0B;&#x8FDB;&#x884C;&#x4E86;&#x8C03;&#x6574;&#x3002;</p>
<h2 id="&#x5B9E;&#x9645;&#x65B9;&#x6848;"><a href="#&#x5B9E;&#x9645;&#x65B9;&#x6848;" class="headerlink" title="&#x5B9E;&#x9645;&#x65B9;&#x6848;"></a>&#x5B9E;&#x9645;&#x65B9;&#x6848;</h2><p><img src="/2016/09/03/&#x897F;&#x85CF;&#x6E38;&#x8BB0;&#xFF08;&#x516D;&#x4EBA;&#x4E03;&#x5929;&#xFF09;/final-new.jpg" alt=""><br><strong>&#x5177;&#x4F53;&#x5B89;&#x6392;&#x5982;&#x4E0B;&#xFF1A;</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D1: &#x62C9;&#x8428;&#x4E00;&#x65E5;&#x6E38;</span><br><span class="line">D2: &#x62C9;&#x8428;--&#x7C73;&#x62C9;&#x5C71;&#x53E3;--&#x5C3C;&#x6D0B;&#x6CB3;--&#x9C81;&#x6717;&#x6797;&#x6D77;--&#x624E;&#x897F;&#x5C97;&#x6751;&#xFF08;&#x5BBF;&#xFF09; </span><br><span class="line">D3: &#x624E;&#x897F;&#x5C97;&#x6751;--&#x8272;&#x5B63;&#x62C9;&#x5C71;&#x53E3;&#x89C2;&#x5357;&#x8FE6;&#x5DF4;&#x74E6;&#x5CF0;--&#x6C5F;&#x6CB3;&#x4EA4;&#x6C47;&#x5904;--&#x96C5;&#x9C81;&#x85CF;&#x5E03;&#x6C5F;&#x5927;&#x5CE1;&#x8C37;--&#x6797;&#x829D;&#xFF08;&#x5BBF;&#xFF09;</span><br><span class="line">D4: &#x6797;&#x829D;-&#x5361;&#x5B9A;&#x6C9F;-&#x62C9;&#x8428;&#xFF08;&#x5BBF;&#xFF09;</span><br><span class="line">D5: &#x62C9;&#x8428;-&#x7F8A;&#x6E56;-&#x62C9;&#x8428;&#xFF08;&#x5BBF;&#xFF09;</span><br><span class="line">D6: &#x62C9;&#x8428;-&#x90A3;&#x6839;&#x62C9;&#x5C71;&#x53E3;-&#x7EB3;&#x6728;&#x9519;&#x65E5;&#x843D;&#xFF08;&#x5BBF;&#xFF09;</span><br><span class="line">D7: &#x7EB3;&#x6728;&#x9519;-&#x5FF5;&#x9752;&#x5510;&#x53E4;&#x62C9;&#x5C71;-&#x7F8A;&#x516B;&#x4E95;-&#x62C9;&#x8428;&#xFF08;&#x5BBF;&#xFF09;</span><br></pre></td></tr></table></figure></p>
<p>&#x6CE8;&#xFF1A;</p>
<ul>
<li>&#x53BB;&#x6797;&#x829D;&#x4F1A;&#x4E00;&#x8DEF;&#x6CBF;&#x7740;318&#x56FD;&#x9053;&#xFF08;&#x5927;&#x90E8;&#x5206;&#x6328;&#x7740;&#x5C3C;&#x6D0B;&#x6CB3;&#xFF09;&#x884C;&#x8FDB;</li>
<li>&#x6C5F;&#x6CB3;&#x4EA4;&#x6C47;&#x5904;&#x2014;&#x2014;&#x5C3C;&#x6D0B;&#x6CB3;&#x548C;&#x96C5;&#x9C81;&#x85CF;&#x5E03;&#x6C5F;&#x4EA4;&#x6C47;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x6C34;&#x4E00;&#x534A;&#x7EFF;&#xFF08;&#x5C3C;&#x6D0B;&#x6CB3;&#xFF09;&#x3001;&#x4E00;&#x534A;&#x9EC4;&#xFF08;&#x96C5;&#x6C5F;&#xFF09;</li>
</ul>
<h3 id="&#x884C;"><a href="#&#x884C;" class="headerlink" title="&#x884C;"></a>&#x884C;</h3><p>&#x2003;&#x2003;&#x53BB;&#x897F;&#x85CF;&#x65C5;&#x884C;&#x6700;&#x5927;&#x7684;&#x95EE;&#x9898;&#x5C31;&#x662F;&#x4EA4;&#x901A;&#x3002;&#x6240;&#x4EE5;&#xFF0C;&#x5148;&#x8BF4;&#x4E00;&#x4E0B;&#x4EA4;&#x901A;&#x95EE;&#x9898;&#x3002;<br>&#x2003;&#x2003;&#x62C9;&#x8428;&#x5E02;&#x533A;&#x4EA4;&#x901A;&#x4FBF;&#x5229;&#xFF0C;&#x6253;&#x8F66;&#x3001;&#x516C;&#x4EA4;&#x5747;&#x53EF;&#x3002;&#x5E02;&#x533A;&#x4EE5;&#x5916;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x5C31;&#x9700;&#x8981;&#x8003;&#x8651;&#xFF1A;&#x81EA;&#x9A7E;&#x3001;&#x5305;&#x8F66;&#x3001;&#x5BA2;&#x8FD0;&#x5927;&#x5DF4;&#x3001;&#x706B;&#x8F66;&#xFF08;&#x62C9;&#x8428;&#x5230;&#x65E5;&#x5580;&#x5219;&#xFF0C;&#x5176;&#x4ED6;&#x5730;&#x65B9;&#x57FA;&#x672C;&#x6CA1;&#x6709;&#xFF09;&#x3002;&#x6211;&#x4EEC;&#x4E00;&#x5171;&#x516D;&#x4E2A;&#x4EBA;&#xFF0C;&#x6240;&#x4EE5;&#x5305;&#x4E86;&#x4E00;&#x4E2A;7&#x5EA7;&#x8F66;&#x3002;&#x5728;&#x897F;&#x85CF;&#x89C1;&#x5230;&#x8F83;&#x591A;&#x7684;&#xFF0C;&#x9664;&#x4E86;&#x50CF;&#x6211;&#x4EEC;&#x4E00;&#x6837;&#x76F4;&#x63A5;&#x5305;&#x8F66;&#x7684;&#x540C;&#x5B66;&#xFF0C;&#x8FD8;&#x6709;&#x4E00;&#x4E9B;&#x5C31;&#x662F;&#x8DDF;&#x65C5;&#x884C;&#x56E2;&#x6216;&#x9A74;&#x53CB;&#x62FC;&#x8F66;&#x3002;&#x7531;&#x4E8E;&#x666F;&#x70B9;&#x4E4B;&#x95F4;&#x4E4B;&#x95F4;&#x90FD;&#x6BD4;&#x8F83;&#x8FDC;&#xFF0C;&#x800C;&#x4E14;&#x5F88;&#x591A;&#x201C;&#x666F;&#x70B9;&#x201D;&#x90FD;&#x662F;&#x50CF;&#x7C73;&#x62C9;&#x5C71;&#x53E3;&#x3001;&#x9C81;&#x6717;&#x6797;&#x6D77;&#x8FD9;&#x4E9B;&#x90FD;&#x662F;&#x8DEF;&#x8FC7;&#x770B;&#x4E00;&#x770B;&#x5C31;&#x8D70;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x5165;&#x85CF;&#xFF0C;&#x5148;&#x60F3;&#x597D;&#x4EA4;&#x901A;&#x95EE;&#x9898;&#x5982;&#x4F55;&#x89E3;&#x51B3;&#x3002;<br>&#x2003;&#x2003;&#x7531;&#x4E8E;&#x7F3A;&#x5C11;&#x5305;&#x8F66;&#x4FE1;&#x606F;&#xFF0C;&#x6211;&#x4EEC;&#x662F;&#x5728;&#x963F;&#x91CC;&#x65C5;&#x884C;&#x4E0A;&#x627E;&#x4E86;&#x4E2D;&#x4ECB;&#xFF0C;&#x8054;&#x7CFB;&#x5230;&#x7684;&#x5305;&#x8F66;&#x5E08;&#x5085;&#xFF08;&#x4EF7;&#x683C;6&#x5929;7000&#x5143;&#xFF09;&#x3002;&#x7531;&#x4E8E;&#x8F66;&#x8F86;&#x95EE;&#x9898;&#xFF0C;&#x6211;&#x4EEC;&#x4E2D;&#x95F4;&#x66F4;&#x6362;&#x4E86;&#x4E00;&#x4E2A;&#x5305;&#x8F66;&#x5E08;&#x5085;&#xFF0C;&#x4F46;&#x4E24;&#x4F4D;&#x85CF;&#x65CF;&#x5E08;&#x5085;&#x4EBA;&#x90FD;&#x5F88;&#x597D;&#xFF0C;&#x540E;&#x8FB9;&#x6211;&#x4F1A;&#x9644;&#x4E0A;&#x4ED6;&#x4EEC;&#x7684;&#x8054;&#x7CFB;&#x65B9;&#x5F0F;&#x3002;&#x4EE5;&#x540E;&#x53BB;&#x897F;&#x85CF;&#x7684;&#x670B;&#x53CB;&#x53EF;&#x4EE5;&#x8054;&#x7CFB;&#xFF0C;&#x4EF7;&#x683C;&#x80AF;&#x5B9A;&#x6BD4;&#x6211;&#x4EEC;&#x8FD9;&#x4E2A;&#x4FBF;&#x5B9C;&#xFF0C;&#x6BD5;&#x7ADF;&#x5C11;&#x4E86;&#x4E2D;&#x4ECB;&#x561B;&#x3002;<br>&#x2003;&#x2003;&#x9700;&#x8981;&#x5355;&#x72EC;&#x8BF4;&#x4E00;&#x4E0B;&#x7684;&#x662F;&#xFF0C;&#x6797;&#x62C9;&#x516C;&#x8DEF;&#xFF08;&#x6797;&#x829D;&#x5230;&#x62C9;&#x8428;&#xFF09;&#x4F30;&#x8BA1;&#x8FD8;&#x8981;&#x4FEE;&#x597D;&#x957F;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#xFF0C;&#x6240;&#x4EE5;&#x60F3;&#x53BB;&#x6797;&#x829D;&#x7684;&#x670B;&#x53CB;&#x53EF;&#x4EE5;&#x4E8B;&#x5148;&#x6253;&#x542C;&#x4E00;&#x4E0B;&#xFF0C;&#x516C;&#x8DEF;&#x7EF4;&#x4FEE;&#x72B6;&#x51B5;&#x3002;&#x5982;&#x679C;&#x50CF;&#x6211;&#x4EEC;&#x4E00;&#x6837;&#x5355;&#x7A0B;&#x9700;&#x8981;&#x5341;&#x51E0;&#x4E2A;&#x5C0F;&#x65F6;&#xFF0C;&#x6211;&#x5EFA;&#x8BAE;&#x8FD8;&#x662F;&#x653E;&#x5F03;&#x6797;&#x829D;&#xFF0C;&#x53BB;&#x4E9A;&#x4E1C;&#xFF08;&#x4F4F;&#x5BBF;&#x5730;&#x65B9;&#x7684;&#x8001;&#x677F;&#x63A8;&#x8350;&#xFF09;&#x5427;&#xFF0C;&#x90A3;&#x8FB9;&#x98CE;&#x666F;&#x4E5F;&#x4E0D;&#x9519;&#xFF0C;&#x4F55;&#x82E6;&#x5FCD;&#x53D7;&#x4E24;&#x5929;&#x98A0;&#x7C38;&#x5462;&#x3002;&#x5F53;&#x7136;&#x98DE;&#x673A;&#x51FA;&#x884C;&#x7684;&#x9664;&#x5916;&#xFF08;&#x6797;&#x829D;&#x6709;&#x673A;&#x573A;&#xFF09;&#x3002;</p>
<blockquote>
<p>&#x5305;&#x8F66;&#x5E08;&#x5085;1&#xFF1A;&#x624E;&#x897F;&#xFF08;139 8998 8015&#xFF09;&#xFF0C;&#x4EBA;&#x597D;&#xFF0C;&#x8F66;&#x6280;&#x597D;<br>&#x5305;&#x8F66;&#x5E08;&#x5085;2&#xFF1A;&#x5E73;&#x63AA;&#xFF08;180 0891 1060&#xFF09;&#xFF0C;&#x5F00;&#x8F66;&#x76F8;&#x8F83;&#x524D;&#x4E00;&#x4E2A;&#x5E08;&#x5085;&#x8F83;&#x6162;&#xFF0C;&#x4F46;&#x4EBA;&#x5F88;&#x597D;&#xFF0C;&#x4E00;&#x8DEF;&#x65F6;&#x4E0D;&#x65F6;&#x5531;&#x4E00;&#x5531;&#x85CF;&#x65CF;&#x6B4C;&#x66F2;</p>
</blockquote>
<h3 id="&#x4F4F;"><a href="#&#x4F4F;" class="headerlink" title="&#x4F4F;"></a>&#x4F4F;</h3><p>&#x2003;&#x2003;&#x9752;&#x65C5;&#x4E3A;&#x4E3B;&#xFF0C;&#x4EBA;&#x5747;&#x4EF7;&#x4F4D;50-60/&#x665A;</p>
<ul>
<li>&#x62C9;&#x8428;&#xFF1A;&#x6211;&#x4EEC;&#x5728;&#x62C9;&#x8428;&#x4E00;&#x5171;&#x4F4F;&#x4E86;&#x4E94;&#x5929;&#xFF0C;&#x4E00;&#x76F4;&#x90FD;&#x5728;&#x201C;&#x62C9;&#x8428;&#x85CF;&#x60A6;&#x751F;&#x6D3B;&#x9752;&#x5E74;&#x5BA2;&#x6808;&#x201D;&#xFF0C;&#x8001;&#x677F;&#x5FAE;&#x5FAE;&#x59D0;&#x4EBA;&#x5F88;&#x597D;&#xFF0C;&#x5BA2;&#x6808;&#x91CC;&#x8FD8;&#x6709;&#x4E00;&#x53EA;&#x201C;&#x5446;&#x5446;&#x201D;&#x72D7;&#xFF0C;&#x73AF;&#x5883;&#x4E5F;&#x8FD8;&#x4E0D;&#x9519;&#xFF0C;&#x9644;&#x8FD1;&#x6709;&#x4E2A;&#x5927;&#x8D85;&#x5E02;&#xFF0C;&#x6BD4;&#x8F83;&#x65B9;&#x4FBF;&#x3002;</li>
<li>&#x6797;&#x829D;&#xFF1A;&#x4F4F;&#x7684;&#x201C;&#x6797;&#x829D;&#x53BF;&#x8D30;&#x52A0;&#x8D30;&#x82B1;&#x56ED;&#x4E3B;&#x9898;&#x5BA2;&#x6808;&#x201D;&#xFF0C;&#x73AF;&#x5883;&#x4E0D;&#x9519;&#xFF0C;&#x8001;&#x677F;&#x4EBA;&#x4E5F;&#x4E0D;&#x9519;&#x3002;&#x5C0F;&#x4F19;&#x4F34;&#x6700;&#x540E;&#x90FD;&#x628A;&#x4EBA;&#x5BB6;&#x623F;&#x95E8;&#x94A5;&#x5319;&#x5E26;&#x56DE;&#x6765;&#x4E86;&#xFF0C;&#x54C8;&#x54C8;&#xFF01;</li>
<li>&#x624E;&#x897F;&#x5C97;&#x6751;&#xFF1A;&#x624E;&#x897F;&#x5E08;&#x5085;&#x627E;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x6751;&#x91CC;&#x90FD;&#x662F;&#x5C0F;&#x5BA2;&#x6808;&#xFF0C;&#x5C0F;&#x9662;&#x975E;&#x5E38;&#x597D;&#x770B;&#xFF0C;&#x5C31;&#x662F;&#x7167;&#x7247;&#x91CC;&#x840C;&#x725B;&#x90A3;&#x4E2A;&#x5730;&#x65B9;&#x3002;</li>
<li>&#x7EB3;&#x6728;&#x9519;&#xFF1A;&#x7EB3;&#x6728;&#x9519;&#x90A3;&#x8FB9;&#x57FA;&#x672C;&#x90FD;&#x662F;&#x6D3B;&#x52A8;&#x677F;&#x623F;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x4E5F;&#x5C31;&#x65E0;&#x6240;&#x8C13;&#x4E86;&#xFF0C;&#x624E;&#x897F;&#x5E08;&#x5085;&#x627E;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x51D1;&#x5408;&#x4E86;&#x4E00;&#x5BBF;&#x3002;</li>
</ul>
<h3 id="&#x98DF;"><a href="#&#x98DF;" class="headerlink" title="&#x98DF;"></a>&#x98DF;</h3><ul>
<li>&#x65E9;&#x9910;&#xFF1A;&#x62C9;&#x8428;&#x904D;&#x5730;&#x90FD;&#x662F;&#x751C;&#x8336;&#x9986;&#xFF0C;&#x6211;&#x4EEC;&#x7684;&#x65E9;&#x9910;&#x57FA;&#x672C;&#x90FD;&#x5728;&#x4F4F;&#x5BBF;&#x9644;&#x52A0;&#x7684;&#x751C;&#x8336;&#x9986;&#xFF1A;&#x9165;&#x6CB9;&#x8336;&#xFF08;&#x4E0D;&#x592A;&#x4E60;&#x60EF;&#xFF09;&#x3001;&#x751C;&#x8336;&#xFF08;&#x559D;&#x4E86;7&#x5929;&#xFF09;&#x3001;&#x85CF;&#x9762;&#xFF08;&#x8089;&#x597D;&#x5403;&#xFF09;&#x3001;&#x8089;&#x997C;&#x3001;&#x725B;&#x5976;&#x3002;</li>
<li>&#x5348;&#x9910;&#xFF1A;&#x5DDD;&#x83DC;&#xFF0C;&#x5348;&#x9910;&#x4E00;&#x822C;&#x90FD;&#x662F;&#x5728;&#x884C;&#x8F66;&#x9014;&#x4E2D;&#x89E3;&#x51B3;&#xFF0C;&#x5728;&#x897F;&#x85CF;&#xFF0C;&#x9014;&#x4E2D;&#x80FD;&#x5403;&#x996D;&#x7684;&#x5730;&#x65B9;&#x57FA;&#x672C;&#x90FD;&#x662F;&#x5DDD;&#x83DC;&#x9986;&#x3002;&#x6240;&#x4EE5;&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x53EA;&#x80FD;&#x53BB;&#x4E86;&#x3002;&#x7C73;&#x996D;&#x4E00;&#x822C;&#x4E0D;&#x719F;&#xFF0C;&#x51D1;&#x5408;&#x5403;&#xFF08;&#x7B2C;&#x4E00;&#x6B21;&#x6000;&#x5FF5;&#x8D77;&#x4E86;&#x5B66;&#x6821;&#x98DF;&#x5802;&#x7684;&#x7C73;&#x996D;&#xFF09;&#xFF0C;&#x83DC;&#x4EF7;&#x57FA;&#x672C;&#x770B;&#x51C9;&#x62CC;&#x9EC4;&#x74DC;&#x5C31;&#x53EF;&#x4EE5;&#x77E5;&#x9053;&#xFF0C;&#x4E0D;&#x592A;&#x4E00;&#x81F4;&#xFF08;&#x4EBA;&#x5747;30-50&#xFF09;&#x3002;</li>
<li>&#x665A;&#x9910;&#xFF1A;&#x9762;&#x98DF;&#x4E3A;&#x4E3B;&#xFF0C;&#x5F53;&#x7136;&#x4E5F;&#x53EF;&#x4EE5;&#x5DDD;&#x83DC;&#x3002;</li>
</ul>
<h3 id="&#x8863;"><a href="#&#x8863;" class="headerlink" title="&#x8863;"></a>&#x8863;</h3><ul>
<li>&#x7EB3;&#x6728;&#x9519;&#x4EE5;&#x5916;&#x7684;&#x5730;&#x65B9;&#xFF1A;&#x4E00;&#x4EF6;&#x5E26;&#x7ED2;&#x8584;&#x5916;&#x5957; + &#x77ED;&#x8896;</li>
<li>&#x7EB3;&#x6728;&#x9519;&#xFF1A;&#x7FBD;&#x7ED2;&#x670D;&#xFF0C;&#x592A;&#x9633;&#x4E0B;&#x5C71;&#x540E;&#x771F;&#x7684;&#x5F88;&#x51B7;</li>
</ul>
<h3 id="&#x5176;&#x4ED6;&#x6CE8;&#x610F;&#x4E8B;&#x9879;"><a href="#&#x5176;&#x4ED6;&#x6CE8;&#x610F;&#x4E8B;&#x9879;" class="headerlink" title="&#x5176;&#x4ED6;&#x6CE8;&#x610F;&#x4E8B;&#x9879;"></a>&#x5176;&#x4ED6;&#x6CE8;&#x610F;&#x4E8B;&#x9879;</h3><ul>
<li>&#x9AD8;&#x53CD;&#xFF1A;&#x6211;&#x4EEC;&#x4E00;&#x884C;&#x4EBA;&#xFF0C;&#x9664;&#x4E86;&#x5728;&#x706B;&#x8F66;&#x7ECF;&#x8FC7;&#x90A3;&#x66F2;&#x90A3;&#x8FB9;&#x9AD8;&#x6D77;&#x62D4;&#xFF08;4000-5000&#xFF09;&#x5730;&#x65B9;&#x65F6;&#xFF0C;&#x6709;&#x8F7B;&#x5FAE;&#x7684;&#x5934;&#x75DB;&#x3001;&#x6076;&#x5FC3;&#x5916;&#xFF0C;&#x5728;&#x5176;&#x4ED6;&#x5730;&#x65B9;&#x90FD;&#x6CA1;&#x4E8B;&#xFF0C;&#x5305;&#x62EC;&#x7EB3;&#x6728;&#x9519;&#x3002;&#x521A;&#x5230;&#x62C9;&#x8428;&#xFF0C;&#x53EF;&#x80FD;&#x4E0A;&#x4E2A;&#x697C;&#x68AF;&#x90FD;&#x5927;&#x5598;&#xFF0C;&#x4F46;&#x4F11;&#x606F;&#x4E00;&#x665A;&#x540E;&#x9762;&#x5C31;&#x597D;&#x5F88;&#x591A;&#x3002;&#x6211;&#x4EEC;&#x6CA1;&#x6709;&#x5403;&#x836F;&#x3001;&#x5438;&#x6C27;&#xFF0C;&#x6BD5;&#x7ADF;&#x6211;&#x4EEC;&#x6CA1;&#x6709;&#x53BB;&#x73E0;&#x5CF0;&#x4E4B;&#x7C7B;&#x7684;&#x6D77;&#x62D4;&#x8F83;&#x9AD8;&#x7684;&#x5730;&#x65B9;&#x3002;&#x706B;&#x8F66;&#x4E0A;&#x5012;&#x662F;&#x6709;&#x89C1;&#x5438;&#x6C27;&#x7684;&#x4E58;&#x5BA2;&#xFF0C;&#x4F46;&#x5F88;&#x5C11;&#x3002;&#x603B;&#x4E4B;&#xFF0C;&#x653E;&#x5E73;&#x5FC3;&#x6001;&#x6700;&#x91CD;&#x8981;&#xFF0C;&#x591A;&#x559D;&#x6C34;&#xFF0C;&#x8D70;&#x8DEF;&#x6162;&#x4E00;&#x70B9;&#xFF0C;&#x4E0D;&#x7528;&#x592A;&#x62C5;&#x5FC3;&#x3002;</li>
<li>&#x9632;&#x6652;&#x4FDD;&#x6E7F;&#xFF1A;&#x91CD;&#x8981;&#xFF0C;&#x6211;&#x4EEC;&#x5E26;&#x4E86;&#x5E3D;&#x5B50;&#x3001;&#x9632;&#x6652;&#x971C;&#xFF08;&#x867D;&#x7136;&#x662F;&#x7537;&#x751F;&#xFF0C;&#x4F46;&#x4E5F;&#x7528;&#x4E86;&#xFF09;&#x3001;&#x58A8;&#x955C;&#x3001;&#x5507;&#x818F;&#xFF08;&#x6709;&#x4E9B;&#x5E72;&#xFF09;&#x3002;&#x3002;&#x3002;</li>
</ul>
<h2 id="&#x7ED3;&#x8BED;"><a href="#&#x7ED3;&#x8BED;" class="headerlink" title="&#x7ED3;&#x8BED;"></a>&#x7ED3;&#x8BED;</h2><p>&#x2003;&#x2003;&#x603B;&#x7684;&#x6765;&#x770B;&#xFF0C;&#x53BB;&#x897F;&#x85CF;&#x8FD8;&#x662F;&#x6BD4;&#x8F83;&#x201C;&#x9EBB;&#x70E6;&#x201D;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x5F00;&#x59CB;&#x65F6;&#x6211;&#x4E5F;&#x840C;&#x751F;&#x9000;&#x610F;&#xFF0C;&#x4F46;&#x611F;&#x8C22;&#x540C;&#x884C;&#x5C0F;&#x4F19;&#x4F34;&#x7684;&#x201C;&#x903C;&#x8FEB;&#x201D;&#xFF0C;&#x897F;&#x85CF;&#x5F88;&#x7F8E;&#xFF0C;&#x4E0D;&#x865A;&#x6B64;&#x884C;&#xFF0C;&#x4E5F;&#x7B97;&#x662F;&#x5706;&#x4E86;&#x4E00;&#x4E2A;&#x68A6;&#x3002;&#x4EE5;&#x540E;&#x6709;&#x673A;&#x4F1A;&#x6211;&#x8FD8;&#x662F;&#x60F3;&#x53BB;&#x897F;&#x85CF;&#x8D70;&#x4E00;&#x8D70;&#xFF0C;&#x53BB;&#x770B;&#x770B;&#x73E0;&#x5CF0;&#x3001;&#x4E9A;&#x4E1C;&#x3001;&#x963F;&#x91CC;&#xFF0C;&#x770B;&#x770B;&#x897F;&#x85CF;&#x7684;&#x5176;&#x4ED6;&#x5730;&#x65B9;&#x3002;&#x6B63;&#x6240;&#x8C13;&#x201C;&#x8D70;&#x8D70;&#x505C;&#x505C;&#xFF0C;&#x653E;&#x7A7A;&#x81EA;&#x5DF1;&#xFF0C;&#x4F53;&#x5473;&#x771F;&#x6B63;&#x7684;&#x7EAF;&#x51C0;&#x201D;&#x3002;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[并发编程(1)-单例模式和volatile]]></title>
      <url>http://zongwenlong.github.io/2016/06/01/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B(1)-%E4%BB%8E%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E8%AF%B4%E8%B5%B7/</url>
      <content type="html"><![CDATA[<p>&#x2003;&#x2003;&#x4E4B;&#x524D;&#x5728;&#x627E;&#x5B9E;&#x4E60;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x88AB;N&#x6B21;&#x95EE;&#x8FC7;&#xFF0C;&#x4F60;&#x7528;&#x8FC7;&#x4EC0;&#x4E48;&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#x4E48;&#xFF0C;&#x6216;&#x8005;&#x4F60;&#x77E5;&#x9053;&#x6709;&#x4EC0;&#x4E48;&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#x4E48;&#xFF1F;&#x6BCF;&#x6B21;&#x6211;&#x90FD;&#x53EA;&#x4F1A;&#x7F9E;&#x6127;&#x7684;&#x8BF4;&#xFF0C;&#x5355;&#x4F8B;&#x6A21;&#x5F0F;&#xFF0C;&#x9762;&#x8BD5;&#x5B98;&#x5C31;&#x4F1A;&#x8BF4;&#xFF0C;&#x90A3;&#x5C31;&#x5199;&#x4E00;&#x4E0B;&#x5427;&#x3002;&#x7136;&#x540E;&#x6211;&#x5C31;&#x628A;&#x76F4;&#x63A5;&#x80CC;&#x8BF5;&#x8FC7;&#x5F97;&#x6A21;&#x677F;&#x7684;&#x5199;&#x4E86;&#x51FA;&#x6765;&#x3002;&#x5F53;&#x65F6;&#x7F9E;&#x6127;&#x7684;&#x539F;&#x56E0;&#x662F;&#x6211;&#x53EA;&#x4F1A;&#x4E00;&#x79CD;&#x8BBE;&#x8BA1;&#x6A21;&#x2014;&#x2014;&#x5355;&#x4F8B;&#x6A21;&#x5F0F;&#x3002;&#x5173;&#x4E8E;&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#x8FD9;&#x4E2A;&#x5751;&#x4F1A;&#x5728;&#x4E4B;&#x540E;&#x8FDB;&#x884C;&#x586B;&#x8865;&#xFF0C;&#x73B0;&#x5728;&#x7684;&#x6211;&#x624D;&#x610F;&#x8BC6;&#x5230;&#x8FD8;&#x6709;&#x4E2A;&#x5730;&#x65B9;&#x66F4;&#x5E94;&#x8BE5;&#x611F;&#x5230;&#x7F9E;&#x6127;&#x2014;&#x2014;&#x552F;&#x4E00;&#x770B;&#x8FC7;&#x7684;&#x5355;&#x4F8B;&#x6A21;&#x5F0F;&#x8FD8;&#x5199;&#x7684;&#x6709;&#x95EE;&#x9898;&#x3002;</p>
<h1 id="&#x75DB;&#x82E6;&#x7684;&#x56DE;&#x987E;"><a href="#&#x75DB;&#x82E6;&#x7684;&#x56DE;&#x987E;" class="headerlink" title="&#x75DB;&#x82E6;&#x7684;&#x56DE;&#x987E;"></a>&#x75DB;&#x82E6;&#x7684;&#x56DE;&#x987E;</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>{}</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class){</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>){</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>&#x2003;&#x2003;&#x8FD9;&#x662F;&#x6211;&#x4E4B;&#x524D;&#x9762;&#x8BD5;&#x65F6;&#x5199;&#x8FC7;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x8BB0;&#x5F97;&#x5F53;&#x65F6;&#x8FD8;&#x6709;&#x9762;&#x8BD5;&#x5B98;&#x95EE;&#x8FC7;&#x6211;&#x8FD9;&#x6837;&#x5199;&#x6709;&#x4EC0;&#x4E48;&#x95EE;&#x9898;&#x4E48;&#xFF0C;&#x751A;&#x81F3;&#x4ED6;&#x8FD8;&#x5728;&#x63D0;&#x793A;&#x6211;&#xFF0C;&#x591A;&#x7EBF;&#x7A0B;&#x4E0B;&#x4F1A;&#x6709;&#x4EC0;&#x4E48;&#x95EE;&#x9898;&#x4E48;&#xFF1F;&#x6211;&#x4FE1;&#x8A93;&#x65E6;&#x65E6;&#x7684;&#x89C9;&#x5F97;&#x53CD;&#x6B63;&#x52A0;&#x4E86;synchronized&#x4E86;&#xFF0C;&#x5C31;&#x6CA1;&#x6709;&#x95EE;&#x9898;&#x4E86;&#x3002;&#x4E8B;&#x5B9E;&#x8BC1;&#x660E;&#xFF0C;&#x6211;&#x662F;too young, too simple&#xFF01;</p>
<h1 id="&#x95EE;&#x9898;&#x7684;&#x89E3;&#x51B3;"><a href="#&#x95EE;&#x9898;&#x7684;&#x89E3;&#x51B3;" class="headerlink" title="&#x95EE;&#x9898;&#x7684;&#x89E3;&#x51B3;"></a>&#x95EE;&#x9898;&#x7684;&#x89E3;&#x51B3;</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>{}</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class){</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>){</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>&#x2003;&#x2003;&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x4E2D;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x5728;&#x4E3A;&#x6210;&#x5458;&#x53D8;&#x91CF;singleton&#x6DFB;&#x52A0;volatile&#x5173;&#x952E;&#x5B57;&#x8FDB;&#x884C;&#x4FEE;&#x9970;&#xFF0C;&#x539F;&#x672C;&#x7684;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x95EE;&#x9898;&#x5C31;&#x4F1A;&#x88AB;&#x89E3;&#x51B3;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x5462;&#xFF1F;</p>
<h2 id="&#x95EE;&#x9898;&#x7684;&#x7531;&#x6765;"><a href="#&#x95EE;&#x9898;&#x7684;&#x7531;&#x6765;" class="headerlink" title="&#x95EE;&#x9898;&#x7684;&#x7531;&#x6765;"></a>&#x95EE;&#x9898;&#x7684;&#x7531;&#x6765;</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>{}</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>){           <span class="comment">//Point1: &#x7EBF;&#x7A0B;A</span></span><br><span class="line">            instance = <span class="keyword">new</span> Singleton(); <span class="comment">//Point2: &#x7EBF;&#x7A0B;B</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>&#x2003;&#x2003;&#x5BF9;&#x4E8E;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#xFF0C;&#x5927;&#x5BB6;&#x5F88;&#x5BB9;&#x6613;&#x5C31;&#x80FD;&#x660E;&#x767D;&#xFF0C;&#x591A;&#x7EBF;&#x7A0B;&#x73AF;&#x5883;&#x4E0B;&#xFF0C;&#x8FD9;&#x4E2A;&#x5355;&#x4F8B;&#x662F;&#x5B58;&#x5728;&#x95EE;&#x9898;&#x7684;&#x3002;&#x6BD4;&#x5982;&#xFF1A;&#x5047;&#x8BBE;&#x7EBF;&#x7A0B;A&#x6267;&#x884C;&#x5230;Point1&#xFF0C;&#x7EBF;&#x7A0B;B&#x6267;&#x884C;&#x5230;Point2&#xFF0C;&#x90A3;&#x4E48;&#x7EBF;&#x7A0B;A&#x53EF;&#x80FD;&#x770B;&#x5230;&#x8FD8;&#x672A;&#x88AB;&#x7EBF;&#x7A0B;B&#x521D;&#x59CB;&#x5316;&#x5B8C;&#x6BD5;&#x7684;singleton&#x3002;&#x6240;&#x4EE5;&#x5C31;&#x4F1A;&#x51FA;&#x73B0;&#x95EE;&#x9898;&#x3002;<br>&#x5BF9;&#x4E8E;instance = new Singleton();&#x8FD9;&#x4E00;&#x6761;&#x8BED;&#x53E5;&#x53EF;&#x4EE5;&#x5927;&#x81F4;&#x5206;&#x89E3;&#x4E3A;&#x4E09;&#x6B65;:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">memory = allocate();   <span class="comment">//1&#xFF1A;&#x5206;&#x914D;&#x5BF9;&#x8C61;&#x7684;&#x5185;&#x5B58;&#x7A7A;&#x95F4;</span></span><br><span class="line">initObject(memory);    <span class="comment">//2&#xFF1A;&#x521D;&#x59CB;&#x5316;&#x5BF9;&#x8C61;</span></span><br><span class="line">instance = memory;     <span class="comment">//3&#xFF1A;&#x8BBE;&#x7F6E;instance&#x6307;&#x5411;&#x521A;&#x5206;&#x914D;&#x7684;&#x5185;&#x5B58;&#x5730;&#x5740;</span></span><br></pre></td></tr></table></figure></p>
<p>&#x2003;&#x2003;&#x7EBF;&#x7A0B;B&#x53EF;&#x80FD;&#x6B63;&#x5728;&#x521D;&#x59CB;&#x5316;instance&#xFF0C;&#x7EBF;&#x7A0B;A&#x5C31;&#x5F97;&#x5230;&#x4E86;&#x7A7A;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x4E5F;&#x5F00;&#x59CB;&#x4E86;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x8FD9;&#x5F53;&#x7136;&#x662F;&#x8FDD;&#x80CC;&#x5355;&#x4F8B;&#x7684;&#x601D;&#x60F3;&#x7684;&#x3002;&#x90A3;&#x662F;&#x4E0D;&#x662F;&#x50CF;&#x6211;&#x5728;&#x5F00;&#x59CB;&#x90E8;&#x5206;&#x7684;&#x4EE3;&#x7801;&#x4E2D;&#x52A0;&#x5165;synchronized&#x540C;&#x6B65;&#x5757;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x5462;&#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x5728;&#x540C;&#x4E00;&#x65F6;&#x95F4;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x8BBF;&#x95EE;&#x3002;<br>&#x2003;&#x2003;&#x5176;&#x5B9E;&#xFF0C;&#x8FD9;&#x4E09;&#x6761;&#x8BED;&#x53E5;&#x7684;&#x987A;&#x5E8F;&#xFF0C;&#x5E76;&#x4E0D;&#x4E00;&#x5B9A;&#x662F;1,2,3&#x987A;&#x5E8F;&#x6267;&#x884C;&#xFF0C;&#x7531;&#x4E8E;&#x7F16;&#x8BD1;&#x5668;&#x7684;&#x539F;&#x56E0;&#xFF0C;&#x987A;&#x5E8F;&#x53EF;&#x80FD;&#x53D8;&#x4E3A;1,3,2&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x6240;&#x8C13;&#x7684;&#x6307;&#x4EE4;&#x91CD;&#x6392;&#x3002;&#x5982;&#x679C;&#x662F;&#x8FD9;&#x6837;&#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x95EE;&#x9898;&#x5C31;&#x4E25;&#x91CD;&#x4E86;&#x3002;&#x7EBF;&#x7A0B;B&#x8FD8;&#x6CA1;&#x6709;&#x521D;&#x59CB;&#x5316;instance&#xFF0C;&#x7EBF;&#x7A0B;A&#x5C31;&#x53EF;&#x4EE5;&#x518D;&#x4E0D;&#x8FDB;&#x5165;&#x540C;&#x6B65;&#x5757;&#x7684;&#x524D;&#x63D0;&#x4E0B;&#x5F97;&#x5230;&#x4E86;&#x4E00;&#x4E2A;&#x975E;&#x7A7A;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x7136;&#x540E;&#x5C31;&#x53BB;&#x4F7F;&#x7528;&#x4E86;&#xFF0C;&#x8FD9;&#x663E;&#x7136;&#x662F;&#x6709;&#x95EE;&#x9898;&#x7684;&#x3002;</p>
<h2 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h2><p>&#x4E3A;&#x4EC0;&#x4E48;&#x52A0;&#x4E0A;volatile&#x540E;&#x95EE;&#x9898;&#x5C31;&#x4E0D;&#x5B58;&#x5728;&#x4E86;&#x5462;&#xFF1F;<br>volatile&#x5728;Java&#x4E2D;&#x7684;&#x4FDD;&#x8BC1;&#x5982;&#x4E0B;&#xFF1A;</p>
<ul>
<li>&#x4FDD;&#x8BC1;&#x4E86;&#x4E0D;&#x540C;&#x7EBF;&#x7A0B;&#x5BF9;&#x8FD9;&#x4E2A;&#x53D8;&#x91CF;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#x65F6;&#x7684;&#x53EF;&#x89C1;&#x6027;&#xFF0C;&#x5373;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x4FEE;&#x6539;&#x4E86;&#x67D0;&#x4E2A;&#x53D8;&#x91CF;&#x7684;&#x503C;&#xFF0C;&#x8FD9;&#x65B0;&#x503C;&#x5BF9;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x6765;&#x8BF4;&#x662F;&#x7ACB;&#x5373;&#x53EF;&#x89C1;&#x7684;&#x3002;&#x5BF9;volatile&#x6210;&#x5458;&#x53D8;&#x91CF;&#x7684;&#x8BFB;&#x548C;&#x5199;&#x90FD;&#x662F;&#x539F;&#x5B50;&#x7684;&#x3002;&#x4E0D;&#x4F1A;&#x8BFB;&#x5230;&#x6CA1;&#x6709;&#x5199;&#x5165;&#x7684;&#x503C;&#xFF1A;&#x53EA;&#x6709;&#x8BFB;&#x548C;&#x5199;&#x4E24;&#x4E2A;&#x64CD;&#x4F5C;&#x662F;&#x539F;&#x5B50;&#x7684;&#xFF0C;&#x50CF;x++&#x3001;x+=2&#x8FD9;&#x79CD;&#x8868;&#x8FBE;&#x5F0F;&#x8FD8;&#x662F;&#x76F8;&#x5F53;&#x4E8E;&#x5148;&#x8BFB;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5199;&#xFF0C;&#x4E24;&#x6B21;&#x8FDB;&#x884C;&#xFF0C;&#x53EF;&#x4EE5;&#x8BFB;&#x5230;&#x4E2D;&#x95F4;&#x7684;&#x503C;&#x3002;&#x5373;&#x4F7F;&#x662F;x=2&#x8FD9;&#x6837;&#x7684;&#x8D4B;&#x503C;&#x64CD;&#x4F5C;&#xFF0C;JVM&#x5E76;&#x4E0D;&#x80FD;&#x4FDD;&#x8BC1;long,double&#x8FD9;&#x79CD;64&#x4F4D;&#x6570;&#x636E;&#x7C7B;&#x578B;&#xFF08;&#x5F15;&#x7528;&#x7C7B;&#x578B;&#x9664;&#x5916;&#xFF0C;&#x5B83;&#x7684;&#x8BFB;&#x5199;&#x59CB;&#x7EC8;&#x90FD;&#x662F;&#x539F;&#x5B50;&#x7684;&#xFF09;&#x8BFB;&#x5199;&#x7684;&#x539F;&#x5B50;&#x6027;&#xFF0C;&#x9700;&#x8981;&#x7A0B;&#x5E8F;&#x81EA;&#x5DF1;&#x63A7;&#x5236;&#x3002;&#x53E6;&#x5916;&#x8FC7;synchronized&#x548C;Lock&#x4E5F;&#x80FD;&#x591F;&#x4FDD;&#x8BC1;&#x53EF;&#x89C1;&#x6027;&#xFF0C;synchronized&#x548C;Lock&#x80FD;&#x4FDD;&#x8BC1;&#x540C;&#x4E00;&#x65F6;&#x523B;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x83B7;&#x53D6;&#x9501;&#x7136;&#x540E;&#x6267;&#x884C;&#x540C;&#x6B65;&#x4EE3;&#x7801;&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x91CA;&#x653E;&#x9501;&#x4E4B;&#x524D;&#x4F1A;&#x5C06;&#x5BF9;&#x53D8;&#x91CF;&#x7684;&#x4FEE;&#x6539;&#x5237;&#x65B0;&#x5230;&#x4E3B;&#x5B58;&#x5F53;&#x4E2D;&#x3002;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;&#x53EF;&#x89C1;&#x6027;&#x3002;<blockquote>
<p>Some implementations may find it convenient to divide a single write action on a 64-bit long or double value into two write actions on adjacent 32 bit values. For efficiency&#x2019;s sake, this behavior is implementation specific; Java virtual machines are free to perform writes to long and double values atomically or in two parts.<br>For the purposes of the Java programming language memory model, a single write to a non-volatile long or double value is treated as two separate writes: one to each 32-bit half. This can result in a situation where a thread sees the first 32 bits of a 64 bit value from one write, and the second 32 bits from another write. Writes and reads of volatile long and double values are always atomic. Writes to and reads of references are always atomic, regardless of whether they are implemented as 32 or 64 bit values.<br>VM implementers are encouraged to avoid splitting their 64-bit values where possible. Programmers are encouraged to declare shared 64-bit values as volatile or synchronize their programs correctly to avoid possible complications.<br>&#x2014;&#x2014; from JLS section 17.7: Non-atomic Treatment of double and long</p>
</blockquote>
</li>
</ul>
<ul>
<li>&#x7981;&#x6B62;&#x6307;&#x4EE4;&#x91CD;&#x6392;&#x5E8F;&#xFF0C;&#x5BF9;&#x6240;&#x6709;&#x7684;volatile&#x7684;&#x53D8;&#x91CF;&#x7684;&#x6240;&#x6709;&#x6B21;&#x8BFB;&#x5199;&#x64CD;&#x4F5C;&#xFF0C;&#x7EC4;&#x6210;&#x4E00;&#x4E2A;&#x5168;&#x5C40;&#x7684;&#x5168;&#x5E8F;&#x5173;&#x7CFB;&#x3002;&#x5168;&#x5E8F;&#x5173;&#x7CFB;&#x7684;&#x610F;&#x601D;&#x662F;&#xFF1A;&#x4EFB;&#x4F55;&#x4E24;&#x4E2A;&#x64CD;&#x4F5C;&#x4E4B;&#x95F4;&#x90FD;&#x53EF;&#x4EE5;&#x6BD4;&#x8F83;&#x5148;&#x540E;&#x5173;&#x7CFB;&#x3002;&#x8FD9;&#x4E2A;&#x5168;&#x5E8F;&#x5173;&#x7CFB;&#x53EB;&#x201C;&#x540C;&#x6B65;&#x987A;&#x5E8F;&#x201D;(synchronization order)&#x3002;&#x8FD9;&#x4E2A;&#x540C;&#x6B65;&#x987A;&#x5E8F;&#x548C;&#x201C;&#x7A0B;&#x5E8F;&#x987A;&#x5E8F;&#x201D;(program order&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x5355;&#x4E2A;&#x7EBF;&#x7A0B;&#x91CC;&#x5404;&#x4E2A;&#x64CD;&#x4F5C;&#x7684;&#x987A;&#x5E8F;)&#x662F;&#x4E00;&#x81F4;&#x7684;&#x3002;&#x6839;&#x636E;&#x8FD9;&#x4E2A;&#x987A;&#x5E8F;&#xFF0C;&#x6BCF;&#x6B21;&#x8BFB;&#x64CD;&#x4F5C;&#xFF0C;&#x770B;&#x5230;&#x7684;&#x4E00;&#x5B9A;&#x662F;&#x5B83;&#x4E4B;&#x524D;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x5BF9;&#x540C;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x5199;&#x7684;&#x503C;&#xFF0C;&#x5982;&#x679C;&#x5B83;&#x4E4B;&#x524D;&#x6CA1;&#x6709;&#x5BF9;&#x8FD9;&#x4E2A;&#x53D8;&#x91CF;&#x7684;&#x5199;&#x64CD;&#x4F5C;&#xFF0C;&#x5C31;&#x8BFB;&#x5230;&#x521D;&#x59CB;&#x503C;&#xFF08;0&#x3001;null&#x3001;false&#xFF09;&#x3002;&#x8FD9;&#x53EF;&#x4EE5;&#x907F;&#x514D;&#x6307;&#x4EE4;&#x91CD;&#x6392;&#x95EE;&#x9898;&#x3002;</li>
</ul>
<p>&#x603B;&#x4E4B;&#xFF0C;&#x5F53;&#x6211;&#x4EEC;&#x52A0;&#x4E0A;volatile&#x540E;&#xFF0C;&#x53EF;&#x4EE5;&#x7981;&#x6B62;&#x8BED;&#x53E5;2,3&#x7684;&#x91CD;&#x6392;&#x5E8F;&#xFF0C;&#x4E5F;&#x5C31;&#x53EF;&#x4EE5;&#x907F;&#x514D;&#x591A;&#x7EBF;&#x7A0B;&#x4E0D;&#x5B89;&#x5168;&#x95EE;&#x9898;&#x3002;<br>&#x65E2;&#x7136;&#x8C08;&#x5230;&#x4E86;volatile&#xFF0C;&#x5B83;&#x9664;&#x4E86;&#x53CC;&#x91CD;&#x68C0;&#x67E5;&#x9501;&#x5B9A;&#x5916;&#x8FD8;&#x6709;&#x4E00;&#x4E9B;&#x5176;&#x4ED6;&#x7528;&#x9014;,&#x5982;&#xFF1A;&#x72B6;&#x6001;&#x6807;&#x8BB0;&#x91CF;<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(!flag){</span><br><span class="line">    doSomething();</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">()</span> </span>{</span><br><span class="line">    flag = <span class="keyword">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<p>&#x5176;&#x4ED6;&#x7684;&#x5E94;&#x7528;&#x53EF;&#x4EE5;&#x9605;&#x8BFB;&#xFF1A;<a href="http://www.ibm.com/developerworks/cn/java/j-jtp06197.html" target="_blank" rel="external">Java &#x7406;&#x8BBA;&#x4E0E;&#x5B9E;&#x8DF5;: &#x6B63;&#x786E;&#x4F7F;&#x7528; Volatile &#x53D8;&#x91CF;</a></p>
<h1 id="Other-Way"><a href="#Other-Way" class="headerlink" title="Other Way?"></a>Other Way?</h1><p>&#x2003;&#x2003;&#x5F53;&#x4FEE;&#x590D;&#x4E86;&#x591A;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x95EE;&#x9898;&#x540E;&#xFF0C;&#x662F;&#x4E0D;&#x662F;&#x8BF4;&#x4E0A;&#x8FF0;&#x65B9;&#x5F0F;&#x5C31;&#x662F;&#x5355;&#x4F8B;&#x6A21;&#x5F0F;&#x7684;&#x6700;&#x4F73;&#x5B9E;&#x73B0;&#x5462;&#xFF1F;&#x5176;&#x5B9E;&#x4E0D;&#x662F;&#x7684;&#xFF0C;&#x8FD8;&#x6709;&#x5176;&#x4ED6;&#x7684;&#x5355;&#x4F8B;&#x6A21;&#x5F0F;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF1A;<br>(PS: &#x524D;&#x9762;&#x63D0;&#x5230;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x88AB;&#x6210;&#x4E3A;Lazy initialization)</p>
<h2 id="Eager-initialization"><a href="#Eager-initialization" class="headerlink" title="Eager initialization"></a>Eager initialization</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{}</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>&#x5728;&#x7C7B;&#x8FDB;&#x884C;&#x521D;&#x59CB;&#x5316;&#x65F6;&#xFF0C;static&#x53D8;&#x91CF;&#x4E5F;&#x4F1A;&#x88AB;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x5E76;&#x4E14;JVM&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#xFF0C;&#x5373;static&#x90E8;&#x5206;&#x53EA;&#x4F1A;&#x88AB;&#x521D;&#x59CB;&#x5316;&#x4E00;&#x6B21;&#xFF0C;&#x5E76;&#x4E14;&#x53EA;&#x6709;&#x88AB;&#x521D;&#x59CB;&#x5316;&#x540E;&#x624D;&#x80FD;&#x88AB;&#x672C;&#x7EBF;&#x7A0B;&#x6216;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x4F7F;&#x7528;&#x3002;&#xFF08;final&#x57DF;&#x7684;&#x5BF9;&#x8C61;&#x5177;&#x5907;&#x521D;&#x59CB;&#x5316;&#x5B89;&#x5168;&#x6027;&#xFF0C;&#x521D;&#x59CB;&#x5316;&#x5B89;&#x5168;&#x6027;&#x53EF;&#x4EE5;&#x9632;&#x6B62;&#x5BF9;&#x8C61;&#x7684;&#x521D;&#x59CB;&#x5F15;&#x7528;&#x88AB;&#x91CD;&#x6392;&#x5E8F;&#x5230;&#x7ED9;&#x6784;&#x9020;&#x8FC7;&#x7A0B;&#x4E4B;&#x524D;&#x3002;&#x5E76;&#x4E14;&#x4FDD;&#x8BC1;&#x6240;&#x6709;&#x7EBF;&#x7A0B;&#x90FD;&#x80FD;&#x770B;&#x7531;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E3A;final&#x57DF;&#x8BBE;&#x7F6E;&#x7684;&#x6B63;&#x786E;&#x503C;&#xFF09;</p>
<h2 id="Initialization-on-demand-holder-idiom"><a href="#Initialization-on-demand-holder-idiom" class="headerlink" title="Initialization-on-demand holder idiom"></a>Initialization-on-demand holder idiom</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{ }</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Initializes singleton.</span><br><span class="line">     *</span><br><span class="line">     * {<span class="doctag">@link</span> SingletonHolder} is loaded on the first execution of {<span class="doctag">@link</span> Singleton#getInstance()} or the first access to</span><br><span class="line">     * {<span class="doctag">@link</span> SingletonHolder#INSTANCE}, not before.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>{</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>&#x5BF9;&#x4E8E;&#x9759;&#x6001;&#x5185;&#x90E8;&#x7C7B;SingletonHolder&#xFF0C;&#x5E76;&#x4E0D;&#x4F1A;&#x5728;Singleton&#x521D;&#x59CB;&#x5316;&#x65F6;&#x5C31;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x53EA;&#x6709;SingletonHolder&#x88AB;&#x7B2C;&#x4E00;&#x6B21;&#x4F7F;&#x7528;&#x65F6;&#x5373;getInstance()&#x88AB;&#x8C03;&#x7528;&#x65F6;&#xFF0C;INSTANCE&#x624D;&#x4F1A;&#x88AB;&#x521D;&#x59CB;&#x5316;&#x3002;</p>
<h2 id="The-enum-way"><a href="#The-enum-way" class="headerlink" title="The enum way"></a>The enum way</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton {</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span> <span class="params">(String arg)</span> </span>{</span><br><span class="line">        <span class="comment">// Perform operation here </span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>&#x300A;Effective Java&#x300B;&#x4E00;&#x4E66;&#x4E2D;&#x5EFA;&#x8BAE;&#x7684;&#x5B9E;&#x73B0;Singleton&#x7684;&#x6700;&#x4F73;&#x65B9;&#x6CD5;</p>
<h1 id="&#x53C2;&#x8003;&#x6587;&#x732E;"><a href="#&#x53C2;&#x8003;&#x6587;&#x732E;" class="headerlink" title="&#x53C2;&#x8003;&#x6587;&#x732E;"></a>&#x53C2;&#x8003;&#x6587;&#x732E;</h1><blockquote>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Singleton_pattern" target="_blank" rel="external">Singleton pattern</a></li>
<li><a href="http://ifeve.com/double-checked-locking-with-delay-initialization/" target="_blank" rel="external">&#x53CC;&#x91CD;&#x68C0;&#x67E5;&#x9501;&#x5B9A;&#x4E0E;&#x5EF6;&#x8FDF;&#x521D;&#x59CB;&#x5316;</a></li>
<li><a href="https://bbs.byr.cn/#!article/Java/39220" target="_blank" rel="external">&#x6B6A;&#x697C;&#x7684;volatile</a></li>
<li><a href="http://www.cnblogs.com/dolphin0520/p/3920373.html" target="_blank" rel="external">Java&#x5E76;&#x53D1;&#x7F16;&#x7A0B;&#xFF1A;volatile&#x5173;&#x952E;&#x5B57;&#x89E3;&#x6790;</a></li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Little Tips（持续更新）]]></title>
      <url>http://zongwenlong.github.io/2016/05/25/Little-Tips/</url>
      <content type="html"><![CDATA[<p>&#x2003;&#x2003;&#x6536;&#x5F55;&#x4E00;&#x4E9B;&#x5F00;&#x53D1;&#x4E2D;&#x7684;&#x5C0F;&#x6280;&#x5DE7;</p>
<h1 id="Code-Style"><a href="#Code-Style" class="headerlink" title="Code Style"></a>Code Style</h1><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ul>
<li>&#x6E90;&#x6587;&#x4EF6;<ul>
<li>&#x7F16;&#x7801;&#xFF1A;UTF-8</li>
<li>&#x6587;&#x4EF6;&#x7ED3;&#x6784;&#xFF08;&#x5404;&#x90E8;&#x5206;&#x4E4B;&#x95F4;&#x6709;&#x4E14;&#x4EC5;&#x6709;&#x4E00;&#x4E2A;&#x7A7A;&#x884C;&#xFF09;&#xFF1A;<ul>
<li>License or copyright &#x4FE1;&#x606F;</li>
<li>Package &#x58F0;&#x660E;</li>
<li>Import &#x58F0;&#x660E;&#xFF1A;&#x65E0;&#x901A;&#x914D;&#x7B26;import</li>
<li>&#x4E00;&#x4E2A;top-level&#x7C7B;</li>
</ul>
</li>
</ul>
</li>
<li><p>&#x5927;&#x62EC;&#x53F7;</p>
<ul>
<li><p>&#x975E;&#x7A7A;&#x4EE3;&#x7801;&#x5757;</p>
<ul>
<li>&#x5DE6;&#x62EC;&#x53F7;&#x524D;&#x65E0;&#x6362;&#x884C;&#xFF0C;&#x540E;&#x8FB9;&#x6362;&#x884C;</li>
<li>&#x53F3;&#x62EC;&#x53F7;&#x524D;&#x6709;&#x6362;&#x884C;&#xFF0C;&#x540E;&#x8FB9;&#x4E5F;&#x6709;&#x6362;&#x884C;&#xFF08;if&#x540E;&#x7D27;&#x8DDF;&#x7684;else&#x9664;&#x5916;&#xFF0C;catch&#x7B49;&#x9664;&#x5916;&#xFF09;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyClass() {</span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (condition()) {</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        something();</span><br><span class="line">      } <span class="keyword">catch</span> (ProblemException e) {</span><br><span class="line">        recover();</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>&#x7A7A;&#x4EE3;&#x7801;&#x5757;</p>
<ul>
<li>&#x5DE6;&#x53F3;&#x62EC;&#x53F7;&#x7D27;&#x8DDF;&#x6216;&#x8005;&#x6362;&#x4E00;&#x884C;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This is acceptable</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doNothing</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is equally acceptable</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doNothingElse</span><span class="params">()</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>&#x7F29;&#x8FDB;</p>
<ul>
<li>&#x4E24;&#x4E2A;&#x7A7A;&#x683C;&#xFF08;&#x76EE;&#x524D;&#x4E60;&#x60EF;&#x7F29;&#x8FDB;&#x56DB;&#x4E2A;&#x7A7A;&#x683C;&#xFF09;</li>
</ul>
</li>
<li>&#x81EA;&#x52A8;&#x6362;&#x884C;<ul>
<li>&#x7C7B;&#x9650;&#x5236;&#xFF0C;&#x4E00;&#x884C;&#x4E0D;&#x80FD;&#x8FC7;&#x957F;&#xFF0C;&#x9650;&#x5236;&#x4E3A;80&#x6216;100&#x5B57;&#x7B26;</li>
<li>&#x4ECE;&#x975E;&#x8D4B;&#x503C;&#x8FD0;&#x7B97;&#x7B26;&#x51FA;&#x65AD;&#x5F00;&#xFF0C;&#x5728;&#x7B26;&#x53F7;&#x524D;&#x65AD;&#x5F00;&#xFF08;&#x6BD4;&#x5982;+&#xFF0C;&#x5B83;&#x5C06;&#x4F4D;&#x4E8E;&#x4E0B;&#x4E00;&#x884C;&#xFF09;</li>
<li>&#x8D4B;&#x503C;&#x8FD0;&#x7B97;&#x7B26;&#x540E;&#x65AD;&#x5F00;</li>
<li>&#x65B9;&#x6CD5;&#x540D;&#x6216;&#x8005;&#x6784;&#x9020;&#x51FD;&#x6570;&#x540D;&#x4E0E;&#x5DE6;&#x62EC;&#x53F7;&#x7559;&#x5728;&#x540C;&#x4E00;&#x884C;</li>
<li>&#x90FD;&#x597D;&#x4E0E;&#x524D;&#x9762;&#x7684;&#x5185;&#x5BB9;&#x7559;&#x5728;&#x540C;&#x4E00;&#x884C;</li>
<li>&#x81EA;&#x52A8;&#x6362;&#x884C;&#x65F6;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x540E;&#x7684;&#x6BCF;&#x4E00;&#x884C;&#x81F3;&#x5C11;&#x6BD4;&#x7B2C;&#x4E00;&#x884C;&#x591A;&#x7F29;&#x8FDB;4&#x4E2A;&#x7A7A;&#x683C;</li>
</ul>
</li>
<li>&#x7A7A;&#x884C;<ul>
<li>&#x7C7B;&#x5185;&#x8FDE;&#x7EED;&#x7684;&#x6210;&#x5458;&#x4E4B;&#x95F4;&#xFF1A;&#x5B57;&#x6BB5;&#xFF08;&#x53EF;&#x9009;&#xFF09;&#x3001;&#x6784;&#x9020;&#x51FD;&#x6570;&#x3001;&#x65B9;&#x6CD5;&#x7B49;</li>
<li>&#x51FD;&#x6570;&#x4F53;&#x4E2D;&#xFF0C;&#x8BED;&#x53E5;&#x7684;&#x903B;&#x8F91;&#x5206;&#x7EC4;&#x95F4;&#x4F7F;&#x7528;&#x7A7A;&#x884C;</li>
</ul>
</li>
<li>&#x6C34;&#x5E73;&#x7A7A;&#x683C;<ul>
<li>&#x4FDD;&#x7559;&#x5B57;&#x4E0E;&#x7D27;&#x968F;&#x5176;&#x540E;&#x7684;<code>(</code>&#x4E4B;&#x95F4;&#xFF08;&#x5982;if, for&#x7B49;&#xFF09;</li>
<li>&#x4FDD;&#x7559;&#x5B57;&#x4E0E;&#x5176;&#x524D;&#x9762;&#x7684;<code>}</code></li>
<li><code>{</code>&#x524D;&#xFF0C;&#x4F8B;&#x5916;&#xFF1A;<ul>
<li><code>@SomeAnnotation({a, b})</code></li>
<li><code>String[][] x = foo;</code></li>
</ul>
</li>
<li>&#x4E8C;&#x5143;&#x6216;&#x4E09;&#x5143;&#x8FD0;&#x7B97;&#x7B26;&#x4E24;&#x4FA7;</li>
<li><code>,</code> <code>:</code> <code>;</code>&#x53CA;<code>)</code>&#x540E;</li>
<li>&#x6CE8;&#x91CA;<code>//</code>&#x540E;</li>
<li>&#x6570;&#x7EC4;&#x521D;&#x59CB;&#x5316;&#x65F6;&#xFF0C;&#x5927;&#x62EC;&#x53F7;&#x5185;&#x7684;&#x7A7A;&#x683C;&#x662F;&#x53EF;&#x9009;&#x7684;<code>new int[] {5, 6}</code> &#x548C; <code>new int[] { 5, 6 }</code> &#x90FD;&#x662F;&#x53EF;&#x4EE5;&#x7684;</li>
</ul>
</li>
<li>&#x5176;&#x4ED6;<ul>
<li>&#x53D8;&#x91CF;&#x58F0;&#x660E;&#xFF1A;&#x4E00;&#x6B21;&#x53EA;&#x58F0;&#x660E;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#xFF0C;&#x9700;&#x8981;&#x65F6;&#x624D;&#x58F0;&#x660E;&#xFF0C;&#x5E76;&#x5C3D;&#x91CF;&#x8FDB;&#x884C;&#x521D;&#x59CB;&#x5316;</li>
</ul>
</li>
</ul>
<p>Reference&#xFF1A;</p>
<ol>
<li><a href="https://google.github.io/styleguide/javaguide.html" target="_blank" rel="external">Google Java Style Guide</a></li>
</ol>
<h1 id="&#x5C0F;&#x6280;&#x5DE7;"><a href="#&#x5C0F;&#x6280;&#x5DE7;" class="headerlink" title="&#x5C0F;&#x6280;&#x5DE7;"></a>&#x5C0F;&#x6280;&#x5DE7;</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>)   <span class="comment">// &#x4E8C;&#x5206;&#x6CD5;,&#x6CE8;&#x610F;&#x4FBF;&#x9762;&#x7684;&#x62EC;&#x53F7;</span></span><br><span class="line"><span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>           <span class="comment">// &#xFF01;&#xFF01;&#xFF01;&#x4E0D;&#x8981;&#x4F7F;&#x7528;&#xFF0C;&#x56E0;&#x4E3A;&#x5982;&#x679C;left&#x6216;right&#x5F88;&#x5927;&#xFF0C;&#x4E8C;&#x8005;&#x7684;&#x548C;&#x53EF;&#x80FD;&#x6EA2;&#x51FA;&#xFF0C;&#x4F46;mid&#x4E0D;&#x4F1A;&#x6EA2;&#x51FA;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************** &#x4F4D;&#x8FD0;&#x7B97; ****************************/</span></span><br><span class="line">(<span class="number">1</span> &lt;&lt; <span class="number">31</span>) - <span class="number">1</span>; <span class="comment">// &#x83B7;&#x53D6;int&#x578B;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x7531;&#x4E8E;&#x4F18;&#x5148;&#x7EA7;&#x5173;&#x673A;&#xFF0C;&#x62EC;&#x53F7;&#x4E0D;&#x53EF;&#x4EE5;&#x7701;&#x7565;</span></span><br><span class="line"><span class="number">1</span> &lt;&lt; <span class="number">31</span>;       <span class="comment">// &#x83B7;&#x53D6;int&#x578B;&#x6700;&#x5C0F;&#x503C;</span></span><br><span class="line">(n &amp; <span class="number">1</span>) == <span class="number">1</span>;  <span class="comment">// &#x5224;&#x65AD;&#x4E00;&#x4E2A;&#x6570;&#x7684;&#x5947;&#x5076;&#x6027;</span></span><br><span class="line">(x ^ y) &gt;= <span class="number">0</span>   <span class="comment">// &#x5224;&#x65AD;x,y&#x6B63;&#x8D1F;&#x7B26;&#x53F7;&#x662F;&#x5426;&#x76F8;&#x540C;</span></span><br><span class="line">n &gt; <span class="number">0</span> ? (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span> : <span class="keyword">false</span>;  <span class="comment">//&#x5224;&#x65AD;n&#x662F;&#x4E0D;&#x662F;2&#x7684;&#x5E42;</span></span><br><span class="line">m &amp; (n - <span class="number">1</span>);           <span class="comment">// &lt;==&gt; m % (n - 1) &#x5176;&#x4E2D; n = 2 ^ k, k&#x4F4D;&#x6B63;&#x6574;&#x6570;</span></span><br><span class="line">(n &gt;&gt; (m - <span class="number">1</span>)) &amp; <span class="number">1</span>;    <span class="comment">// &#x4ECE;&#x4F4E;&#x4F4D;&#x5230;&#x9AD8;&#x4F4D;&#xFF0C;&#x53D6;n&#x7684;&#x7B2C;m&#x4F4D;</span></span><br><span class="line">n &amp; (<span class="number">1</span> &lt;&lt; (m - <span class="number">1</span>)) == <span class="number">0</span><span class="comment">// &#x4ECE;&#x4F4E;&#x4F4D;&#x5230;&#x9AD8;&#x4F4D;&#xFF0C;&#x53D6;n&#x7684;&#x7B2C;m&#x4F4D; </span></span><br><span class="line">n | (<span class="number">1</span> &lt;&lt; (m - <span class="number">1</span>));    <span class="comment">// &#x4ECE;&#x4F4E;&#x4F4D;&#x5230;&#x9AD8;&#x4F4D;&#xFF0C;&#x5C06;n&#x7684;&#x7B2C;m&#x4F4D;&#x7F6E;1</span></span><br><span class="line">n &amp; ~(<span class="number">1</span> &lt;&lt; (m - <span class="number">1</span>));   <span class="comment">// &#x4ECE;&#x4F4E;&#x4F4D;&#x5230;&#x9AD8;&#x4F4D;&#xFF0C;&#x5C06;n&#x7684;&#x7B2C;m&#x4F4D;&#x7F6E;0</span></span><br><span class="line">Integer.bitCount(num); <span class="comment">// &#x7EDF;&#x8BA1;&#x6BCF;&#x4F4D;1&#x7684;&#x4E2A;&#x6570;       </span></span><br><span class="line">((<span class="number">1</span> &lt;&lt; i) &amp; num) == <span class="number">0</span>  <span class="comment">// &#x5224;&#x65AD;&#x67D0;&#x4E00;&#x4F4D;&#x662F;&#x5426;&#x4E3A;0</span></span><br><span class="line">num = ((<span class="number">1</span> &lt;&lt; i) | num) <span class="comment">// &#x8BBE;&#x7F6E;&#x67D0;&#x4E00;&#x4F4D;&#x4E3A;1</span></span><br><span class="line">x &amp; (~<span class="number">0</span> &lt;&lt; n)          <span class="comment">// &#x5C06;x&#x6700;&#x53F3;&#x8FB9;&#x7684;n&#x4F4D;&#x6E05;&#x96F6;</span></span><br><span class="line">x &amp; ((<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>)     <span class="comment">// &#x5C06;&#x6700;&#x9AD8;&#x4F4D;&#x5230;i&#x4F4D;&#xFF08;&#x542B;&#xFF09;&#x6E05;&#x96F6;</span></span><br><span class="line">n &amp; (n - <span class="number">1</span>) == <span class="number">0</span>       <span class="comment">// &#x68C0;&#x67E5;n&#x662F;&#x5426;&#x4E3A;2&#x7684;&#x67D0;&#x6B21;&#x65B9;&#xFF0C;&#x6216;&#x8005;n&#x662F;&#x5426;&#x4E3A;0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x7EDF;&#x8BA1;&#x6B63;&#x6570;c&#x4E8C;&#x8FDB;&#x5236;&#x4F4D;1&#x7684;&#x4E2A;&#x6570;</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; c != <span class="number">0</span>; c = c &amp; (c - <span class="number">1</span>)) {</span><br><span class="line">    count++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x53D8;&#x91CF;&#x4EA4;&#x6362;</span></span><br><span class="line">a ^= b;</span><br><span class="line">b ^= a;</span><br><span class="line">a ^= b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if(x == a) x = b; if(x == b) x = a;</span></span><br><span class="line">x = a ^ b ^ x;</span><br><span class="line"></span><br><span class="line">dp[i &amp; <span class="number">1</span>]   <span class="comment">//0,1&#x5FAA;&#x73AF;</span></span><br><span class="line"><span class="comment">// &#x4FDD;&#x7559;&#x6700;&#x4F4E;&#x4F4D;&#x7684;1&#xFF0C;&#x5176;&#x4ED6;&#x4F4D;&#x90FD;&#x53D8;&#x4E3A;0</span></span><br><span class="line">flag &amp;= (-flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x8F93;&#x51FA;</span></span><br><span class="line">String str = String.format(<span class="string">&quot;%02d&quot;</span>,num);   <span class="comment">// num&#x4E0D;&#x591F;&#x4E24;&#x4F4D;&#x5219;&#x81EA;&#x52A8;&#x8865;&#x5168;&#x524D;&#x9762;&#x7684;0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x5224;&#x65AD;&#x4E24;&#x4E2A;int&#x6570;&#x76F8;&#x52A0;&#x662F;&#x5426;&#x6EA2;&#x51FA;</span></span><br><span class="line"><span class="keyword">if</span> ((a &gt; <span class="number">0</span> &amp;&amp; b &gt; <span class="number">0</span> &amp;&amp; a &gt; Integer.MAX_VALUE - b) </span><br><span class="line">  || (a &lt; <span class="number">0</span> &amp;&amp; b &lt; <span class="number">0</span> &amp;&amp; a &lt; Integer.MAX_VALUE - b)) {</span><br><span class="line">    <span class="comment">// overflow</span></span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x5224;&#x65AD;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x81F3;&#x5C11;&#x51FA;&#x73B0;&#x4E24;&#x6B21;</span></span><br><span class="line"><span class="keyword">if</span> (!once.add(key) &amp;&amp; more.add(key)) {</span><br><span class="line">  <span class="comment">// Do Somthing</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="Linux-&#x547D;&#x4EE4;"><a href="#Linux-&#x547D;&#x4EE4;" class="headerlink" title="Linux &#x547D;&#x4EE4;"></a>Linux &#x547D;&#x4EE4;</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; fileName  <span class="comment">#&#x6587;&#x4EF6;&#x6E05;&#x7A7A;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://blog.csdn.net/zmazon/article/details/8262185" target="_blank" rel="external">&#x5E38;&#x7528;&#x4F4D;&#x8FD0;&#x7B97;</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[动态规划——由实践总结经验]]></title>
      <url>http://zongwenlong.github.io/2016/05/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      <content type="html"><![CDATA[<p>&#x2003;&#x2003;&#x672C;&#x79D1;&#x65F6;&#x5019;&#xFF0C;&#x4E3A;&#x4E86;&#x8003;&#x8BD5;&#x5BF9;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x8FDB;&#x884C;&#x8FC7;&#x4E00;&#x6B21;&#x6076;&#x8865;&#xFF0C;&#x4F46;&#x90A3;&#x65F6;&#x5BF9;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7406;&#x89E3;&#x4E0D;&#x591F;&#x3002;&#x73B0;&#x5728;&#x91CD;&#x65B0;&#x7FFB;&#x51FA;&#x6765;&#xFF0C;&#x7ECF;&#x8FC7;&#x4E24;&#x5468;&#x591A;&#x7684;&#x6574;&#x7406;&#xFF0C;&#x5BF9;&#x5176;&#x7406;&#x89E3;&#x8FDB;&#x4E00;&#x6B65;&#x52A0;&#x6DF1;&#x3002;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x6838;&#x5FC3;&#x5728;&#x4E8E;&#x5C06;&#x5F85;&#x6C42;&#x89E3;&#x95EE;&#x9898;&#x5206;&#x89E3;&#x4E3A;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x5B50;&#x95EE;&#x9898;&#x7684;&#x89C4;&#x6A21;&#x5C0F;&#x4E8E;&#x539F;&#x95EE;&#x9898;&#xFF0C;&#x5E76;&#x4E14;&#x6C42;&#x89E3;&#x65B9;&#x6CD5;&#x4E00;&#x81F4;&#xFF0C;&#x4F46;&#x539F;&#x95EE;&#x9898;&#x7684;&#x6C42;&#x89E3;&#x4F9D;&#x8D56;&#x4E8E;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x5B50;&#x95EE;&#x9898;&#x4E4B;&#x95F4;&#x5F80;&#x5F80;&#x4E0D;&#x76F8;&#x4E92;&#x72EC;&#x7ACB;&#x3002;&#x5178;&#x578B;&#x7279;&#x5F81;&#x5C31;&#x662F;&#xFF0C;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x4E2D;&#x6240;&#x4F7F;&#x7528;&#x7684;&#x9012;&#x63A8;&#x516C;&#x5F0F;&#x3002;&#x4E0E;&#x4E4B;&#x76F8;&#x6BD4;&#xFF0C;&#x5206;&#x6CBB;&#x6CD5;&#x7684;&#x6838;&#x5FC3;&#x5728;&#x4E8E;&#x5C06;&#x539F;&#x95EE;&#x9898;&#x89C4;&#x6A21;&#x7F29;&#x5C0F;&#xFF0C;&#x5206;&#x89E3;&#x4E3A;&#x591A;&#x4E2A;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x4E14;&#x5404;&#x4E2A;&#x5B50;&#x95EE;&#x9898;&#x4E4B;&#x95F4;&#x76F8;&#x4E92;&#x72EC;&#x7ACB;&#x3002;</p>
<h1 id="&#x57FA;&#x7840;&#x9898;&#x76EE;"><a href="#&#x57FA;&#x7840;&#x9898;&#x76EE;" class="headerlink" title="&#x57FA;&#x7840;&#x9898;&#x76EE;"></a>&#x57FA;&#x7840;&#x9898;&#x76EE;</h1><h2 id="&#x77E9;&#x9635;&#x53D6;&#x6570;&#x95EE;&#x9898;"><a href="#&#x77E9;&#x9635;&#x53D6;&#x6570;&#x95EE;&#x9898;" class="headerlink" title="&#x77E9;&#x9635;&#x53D6;&#x6570;&#x95EE;&#x9898;"></a>&#x77E9;&#x9635;&#x53D6;&#x6570;&#x95EE;&#x9898;</h2><p><strong>&#x95EE;&#x9898;&#x63CF;&#x8FF0;</strong><br>&#x4E00;&#x4E2A;N*N&#x77E9;&#x9635;&#x4E2D;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x7ECF;&#x8FC7;&#x8FD9;&#x4E2A;&#x683C;&#x5B50;&#xFF0C;&#x5C31;&#x80FD;&#x83B7;&#x5F97;&#x76F8;&#x5E94;&#x4EF7;&#x503C;&#x7684;&#x5956;&#x52B1;&#xFF0C;&#x4ECE;&#x5DE6;&#x4E0A;&#x8D70;&#x5230;&#x53F3;&#x4E0B;&#xFF0C;&#x53EA;&#x80FD;&#x5411;&#x4E0B;&#x5411;&#x53F3;&#x8D70;&#xFF0C;&#x6C42;&#x80FD;&#x591F;&#x83B7;&#x5F97;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x3002;<br>&#x4F8B;&#x5982;&#xFF1A;3 * 3&#x7684;&#x65B9;&#x683C;&#x3002;<br>1 3 3<br>2 1 3<br>2 2 1<br>&#x80FD;&#x591F;&#x83B7;&#x5F97;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x4E3A;&#xFF1A;11&#x3002;<br><strong>&#x8F93;&#x5165;</strong><br>&#x7B2C;1&#x884C;&#xFF1A;N&#xFF0C;N&#x4E3A;&#x77E9;&#x9635;&#x7684;&#x5927;&#x5C0F;&#x3002;(2 &lt;= N &lt;= 500)<br>&#x7B2C;2 - N + 1&#x884C;&#xFF1A;&#x6BCF;&#x884C;N&#x4E2A;&#x6570;&#xFF0C;&#x4E2D;&#x95F4;&#x7528;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#xFF0C;&#x5BF9;&#x5E94;&#x683C;&#x5B50;&#x4E2D;&#x5956;&#x52B1;&#x7684;&#x4EF7;&#x503C;&#x3002;&#xFF08;1 &lt;= N[i] &lt;= 10000)<br><strong>&#x8F93;&#x51FA;</strong><br>&#x8F93;&#x51FA;&#x80FD;&#x591F;&#x83B7;&#x5F97;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x3002;<br><strong>&#x8F93;&#x5165;&#x793A;&#x4F8B;</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 3 3</span><br><span class="line">2 1 3</span><br><span class="line">2 2 1</span><br></pre></td></tr></table></figure>
<p><strong>&#x8F93;&#x51FA;&#x793A;&#x4F8B;</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure></p>
<p><strong>&#x793A;&#x4F8B;&#x4EE3;&#x7801;</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; nums(n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; &gt; dp(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++){</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; row(n);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; maxRow(n + <span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n;j++){</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; row[j];</span><br><span class="line">        }</span><br><span class="line">        nums[i] = row;</span><br><span class="line">        dp[i] = maxRow;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; maxRow(n + <span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    dp[n] = maxRow;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++){</span><br><span class="line">            dp[i][j] = max(dp[i - <span class="number">1</span>][j],dp[i][j - <span class="number">1</span>]) + nums[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; dp[n][n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h2 id="&#x6700;&#x5927;&#x5B50;&#x6BB5;&#x548C;"><a href="#&#x6700;&#x5927;&#x5B50;&#x6BB5;&#x548C;" class="headerlink" title="&#x6700;&#x5927;&#x5B50;&#x6BB5;&#x548C;"></a>&#x6700;&#x5927;&#x5B50;&#x6BB5;&#x548C;</h2><p><strong>&#x95EE;&#x9898;&#x63CF;&#x8FF0;</strong><br>N&#x4E2A;&#x6574;&#x6570;&#x7EC4;&#x6210;&#x7684;&#x5E8F;&#x5217;a[1],a[2],a[3],&#x2026;,a[n]&#xFF0C;&#x6C42;&#x8BE5;&#x5E8F;&#x5217;&#x5982;a[i]+a[i+1]+&#x2026;+a[j]&#x7684;&#x8FDE;&#x7EED;&#x5B50;&#x6BB5;&#x548C;&#x7684;&#x6700;&#x5927;&#x503C;&#x3002;&#x5F53;&#x6240;&#x7ED9;&#x7684;&#x6574;&#x6570;&#x5747;&#x4E3A;&#x8D1F;&#x6570;&#x65F6;&#x548C;&#x4E3A;0&#x3002;<br>&#x4F8B;&#x5982;&#xFF1A;-2,11,-4,13,-5,-2&#xFF0C;&#x548C;&#x6700;&#x5927;&#x7684;&#x5B50;&#x6BB5;&#x4E3A;&#xFF1A;11,-4,13&#x3002;&#x548C;&#x4E3A;20&#x3002;<br><strong>&#x8F93;&#x5165;</strong><br>&#x7B2C;1&#x884C;&#xFF1A;&#x6574;&#x6570;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;N&#xFF08;2 &lt;= N &lt;= 50000)<br>&#x7B2C;2 - N + 1&#x884C;&#xFF1A;N&#x4E2A;&#x6574;&#x6570;&#xFF08;-10^9 &lt;= A[i] &lt;= 10^9&#xFF09;<br><strong>&#x8F93;&#x51FA;</strong><br>&#x8F93;&#x51FA;&#x6700;&#x5927;&#x5B50;&#x6BB5;&#x548C;&#x3002;<br><strong>&#x8F93;&#x5165;&#x793A;&#x4F8B;</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">-2</span><br><span class="line">11</span><br><span class="line">-4</span><br><span class="line">13</span><br><span class="line">-5</span><br><span class="line">-2</span><br></pre></td></tr></table></figure>
<p><strong>&#x8F93;&#x51FA;&#x793A;&#x4F8B;</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure></p>
<p><strong>&#x793A;&#x4F8B;&#x4EE3;&#x7801;</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> cur;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; cur;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> result = cur;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> pre = cur;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n;i++){</span><br><span class="line">       <span class="built_in">cin</span> &gt;&gt; cur;</span><br><span class="line">       <span class="keyword">if</span>(pre &gt; <span class="number">0</span>){</span><br><span class="line">           pre = pre + cur;</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">else</span>{</span><br><span class="line">           pre = cur;</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">if</span>(pre &gt; result){</span><br><span class="line">           result = pre;</span><br><span class="line">       }</span><br><span class="line">       </span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h2 id="&#x6700;&#x957F;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x95EE;&#x9898;"><a href="#&#x6700;&#x957F;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x95EE;&#x9898;" class="headerlink" title="&#x6700;&#x957F;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x95EE;&#x9898;"></a>&#x6700;&#x957F;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#x95EE;&#x9898;</h2><p><strong>&#x95EE;&#x9898;&#x63CF;&#x8FF0;</strong><br>&#x7ED9;&#x51FA;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;A B&#xFF0C;&#x6C42;A&#x4E0E;B&#x7684;&#x6700;&#x957F;&#x516C;&#x5171;&#x5B50;&#x5E8F;&#x5217;&#xFF08;&#x5B50;&#x5E8F;&#x5217;&#x4E0D;&#x8981;&#x6C42;&#x662F;&#x8FDE;&#x7EED;&#x7684;&#xFF09;&#x3002;<br>&#x6BD4;&#x5982;&#x4E24;&#x4E2A;&#x4E32;&#x4E3A;&#xFF1A;<br>abcicba<br>abdkscab<br>ab&#x662F;&#x4E24;&#x4E2A;&#x4E32;&#x7684;&#x5B50;&#x5E8F;&#x5217;&#xFF0C;abc&#x4E5F;&#x662F;&#xFF0C;abca&#x4E5F;&#x662F;&#xFF0C;&#x5176;&#x4E2D;abca&#x662F;&#x8FD9;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x6700;&#x957F;&#x7684;&#x5B50;&#x5E8F;&#x5217;&#x3002;<br><strong>&#x8F93;&#x5165;</strong><br>&#x7B2C;1&#x884C;&#xFF1A;&#x5B57;&#x7B26;&#x4E32;A<br>&#x7B2C;2&#x884C;&#xFF1A;&#x5B57;&#x7B26;&#x4E32;B<br>(A,B&#x7684;&#x957F;&#x5EA6; &lt;= 1000)<br><strong>&#x8F93;&#x51FA;</strong><br>&#x8F93;&#x51FA;&#x6700;&#x957F;&#x7684;&#x5B50;&#x5E8F;&#x5217;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x591A;&#x4E2A;&#xFF0C;&#x968F;&#x610F;&#x8F93;&#x51FA;1&#x4E2A;&#x3002;<br><strong>&#x8F93;&#x5165;&#x793A;&#x4F8B;</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abcicba</span><br><span class="line">abdkscab</span><br></pre></td></tr></table></figure>
<p><strong>&#x8F93;&#x51FA;&#x793A;&#x4F8B;</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abca</span><br></pre></td></tr></table></figure></p>
<p><strong>&#x793A;&#x4F8B;&#x4EE3;&#x7801;</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> {</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">char</span> node = <span class="string">&apos;\0&apos;</span>;</span><br><span class="line">    <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">} DpNode;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="built_in">string</span> b;</span><br><span class="line">    <span class="built_in">std</span>:<span class="built_in">cin</span> &gt;&gt; a &gt;&gt;b;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;DpNode&gt; &gt; dp(a.size() + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= a.size(); i++) {</span><br><span class="line">        <span class="built_in">vector</span>&lt;DpNode&gt; dpRow(b.size() + <span class="number">1</span>);</span><br><span class="line">        dp[i] = dpRow;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a.size(); i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= b.size(); j++) {</span><br><span class="line">            <span class="keyword">if</span> (a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>]) {</span><br><span class="line">                dp[i][j].maxLength = dp[i - <span class="number">1</span>][j - <span class="number">1</span>].maxLength + <span class="number">1</span>;</span><br><span class="line">                dp[i][j].x = i - <span class="number">1</span>;</span><br><span class="line">                dp[i][j].y = j - <span class="number">1</span>;</span><br><span class="line">                dp[i][j].node = a[i - <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j].maxLength &gt; dp[i][j - <span class="number">1</span>].maxLength) {</span><br><span class="line">                    dp[i][j].maxLength = dp[i - <span class="number">1</span>][j].maxLength;</span><br><span class="line">                    dp[i][j].x = i - <span class="number">1</span>;</span><br><span class="line">                    dp[i][j].y = j;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    dp[i][j].maxLength = dp[i][j - <span class="number">1</span>].maxLength;</span><br><span class="line">                    dp[i][j].x = i;</span><br><span class="line">                    dp[i][j].y = j - <span class="number">1</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x = a.size();</span><br><span class="line">    <span class="keyword">int</span> y = b.size();</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">char</span>&gt; result;</span><br><span class="line">    <span class="keyword">int</span> xTemp;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span> &amp;&amp; y != <span class="number">0</span>) {</span><br><span class="line">        c = dp[x][y].node;</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="string">&apos;\0&apos;</span>) {</span><br><span class="line">            result.push_front(c);</span><br><span class="line">        }</span><br><span class="line">        xTemp = x;</span><br><span class="line">        x = dp[xTemp][y].x;</span><br><span class="line">        y = dp[xTemp][y].y;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">list</span>&lt;<span class="keyword">char</span>&gt;::iterator it = result.begin(); it != result.end(); it++) {</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h2 id="&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x95EE;&#x9898;"><a href="#&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x95EE;&#x9898;" class="headerlink" title="&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x95EE;&#x9898;"></a>&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x95EE;&#x9898;</h2><p><strong>&#x95EE;&#x9898;&#x63CF;&#x8FF0;</strong><br>&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#xFF0C;&#x53C8;&#x79F0;Levenshtein&#x8DDD;&#x79BB;&#xFF08;&#x4E5F;&#x53EB;&#x505A;Edit Distance&#xFF09;&#xFF0C;&#x662F;&#x6307;&#x4E24;&#x4E2A;&#x5B57;&#x4E32;&#x4E4B;&#x95F4;&#xFF0C;&#x7531;&#x4E00;&#x4E2A;&#x8F6C;&#x6210;&#x53E6;&#x4E00;&#x4E2A;&#x6240;&#x9700;&#x7684;&#x6700;&#x5C11;&#x7F16;&#x8F91;&#x64CD;&#x4F5C;&#x6B21;&#x6570;&#x3002;&#x8BB8;&#x53EF;&#x7684;&#x7F16;&#x8F91;&#x64CD;&#x4F5C;&#x5305;&#x62EC;&#x5C06;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x66FF;&#x6362;&#x6210;&#x53E6;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;&#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;&#x5220;&#x9664;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x3002;<br>&#x4F8B;&#x5982;&#x5C06;kitten&#x4E00;&#x5B57;&#x8F6C;&#x6210;sitting&#xFF1A;<br>sitten &#xFF08;k-&gt;s&#xFF09;<br>sittin &#xFF08;e-&gt;i&#xFF09;<br>sitting &#xFF08;-&gt;g&#xFF09;<br>&#x6240;&#x4EE5;kitten&#x548C;sitting&#x7684;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x662F;3&#x3002;&#x4FC4;&#x7F57;&#x65AF;&#x79D1;&#x5B66;&#x5BB6;Vladimir Levenshtein&#x5728;1965&#x5E74;&#x63D0;&#x51FA;&#x8FD9;&#x4E2A;&#x6982;&#x5FF5;&#x3002;<br>&#x7ED9;&#x51FA;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;a,b&#xFF0C;&#x6C42;a&#x548C;b&#x7684;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x3002;<br><strong>&#x8F93;&#x5165;</strong><br>&#x7B2C;1&#x884C;&#xFF1A;&#x5B57;&#x7B26;&#x4E32;a(a&#x7684;&#x957F;&#x5EA6; &lt;= 1000)&#x3002;<br>&#x7B2C;2&#x884C;&#xFF1A;&#x5B57;&#x7B26;&#x4E32;b(b&#x7684;&#x957F;&#x5EA6; &lt;= 1000)&#x3002;<br><strong>&#x8F93;&#x51FA;</strong><br>&#x8F93;&#x51FA;a&#x548C;b&#x7684;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x3002;<br><strong>&#x8F93;&#x5165;&#x793A;&#x4F8B;</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kitten</span><br><span class="line">sitting</span><br></pre></td></tr></table></figure>
<p><strong>&#x8F93;&#x51FA;&#x793A;&#x4F8B;</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure></p>
<p><strong>&#x793A;&#x4F8B;&#x4EE3;&#x7801;</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="built_in">string</span> b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; dp(a.size() + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dpRow(b.size() + <span class="number">1</span>);</span><br><span class="line">    dp[<span class="number">0</span>] = dpRow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= b.size();i++ ){</span><br><span class="line">        dp[<span class="number">0</span>][i] = i;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a.size();i++){</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dpRow(b.size() + <span class="number">1</span>);</span><br><span class="line">        dp[i] = dpRow;</span><br><span class="line">        dp[i][<span class="number">0</span>] = i;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> minTemp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size();i++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b.size();j++){</span><br><span class="line">            <span class="keyword">if</span>(a[i] == b[j]){</span><br><span class="line">                dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = dp[i][j];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span>{</span><br><span class="line">                minTemp = min(dp[i][j] + <span class="number">1</span>,dp[i][j + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = min(minTemp,dp[i + <span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[a.size()][b.size()]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h2 id="&#x6700;&#x957F;&#x5355;&#x589E;&#x5B50;&#x5E8F;&#x5217;"><a href="#&#x6700;&#x957F;&#x5355;&#x589E;&#x5B50;&#x5E8F;&#x5217;" class="headerlink" title="&#x6700;&#x957F;&#x5355;&#x589E;&#x5B50;&#x5E8F;&#x5217;"></a>&#x6700;&#x957F;&#x5355;&#x589E;&#x5B50;&#x5E8F;&#x5217;</h2><p><strong>&#x95EE;&#x9898;&#x63CF;&#x8FF0;</strong><br>&#x7ED9;&#x51FA;&#x957F;&#x5EA6;&#x4E3A;N&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x627E;&#x51FA;&#x8FD9;&#x4E2A;&#x6570;&#x7EC4;&#x7684;&#x6700;&#x957F;&#x9012;&#x589E;&#x5B50;&#x5E8F;&#x5217;&#x3002;(&#x9012;&#x589E;&#x5B50;&#x5E8F;&#x5217;&#x662F;&#x6307;&#xFF0C;&#x5B50;&#x5E8F;&#x5217;&#x7684;&#x5143;&#x7D20;&#x662F;&#x9012;&#x589E;&#x7684;&#xFF09;<br>&#x4F8B;&#x5982;&#xFF1A;5 1 6 8 2 4 5 10&#xFF0C;&#x6700;&#x957F;&#x9012;&#x589E;&#x5B50;&#x5E8F;&#x5217;&#x662F;1 2 4 5 10&#x3002;<br><strong>&#x8F93;&#x5165;</strong><br>&#x7B2C;1&#x884C;&#xFF1A;1&#x4E2A;&#x6570;N&#xFF0C;N&#x4E3A;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;(2 &lt;= N &lt;= 50000)<br>&#x7B2C;2 - N + 1&#x884C;&#xFF1A;&#x6BCF;&#x884C;1&#x4E2A;&#x6570;&#xFF0C;&#x5BF9;&#x5E94;&#x5E8F;&#x5217;&#x7684;&#x5143;&#x7D20;(-10^9 &lt;= S[i] &lt;= 10^9)<br><strong>&#x8F93;&#x51FA;</strong><br>&#x8F93;&#x51FA;&#x6700;&#x957F;&#x9012;&#x589E;&#x5B50;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;&#x3002;<br><strong>&#x8F93;&#x5165;&#x793A;&#x4F8B;</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">5</span><br><span class="line">1</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<p><strong>&#x8F93;&#x51FA;&#x793A;&#x4F8B;</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></p>
<p><strong>&#x793A;&#x4F8B;&#x4EE3;&#x7801;</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * maxs[x] &#x4E2D;&#x8BB0;&#x5F55;&#x4E86;&#x76EE;&#x524D;&#x5355;&#x8C03;&#x5B50;&#x5E8F;&#x5217;&#x4E2D;&#x957F;&#x5EA6;&#x4E3A;x&#x7684;&#x6240;&#x6709;&#x5B50;&#x5E8F;&#x5217;&#x4E2D;&#xFF0C;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x6700;&#x5C0F;&#x503C;&#x3002;</span><br><span class="line"> * &#x6BD4;&#x5982;&#x5F53;&#x7136;&#x6709;&#x4E24;&#x4E2A;&#x5355;&#x8C03;&#x5B50;&#x5E8F;&#x5217;&#x957F;&#x5EA6;&#x4E3A;2: 1 3; 1 4&#x3002;maxs[2] = 3</span><br><span class="line"> * &#x4EE3;&#x8868;&#x4E86;&#x6700;&#x4F18;&#x60C5;&#x51B5;&#xFF0C;&#x56E0;&#x4E3A;&#x5143;&#x7D20;&#x8D8A;&#x5C0F;&#x7EE7;&#x7EED;&#x5EF6;&#x4F38;&#x7684;&#x6F5C;&#x529B;&#x8D8A;&#x5927;</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateMaxArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;maxs, <span class="keyword">int</span> newNum)</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> left = <span class="number">0</span>, right = maxs.size() - <span class="number">1</span>, mid = left + (right - left) / <span class="number">2</span>; left &lt;= right;) {</span><br><span class="line">        <span class="keyword">if</span> (maxs[mid] &lt; newNum) {</span><br><span class="line">            temp = mid;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (temp != maxs.size() - <span class="number">1</span>) {</span><br><span class="line">        maxs[temp + <span class="number">1</span>] = newNum;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        maxs.insert(maxs.begin() + temp + <span class="number">1</span>, newNum);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> cur;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; maxs(<span class="number">1</span>, INT_MIN);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; cur;</span><br><span class="line">        updateMaxArray(maxs, cur);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (maxs.size() - <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h2 id="0-1&#x80CC;&#x5305;&#x95EE;&#x9898;"><a href="#0-1&#x80CC;&#x5305;&#x95EE;&#x9898;" class="headerlink" title="0-1&#x80CC;&#x5305;&#x95EE;&#x9898;"></a>0-1&#x80CC;&#x5305;&#x95EE;&#x9898;</h2><p><strong>&#x95EE;&#x9898;&#x63CF;&#x8FF0;</strong><br>&#x5728;N&#x4EF6;&#x7269;&#x54C1;&#x53D6;&#x51FA;&#x82E5;&#x5E72;&#x4EF6;&#x653E;&#x5728;&#x5BB9;&#x91CF;&#x4E3A;W&#x7684;&#x80CC;&#x5305;&#x91CC;&#xFF0C;&#x6BCF;&#x4EF6;&#x7269;&#x54C1;&#x7684;&#x4F53;&#x79EF;&#x4E3A;W1&#xFF0C;W2&#x2026;&#x2026;Wn&#xFF08;Wi&#x4E3A;&#x6574;&#x6570;&#xFF09;&#xFF0C;&#x4E0E;&#x4E4B;&#x76F8;&#x5BF9;&#x5E94;&#x7684;&#x4EF7;&#x503C;&#x4E3A;P1,P2&#x2026;&#x2026;Pn&#xFF08;Pi&#x4E3A;&#x6574;&#x6570;&#xFF09;&#x3002;&#x6C42;&#x80CC;&#x5305;&#x80FD;&#x591F;&#x5BB9;&#x7EB3;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x3002;<br><strong>&#x8F93;&#x5165;</strong><br>&#x7B2C;1&#x884C;&#xFF0C;2&#x4E2A;&#x6574;&#x6570;&#xFF0C;N&#x548C;W&#x4E2D;&#x95F4;&#x7528;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002;N&#x4E3A;&#x7269;&#x54C1;&#x7684;&#x6570;&#x91CF;&#xFF0C;W&#x4E3A;&#x80CC;&#x5305;&#x7684;&#x5BB9;&#x91CF;&#x3002;(1 &lt;= N &lt;= 100&#xFF0C;1 &lt;= W &lt;= 10000)<br>&#x7B2C;2 - N + 1&#x884C;&#xFF0C;&#x6BCF;&#x884C;2&#x4E2A;&#x6574;&#x6570;&#xFF0C;Wi&#x548C;Pi&#xFF0C;&#x5206;&#x522B;&#x662F;&#x7269;&#x54C1;&#x7684;&#x4F53;&#x79EF;&#x548C;&#x7269;&#x54C1;&#x7684;&#x4EF7;&#x503C;&#x3002;(1 &lt;= Wi, Pi &lt;= 10000)<br><strong>&#x8F93;&#x51FA;</strong><br>&#x8F93;&#x51FA;&#x53EF;&#x4EE5;&#x5BB9;&#x7EB3;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x3002;<br><strong>&#x8F93;&#x5165;&#x793A;&#x4F8B;</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 6</span><br><span class="line">2 5</span><br><span class="line">3 8</span><br><span class="line">4 9</span><br></pre></td></tr></table></figure>
<p><strong>&#x8F93;&#x51FA;&#x793A;&#x4F8B;</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">14</span><br></pre></td></tr></table></figure></p>
<p><strong>&#x793A;&#x4F8B;&#x4EE3;&#x7801;</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">101</span>][<span class="number">10001</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * dp[i][j] -&gt; &#x5728;&#x524D;&#x4E2A;&#x7269;&#x54C1;&#x4E2D;&#x4EFB;&#x610F;&#x9009;&#x53D6;&#xFF0C;&#x5BB9;&#x91CF;&#x4E0D;&#x8D85;&#x8FC7;j&#x7684;&#x7269;&#x54C1;&#x6700;&#x5927;&#x4EF7;&#x503C;</span><br><span class="line"> * dp[i][j] = dp[i-1][j] &#x7B2C;i&#x4E2A;&#x7269;&#x54C1;&#x7684;&#x91CD;&#x91CF;&#x5927;&#x4E8E;j</span><br><span class="line"> * dp[i][j] = max(dp[i-1][j],dp[i-1][j-w[i]] + p[i]) &#x5426;&#x5219;</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; w(n + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; w[i] &gt;&gt; p[i];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j++){</span><br><span class="line">            <span class="keyword">if</span>(w[i] &lt;= j){</span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j],dp[i - <span class="number">1</span>][j - w[i]] + p[i]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span>{</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[n][m] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h2 id="&#x6B63;&#x6574;&#x6570;&#x5206;&#x7EC4;"><a href="#&#x6B63;&#x6574;&#x6570;&#x5206;&#x7EC4;" class="headerlink" title="&#x6B63;&#x6574;&#x6570;&#x5206;&#x7EC4;"></a>&#x6B63;&#x6574;&#x6570;&#x5206;&#x7EC4;</h2><p><strong>&#x95EE;&#x9898;&#x63CF;&#x8FF0;</strong><br>&#x5C06;&#x4E00;&#x5806;&#x6B63;&#x6574;&#x6570;&#x5206;&#x4E3A;2&#x7EC4;&#xFF0C;&#x8981;&#x6C42;2&#x7EC4;&#x7684;&#x548C;&#x76F8;&#x5DEE;&#x6700;&#x5C0F;&#x3002;<br>&#x4F8B;&#x5982;&#xFF1A;1 2 3 4 5&#xFF0C;&#x5C06;1 2 4&#x5206;&#x4E3A;1&#x7EC4;&#xFF0C;3 5&#x5206;&#x4E3A;1&#x7EC4;&#xFF0C;&#x4E24;&#x7EC4;&#x548C;&#x76F8;&#x5DEE;1&#xFF0C;&#x662F;&#x6240;&#x6709;&#x65B9;&#x6848;&#x4E2D;&#x76F8;&#x5DEE;&#x6700;&#x5C11;&#x7684;&#x3002;<br><strong>&#x8F93;&#x5165;</strong><br>&#x7B2C;1&#x884C;&#xFF1A;&#x4E00;&#x4E2A;&#x6570;N&#xFF0C;N&#x4E3A;&#x6B63;&#x6574;&#x6570;&#x7684;&#x6570;&#x91CF;&#x3002;<br>&#x7B2C;2 - N+1&#x884C;&#xFF0C;N&#x4E2A;&#x6B63;&#x6574;&#x6570;&#x3002;<br>(N &lt;= 100, &#x6240;&#x6709;&#x6B63;&#x6574;&#x6570;&#x7684;&#x548C; &lt;= 10000)<br><strong>&#x8F93;&#x51FA;</strong><br>&#x8F93;&#x51FA;&#x8FD9;&#x4E2A;&#x6700;&#x5C0F;&#x5DEE;<br><strong>&#x8F93;&#x5165;&#x793A;&#x4F8B;</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<p><strong>&#x8F93;&#x51FA;&#x793A;&#x4F8B;</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure></p>
<p><strong>&#x793A;&#x4F8B;&#x4EE3;&#x7801;</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * f[i][j] -&gt; &#x5728;&#x524D;i&#x4E2A;&#x6570;&#x4E2D;&#x9009;&#x53D6;&#x4E00;&#x4E9B;&#x6570;&#xFF0C;&#x603B;&#x548C;&#x4E0D;&#x8D85;&#x8FC7;j&#x7684;&#x6700;&#x5927;&#x503C;</span><br><span class="line"> * f[i][j] = f[i-1][j]  &#x7B2C;i&#x4E2A;&#x6570;&#x5927;&#x4E8E;j</span><br><span class="line"> * f[i][j] = max(f[i - 1][j],f[i - 1][j - nums[i - 1]] + nums[i - 1]) &#x5426;&#x5219;</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums(n);</span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; nums[i];</span><br><span class="line">        total = total+ nums[i];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> half = total / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; f(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) {</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp(half + <span class="number">1</span>);</span><br><span class="line">        f[i] = temp;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;::iterator fIter = f.begin();</span><br><span class="line">    fill((*fIter).begin(),(*fIter).end(),<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= half;j++){</span><br><span class="line">            <span class="keyword">if</span>(nums[i - <span class="number">1</span>] &gt; j){</span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span>{</span><br><span class="line">                f[i][j] = max(f[i - <span class="number">1</span>][j],f[i - <span class="number">1</span>][j - nums[i - <span class="number">1</span>]] + nums[i - <span class="number">1</span>]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (total - <span class="number">2</span>*f[n][half])  &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h1 id="&#x8FDB;&#x9636;&#x9898;&#x76EE;"><a href="#&#x8FDB;&#x9636;&#x9898;&#x76EE;" class="headerlink" title="&#x8FDB;&#x9636;&#x9898;&#x76EE;"></a>&#x8FDB;&#x9636;&#x9898;&#x76EE;</h1><h2 id="&#x6700;&#x5927;&#x5B50;&#x77E9;&#x9635;&#x548C;"><a href="#&#x6700;&#x5927;&#x5B50;&#x77E9;&#x9635;&#x548C;" class="headerlink" title="&#x6700;&#x5927;&#x5B50;&#x77E9;&#x9635;&#x548C;"></a>&#x6700;&#x5927;&#x5B50;&#x77E9;&#x9635;&#x548C;</h2><p><strong>&#x95EE;&#x9898;&#x63CF;&#x8FF0;</strong><br>&#x4E00;&#x4E2A;M*N&#x7684;&#x77E9;&#x9635;&#xFF0C;&#x627E;&#x5230;&#x6B64;&#x77E9;&#x9635;&#x7684;&#x4E00;&#x4E2A;&#x5B50;&#x77E9;&#x9635;&#xFF0C;&#x5E76;&#x4E14;&#x8FD9;&#x4E2A;&#x5B50;&#x77E9;&#x9635;&#x7684;&#x5143;&#x7D20;&#x7684;&#x548C;&#x662F;&#x6700;&#x5927;&#x7684;&#xFF0C;&#x8F93;&#x51FA;&#x8FD9;&#x4E2A;&#x6700;&#x5927;&#x7684;&#x503C;&#x3002;<br>&#x4F8B;&#x5982;&#xFF1A;3*3&#x7684;&#x77E9;&#x9635;&#xFF1A;<br>-1 3 -1<br>2 -1 3<br>-3 1 2<br>&#x548C;&#x6700;&#x5927;&#x7684;&#x5B50;&#x77E9;&#x9635;&#x662F;&#xFF1A;<br>3 -1<br>-1 3<br>1 2<br><strong>&#x8F93;&#x5165;</strong><br>&#x7B2C;1&#x884C;&#xFF1A;M&#x548C;N&#xFF0C;&#x4E2D;&#x95F4;&#x7528;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#xFF08;2 &lt;= M,N &lt;= 500)&#x3002;<br>&#x7B2C;2 - N + 1&#x884C;&#xFF1A;&#x77E9;&#x9635;&#x4E2D;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x6BCF;&#x884C;M&#x4E2A;&#x6570;&#xFF0C;&#x4E2D;&#x95F4;&#x7528;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002;(-10^9 &lt;= M[i] &lt;= 10^9)<br><strong>&#x8F93;&#x51FA;</strong><br>&#x8F93;&#x51FA;&#x548C;&#x7684;&#x6700;&#x5927;&#x503C;&#x3002;&#x5982;&#x679C;&#x6240;&#x6709;&#x6570;&#x90FD;&#x662F;&#x8D1F;&#x6570;&#xFF0C;&#x5C31;&#x8F93;&#x51FA;0&#x3002;<br><strong>&#x8F93;&#x5165;&#x793A;&#x4F8B;</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 3</span><br><span class="line">-1 3 -1</span><br><span class="line">2 -1 3</span><br><span class="line">-3 1 2</span><br></pre></td></tr></table></figure></p>
<p><strong>&#x8F93;&#x51FA;&#x793A;&#x4F8B;</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure></p>
<p><strong>&#x4EE3;&#x7801;&#x8BF4;&#x660E;</strong><br>&#x8FD9;&#x9053;&#x9898;&#x76EE;&#x4E0E;&#x57FA;&#x7840;&#x9898;&#x76EE;&#x4E2D;&#x7684;&#x6700;&#x5927;&#x5B50;&#x6BB5;&#x548C;&#x6709;&#x4E9B;&#x50CF;&#xFF0C;&#x4F46;&#x672C;&#x9898;&#x662F;&#x4E8C;&#x7EF4;&#x7A7A;&#x95F4;&#x3002;&#x4F46;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4E00;&#x4E9B;&#x624B;&#x6BB5;&#x5C06;&#x5176;&#x8F6C;&#x5316;&#x4E3A;&#x4E00;&#x7EF4;&#x7A7A;&#x95F4;&#x3002;<br>&#x8BBE;&#x60F3;&#xFF0C;&#x6574;&#x4E2A;&#x77E9;&#x9635;&#x6709;3&#x884C;&#xFF0C;&#x6700;&#x5927;&#x5B50;&#x77E9;&#x9635;&#x53EF;&#x80FD;&#x7684;&#x884C;&#x6570;1/2/3; &#x77E9;&#x9635;&#x6570;&#x7EC4;&#x4E3A;a[i][j]:</p>
<ul>
<li>&#x77E9;&#x9635;&#x884C;&#x6570;&#x4E3A;1&#xFF1A;&#x5206;&#x522B;&#x6C42;&#x7B2C;&#x4E00;&#x884C;&#x3001;&#x7B2C;&#x4E8C;&#x884C;&#x3001;&#x7B2C;&#x4E09;&#x884C;&#x7684;&#x6700;&#x5927;&#x5B50;&#x6BB5;&#x548C;max1,max2,max3,&#x90A3;&#x4E48;max(max1,max2,max3)&#x5373;&#x4E3A;&#x6700;&#x5927;&#x5B50;&#x77E9;&#x9635;&#x548C;</li>
<li>&#x77E9;&#x9635;&#x884C;&#x6570;&#x4E3A;2&#xFF1A;&#x6700;&#x5927;&#x5B50;&#x77E9;&#x9635;&#x51FA;&#x73B0;&#x5728;&#x7B2C;1-2&#x884C;&#x6216;&#x7B2C;2-3&#x884C;&#xFF0C;&#x53EA;&#x6709;&#x8FD9;&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#x3002;&#x5982;&#x679C;&#x6709;&#x4E00;&#x4E2A;&#x4E00;&#x7EF4;&#x6570;&#x7EC4;total:<ul>
<li>total[k] = a[0][k] + a[1][k] total&#x6700;&#x5927;&#x5B57;&#x6BB5;&#x548C;max1</li>
<li>total[k] = a[1][k] + a[2][k] total&#x6700;&#x5927;&#x5B57;&#x6BB5;&#x548C;max2</li>
<li>&#x90A3;&#x4E48;max = max(max1,max2)&#x5373;&#x4E3A;&#x6700;&#x5927;&#x5B50;&#x77E9;&#x9635;&#x548C;</li>
</ul>
</li>
<li>&#x77E9;&#x9635;&#x884C;&#x6570;&#x4E3A;3&#xFF1A;&#x6700;&#x5927;&#x5B50;&#x77E9;&#x9635;&#x51FA;&#x73B0;&#x5728;&#x7B2C;1-3&#x884C;&#xFF0C;&#x53EA;&#x6709;&#x4E00;&#x79CD;&#x60C5;&#x51B5;&#x3002;&#x5982;&#x679C;&#x6709;&#x4E00;&#x4E2A;&#x4E00;&#x7EF4;&#x6570;&#x7EC4;total:<ul>
<li>total[k] = a[0][k] + a[1][k] + a[2][k] total&#x6700;&#x5927;&#x5B57;&#x6BB5;&#x548C;max</li>
<li>&#x90A3;&#x4E48;max&#x5373;&#x4E3A;&#x6700;&#x5927;&#x5B50;&#x77E9;&#x9635;&#x548C;</li>
</ul>
</li>
</ul>
<p>&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x662F;&#x4E0D;&#x662F;&#x53EF;&#x4EE5;&#x611F;&#x53D7;&#x5230;&#x4E00;&#x4E9B;&#x542F;&#x53D1;&#xFF1F;&#x5C06; <strong>&#x7B2C;i&#x884C;&#x5230;&#x7B2C;j&#x884C;&#x538B;&#x7F29;&#x4E3A;&#x4E00;&#x884C;(&#x6C42;&#x548C;),&#x5373;&#x53EF;&#x4EE5;&#x8F6C;&#x5316;&#x4E3A;&#x6C42;&#x89E3;&#x6700;&#x5927;&#x5B50;&#x6BB5;&#x548C;,&#x6B64;&#x65F6;&#x53EF;&#x83B7;&#x5F97;&#x884C;&#x6570;&#x4E3A;(j-i+1)&#x65F6;&#x7684;&#x6700;&#x5927;&#x5B50;&#x77E9;&#x9635;&#x548C;</strong><br>&#x5047;&#x8BBE;n*m&#x7684;&#x77E9;&#x9635;&#x7684;&#x6700;&#x5927;&#x5B50;&#x77E9;&#x9635;&#x7684;&#x884C;&#x6570;&#x4E3A;i(1&lt;=i&lt;=n) &#x5982;&#x679C;&#x6709;&#x4E00;&#x4E2A;&#x4E00;&#x7EF4;&#x6570;&#x7EC4;total:</p>
<ul>
<li>total[k] = a[0][k] + &#x2026; +a[i-1][k] total&#x6700;&#x5927;&#x5B57;&#x6BB5;&#x548C;max1</li>
<li>&#x2026;</li>
<li>total[k] = a[n-i][k] + &#x2026; + a[n - 1][k] total&#x6700;&#x5927;&#x5B57;&#x6BB5;&#x548C;max..</li>
<li>&#x90A3;&#x4E48;max = max(max1,&#x2026;)&#x5373;&#x4E3A;&#x6700;&#x5927;&#x5B50;&#x77E9;&#x9635;&#x548C;</li>
</ul>
<p><strong>&#x793A;&#x4F8B;&#x4EE3;&#x7801;</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line">* &#x6C42;&#x6700;&#x5927;&#x5B57;&#x6BB5;&#x548C;</span><br><span class="line">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubSequence</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (arr.size() &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">int</span> maxSub = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.size(); i++) {</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; <span class="number">0</span>) {</span><br><span class="line">                temp = temp + arr[i];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                temp = arr[i];</span><br><span class="line">            }</span><br><span class="line">            maxSub = max(maxSub, temp);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> maxSub;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&#x521D;&#x59CB;&#x5316;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; nums(n);</span><br><span class="line">    <span class="comment">// total[i][k] = nums[0][k] + ... + nums[i][k];</span></span><br><span class="line">    <span class="comment">// &#x6240;&#x4EE5;nums[i..j][k] = total[j][k]-total[i - 1][k]</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; total(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; row(m);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; totalRow(m);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) {</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; row[j];</span><br><span class="line">                totalRow[j] = row[j];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) {</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; row[j];</span><br><span class="line">                totalRow[j] = total[i - <span class="number">1</span>][j] + row[j];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        nums[i] = row;</span><br><span class="line">        total[i] = totalRow;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxSub = INT_MIN;</span><br><span class="line">    <span class="comment">// &#x6700;&#x5927;&#x5B50;&#x77E9;&#x9635;&#x884C;&#x6570;&#x4E3A; i</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; k++) {</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) {</span><br><span class="line">                    result[k] = total[j][k];</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    result[k] = total[j][k] - total[i - <span class="number">1</span>][k];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">int</span> maxTemp = maxSubSequence(result);</span><br><span class="line">            <span class="keyword">if</span> (maxTemp &gt; maxSub) {</span><br><span class="line">                maxSub = maxTemp;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; maxSub &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<p><strong>&#x53C2;&#x8003;</strong></p>
<blockquote>
<p><a href="http://blog.csdn.net/beiyeqingteng/article/details/7056687" target="_blank" rel="external">http://blog.csdn.net/beiyeqingteng/article/details/7056687</a></p>
</blockquote>
<h2 id="&#x5FAA;&#x73AF;&#x6570;&#x7EC4;&#x6700;&#x5927;&#x5B57;&#x6BB5;&#x548C;"><a href="#&#x5FAA;&#x73AF;&#x6570;&#x7EC4;&#x6700;&#x5927;&#x5B57;&#x6BB5;&#x548C;" class="headerlink" title="&#x5FAA;&#x73AF;&#x6570;&#x7EC4;&#x6700;&#x5927;&#x5B57;&#x6BB5;&#x548C;"></a>&#x5FAA;&#x73AF;&#x6570;&#x7EC4;&#x6700;&#x5927;&#x5B57;&#x6BB5;&#x548C;</h2><p><strong>&#x95EE;&#x9898;&#x63CF;&#x8FF0;</strong><br>N&#x4E2A;&#x6574;&#x6570;&#x7EC4;&#x6210;&#x7684;&#x5FAA;&#x73AF;&#x5E8F;&#x5217;a[1],a[2],a[3],&#x2026;,a[n]&#xFF0C;&#x6C42;&#x8BE5;&#x5E8F;&#x5217;&#x5982;a[i]+a[i+1]+&#x2026;+a[j]&#x7684;&#x8FDE;&#x7EED;&#x7684;&#x5B50;&#x6BB5;&#x548C;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF08;&#x5FAA;&#x73AF;&#x5E8F;&#x5217;&#x662F;&#x6307;n&#x4E2A;&#x6570;&#x56F4;&#x6210;&#x4E00;&#x4E2A;&#x5708;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x8003;&#x8651;a[n-1],a[n],a[1],a[2]&#x8FD9;&#x6837;&#x7684;&#x5E8F;&#x5217;&#xFF09;&#x3002;&#x5F53;&#x6240;&#x7ED9;&#x7684;&#x6574;&#x6570;&#x5747;&#x4E3A;&#x8D1F;&#x6570;&#x65F6;&#x548C;&#x4E3A;0&#x3002;<br>&#x4F8B;&#x5982;&#xFF1A;-2,11,-4,13,-5,-2&#xFF0C;&#x548C;&#x6700;&#x5927;&#x7684;&#x5B50;&#x6BB5;&#x4E3A;&#xFF1A;11,-4,13&#x3002;&#x548C;&#x4E3A;20&#x3002;<br><strong>&#x8F93;&#x5165;</strong><br>&#x7B2C;1&#x884C;&#xFF1A;&#x6574;&#x6570;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;N&#xFF08;2 &lt;= N &lt;= 50000)<br>&#x7B2C;2 - N+1&#x884C;&#xFF1A;N&#x4E2A;&#x6574;&#x6570; (-10^9 &lt;= S[i] &lt;= 10^9)<br><strong>&#x8F93;&#x51FA;</strong><br>&#x8F93;&#x51FA;&#x5FAA;&#x73AF;&#x6570;&#x7EC4;&#x7684;&#x6700;&#x5927;&#x5B50;&#x6BB5;&#x548C;&#x3002;<br><strong>&#x8F93;&#x5165;&#x793A;&#x4F8B;</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">-2</span><br><span class="line">11</span><br><span class="line">-4</span><br><span class="line">13</span><br><span class="line">-5</span><br><span class="line">-2</span><br></pre></td></tr></table></figure></p>
<p><strong>&#x8F93;&#x51FA;&#x793A;&#x4F8B;</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure></p>
<p><strong>&#x4EE3;&#x7801;&#x8BF4;&#x660E;</strong></p>
<ul>
<li>&#x5982;&#x679C;&#x6700;&#x5927;&#x5B57;&#x6BB5;&#x548C;&#x4E0D;&#x662F;&#x8DE8;&#x8D8A;&#x6570;&#x7EC4;&#x5934;&#x5C3E;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x5373;&#x4E3A;&#x666E;&#x901A;&#x7684;&#x6700;&#x5927;&#x5B57;&#x6BB5;&#x548C;&#x6C42;&#x89E3;&#x95EE;&#x9898;&#x3002;</li>
<li>&#x5982;&#x679C;&#x6700;&#x5927;&#x5B50;&#x6BB5;&#x548C;&#x8DE8;&#x8D8A;&#x6570;&#x7EC4;&#x5934;&#x5C3E;&#xFF0C;&#x5373; arr[j&#x2026;n-1] + arr[0&#x2026;i];&#x6613;&#x5F97;&#x5B50;&#x6BB5;arr[i+1&#x2026;j-1] &#x4E3A;&#x6700;&#x5C0F;&#x5B50;&#x6BB5;&#x548C;&#xFF0C;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E5F;&#x5C31;&#x53EF;&#x4EE5;&#x8F6C;&#x5316;&#x4E3A; total[0&#x2026;n-1] - minSubSequence</li>
<li>&#x4E8C;&#x8005;&#x53D6;max&#x5373;&#x4E3A;&#x5FAA;&#x73AF;&#x6570;&#x7EC4;&#x6700;&#x5927;&#x5B57;&#x6BB5;&#x548C;</li>
</ul>
<p><strong>&#x793A;&#x4F8B;&#x4EE3;&#x7801;</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    ll cur,preMax,preMin;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; preMax;</span><br><span class="line">    ll total = preMax;</span><br><span class="line">    ll maxSub = preMax;</span><br><span class="line">    ll minSub = preMax;</span><br><span class="line">    preMin = preMax;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++){</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; cur;</span><br><span class="line">        total = total + cur;</span><br><span class="line">        <span class="keyword">if</span>(preMax &gt; <span class="number">0</span>){</span><br><span class="line">            preMax = preMax + cur;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            preMax = cur;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(preMin &lt; <span class="number">0</span>){</span><br><span class="line">            preMin = preMin + cur;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            preMin = cur;</span><br><span class="line">        }</span><br><span class="line">        maxSub = max(maxSub,preMax);</span><br><span class="line">        minSub = min(minSub,preMin);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max(maxSub,total - minSub) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h2 id="&#x591A;&#x91CD;&#x80CC;&#x5305;&#x95EE;&#x9898;"><a href="#&#x591A;&#x91CD;&#x80CC;&#x5305;&#x95EE;&#x9898;" class="headerlink" title="&#x591A;&#x91CD;&#x80CC;&#x5305;&#x95EE;&#x9898;"></a>&#x591A;&#x91CD;&#x80CC;&#x5305;&#x95EE;&#x9898;</h2><p><strong>&#x95EE;&#x9898;&#x63CF;&#x8FF0;</strong><br>&#x6709;N&#x79CD;&#x7269;&#x54C1;&#xFF0C;&#x6BCF;&#x79CD;&#x7269;&#x54C1;&#x7684;&#x6570;&#x91CF;&#x4E3A;C1&#xFF0C;C2&#x2026;&#x2026;Cn&#x3002;&#x4ECE;&#x4E2D;&#x4EFB;&#x9009;&#x82E5;&#x5E72;&#x4EF6;&#x653E;&#x5728;&#x5BB9;&#x91CF;&#x4E3A;W&#x7684;&#x80CC;&#x5305;&#x91CC;&#xFF0C;&#x6BCF;&#x79CD;&#x7269;&#x54C1;&#x7684;&#x4F53;&#x79EF;&#x4E3A;W1&#xFF0C;W2&#x2026;&#x2026;Wn&#xFF08;Wi&#x4E3A;&#x6574;&#x6570;&#xFF09;&#xFF0C;&#x4E0E;&#x4E4B;&#x76F8;&#x5BF9;&#x5E94;&#x7684;&#x4EF7;&#x503C;&#x4E3A;P1,P2&#x2026;&#x2026;Pn&#xFF08;Pi&#x4E3A;&#x6574;&#x6570;&#xFF09;&#x3002;&#x6C42;&#x80CC;&#x5305;&#x80FD;&#x591F;&#x5BB9;&#x7EB3;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x3002;<br><strong>&#x8F93;&#x5165;</strong><br>&#x7B2C;1&#x884C;&#xFF0C;2&#x4E2A;&#x6574;&#x6570;&#xFF0C;N&#x548C;W&#x4E2D;&#x95F4;&#x7528;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002;N&#x4E3A;&#x7269;&#x54C1;&#x7684;&#x79CD;&#x7C7B;&#xFF0C;W&#x4E3A;&#x80CC;&#x5305;&#x7684;&#x5BB9;&#x91CF;&#x3002;(1 &lt;= N &lt;= 100&#xFF0C;1 &lt;= W &lt;= 50000)<br>&#x7B2C;2 - N + 1&#x884C;&#xFF0C;&#x6BCF;&#x884C;3&#x4E2A;&#x6574;&#x6570;&#xFF0C;Wi&#xFF0C;Pi&#x548C;Ci&#x5206;&#x522B;&#x662F;&#x7269;&#x54C1;&#x4F53;&#x79EF;&#x3001;&#x4EF7;&#x503C;&#x548C;&#x6570;&#x91CF;&#x3002;(1 &lt;= Wi, Pi &lt;= 10000&#xFF0C; 1 &lt;= Ci &lt;= 200)<br><strong>&#x8F93;&#x51FA;</strong><br>&#x8F93;&#x51FA;&#x53EF;&#x4EE5;&#x5BB9;&#x7EB3;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x3002;<br><strong>&#x8F93;&#x5165;&#x793A;&#x4F8B;</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 6</span><br><span class="line">2 2 5</span><br><span class="line">3 3 8</span><br><span class="line">1 4 1</span><br></pre></td></tr></table></figure></p>
<p><strong>&#x8F93;&#x51FA;&#x793A;&#x4F8B;</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure></p>
<p><strong>&#x4EE3;&#x7801;&#x8BF4;&#x660E;</strong></p>
<ul>
<li>&#x5C06;&#x591A;&#x91CD;&#x80CC;&#x5305;&#x5206;&#x89E3;&#x4E3A;0-1&#x80CC;&#x5305;</li>
<li>&#x5229;&#x7528;&#x4E8C;&#x8FDB;&#x5236;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x6570;&#x90FD;&#x53EF;&#x4EE5;&#x7531;2&#x7684;&#x5E42;&#x6B21;&#x8868;&#x793A;&#xFF1A;N = 1 + 2 + 4 + &#x2026; + 2^i + (left);</li>
<li>&#x5373;&#x6BCF;&#x4E2A;&#x7269;&#x54C1;&#x90FD;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x89E3;&#x3002;&#x5047;&#x8BBE;&#x7269;&#x54C1;&#x7684;&#x6570;&#x91CF;&#x4E3A;14,&#x5219;&#x4ECE;14&#x4E2A;&#x7269;&#x54C1;&#x4E2D;&#x4EFB;&#x53D6;N&#x4E2A;&#x7269;&#x54C1;&#x90FD;&#x53EF;&#x4EE5;&#x8F6C;&#x5316;&#x4E3A;&#x7531;&#x4EE5;&#x4E0B;&#x7269;&#x54C1;&#x7EC4;&#x5408;(&#x4EE5;&#x4E0B;&#x7269;&#x54C1;&#x5728;&#x6BCF;&#x6B21;&#x7EC4;&#x5408;&#x4E2D;&#x53EA;&#x80FD;&#x53D6;&#x4E00;&#x6B21;)<ul>
<li>1^0 &#x91CD;&#x91CF;&#x662F;Wi&#xFF0C;&#x4F53;&#x79EF;&#x662F;Vi</li>
<li>2^2 &#x91CD;&#x91CF;&#x662F;2 * Wi , &#x4F53;&#x79EF;&#x662F;2 * Vi</li>
<li>2^3 &#x91CD;&#x91CF;&#x662F;4 * Wi , &#x4F53;&#x79EF;&#x662F;4 * Vi</li>
<li>14 - (1+2+4) &#x91CD;&#x91CF;&#x662F;7 * Wi , &#x4F53;&#x79EF;&#x662F;7 * Vi</li>
</ul>
</li>
<li>&#x5206;&#x89E3;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x518D;&#x5229;&#x7528;0-1&#x80CC;&#x5305;&#x601D;&#x8DEF;&#x6C42;&#x89E3;</li>
</ul>
<p><strong>&#x793A;&#x4F8B;&#x4EE3;&#x7801;</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> {</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">int</span> p;</span><br><span class="line">} Thing;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="keyword">int</span> n,w;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; w;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//&#x5206;&#x89E3;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Thing&gt; things;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++){</span><br><span class="line">        Thing thing;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; thing.w &gt;&gt; thing.p;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= num;k &lt;&lt;= <span class="number">1</span>){</span><br><span class="line">            Thing temp;</span><br><span class="line">            temp.w = k * thing.w;</span><br><span class="line">            temp.p = k * thing.p;</span><br><span class="line">            num -= k;</span><br><span class="line">            things.push_back(temp);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(num &gt; <span class="number">0</span>){</span><br><span class="line">            thing.w = num * thing.w;</span><br><span class="line">            thing.p = num * thing.p;</span><br><span class="line">            things.push_back(thing);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//0-1&#x80CC;&#x5305;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; &gt; dp(things.size() + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(w + <span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; things.size();i++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= w;j++){</span><br><span class="line">            <span class="keyword">if</span>(j &lt; things[i].w){</span><br><span class="line">                dp[i + <span class="number">1</span>][j] = dp[i][j];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span>{</span><br><span class="line">                dp[i + <span class="number">1</span>][j] = max(dp[i][j],dp[i][j - things[i].w] + things[i].p);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[things.size()][w]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p>1.<a href="http://www.51nod.com/tutorial/index.html#!tutorialId=1" target="_blank" rel="external">&#x52A8;&#x6001;&#x89C4;&#x5212;&#x57FA;&#x7840;&#x7BC7;</a><br>2.<a href="http://www.51nod.com/tutorial/index.html#!tutorialId=2" target="_blank" rel="external">&#x52A8;&#x6001;&#x89C4;&#x5212;&#x5165;&#x95E8;&#x7BC7;</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[编程之美复赛总结]]></title>
      <url>http://zongwenlong.github.io/2016/05/18/%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E%E5%A4%8D%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>&#x2003;&#x2003;&#x4E0A;&#x5468;&#x53C2;&#x52A0;&#x7F16;&#x7A0B;&#x4E4B;&#x7F8E;&#x590D;&#x8D5B;&#xFF0C;&#x5728;&#x548C;&#x4E24;&#x4E2A;&#x5C0F;&#x4F19;&#x4F34;&#x7684;&#x5171;&#x540C;&#x52AA;&#x529B;&#x4E0B;&#xFF0C;&#x6700;&#x7EC8;&#x590D;&#x8D5B;&#x53D6;&#x5F97;&#x4E86;&#x7B2C;22&#x540D;&#x7684;&#x6210;&#x7EE9;&#xFF0C;&#x5F88;&#x9057;&#x61BE;&#x6CA1;&#x6709;&#x8FDB;&#x5165;&#x51B3;&#x8D5B;&#x3002;&#x4F46;&#x5728;&#x8FD9;&#x6B21;&#x6BD4;&#x8D5B;&#x4E2D;&#xFF0C;&#x4E5F;&#x5B66;&#x5230;&#x4E86;&#x8BB8;&#x591A;&#x4E1C;&#x897F;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x603B;&#x7ED3;&#x4E00;&#x4E0B;&#x3002;</p>
<h1 id="&#x8D5B;&#x9898;&#x4ECB;&#x7ECD;"><a href="#&#x8D5B;&#x9898;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x8D5B;&#x9898;&#x4ECB;&#x7ECD;"></a>&#x8D5B;&#x9898;&#x4ECB;&#x7ECD;</h1><p>Microsoft Academic Graph (MAG) is a large heterogeneous graph containing entities such as authors, papers, journals, conferences and relations between them. Microsoft provides <a href="https://www.microsoft.com/cognitive-services/en-us/academic-knowledge-api" target="_blank" rel="external">Academic Knowledge API</a> for this contest. The Entity attributes are defined <a href="https://www.microsoft.com/cognitive-services/en-us/academic-knowledge-api/documentation/EntityAttributes" target="_blank" rel="external">here</a>.</p>
<p>Participants are supposed to provide a REST service endpoint that can find all the 1-hop, 2-hop, and 3-hop graph paths connecting a given pair of entity identifiers in MAG. The given pair of entity identifiers could be [Id, Id], [Id, AA.AuId], [AA.AuId, Id], [AA.AuId, AA.AuId]. Each node of a path should be one of the following identifiers: Id, F.Fid, J.JId, C.CId, AA.AuId, AA.AfId. Possible edges (a pair of adjacent nodes) of a path are:<br><img src="/2016/05/18/&#x7F16;&#x7A0B;&#x4E4B;&#x7F8E;&#x590D;&#x8D5B;&#x603B;&#x7ED3;/bop2016-1.png" alt="1 - &#x8282;&#x70B9;&#x95F4;&#x6307;&#x5411;&#x5173;&#x7CFB;&#x8BF4;&#x660E;"><br>For each test case, the REST service endpoint will receive a JSON array via HTTP with a pair of entity identifiers, where the identifiers are 64-bit integers, e.g. [123, 456]. The service endpoint needs to respond with a JSON array within 300 seconds. The response JSON array consists of a list of graph paths in the form of [path1, path2, &#x2026;, pathn], where each path is an array of entity identifiers. For example, if your program finds one 1-hop paths, two 2-hop paths, and one 3-hop paths, the results may look like this: [[123,456], [123,2,456], [123,3,456], [123,4,5,456]]. For a path such as [123,4,5,456], the integers are the identifiers of the entities on the path. After receiving the response, the evaluator will wait for a random period of time before sending the next requests.</p>
<h1 id="&#x8D5B;&#x9898;&#x5206;&#x6790;"><a href="#&#x8D5B;&#x9898;&#x5206;&#x6790;" class="headerlink" title="&#x8D5B;&#x9898;&#x5206;&#x6790;"></a>&#x8D5B;&#x9898;&#x5206;&#x6790;</h1><p><strong>&#x7B80;&#x5355;&#x603B;&#x7ED3;&#xFF1A;</strong>&#x8D5B;&#x9898;&#x7684;&#x6838;&#x5FC3;&#x95EE;&#x9898;&#x5728;&#x4E8E;&#xFF0C;&#x5BFB;&#x627E;&#x4ECE;&#x7ED9;&#x5B9A;&#x7684;&#x8D77;&#x70B9;&#x5230;&#x7ED9;&#x5B9A;&#x7684;&#x7EC8;&#x70B9;&#x7684;&#x8DEF;&#x5F84;&#x3002;&#x5176;&#x4E2D;&#x8D77;&#x70B9;&#x548C;&#x7EC8;&#x70B9;&#x53EF;&#x4EE5;&#x662F;&#x8BBA;&#x6587;Id&#x6216;&#x8005;&#x4F5C;&#x8005;AuId,&#x8DEF;&#x5F84;&#x4E2D;&#x7684;&#x8282;&#x70B9;&#x95F4;&#x6307;&#x5411;&#x5173;&#x7CFB;&#x5982;&#x4E0A;&#x56FE;&#x6240;&#x793A;&#xFF0C;&#x8DEF;&#x5F84;&#x7684;&#x957F;&#x5EA6;&#x4E3A;&#x5C0F;&#x4E8E;&#x6216;&#x7B49;&#x4E8E;3&#x3002;</p>
<h2 id="&#x521D;&#x59CB;&#x9636;&#x6BB5;"><a href="#&#x521D;&#x59CB;&#x9636;&#x6BB5;" class="headerlink" title="&#x521D;&#x59CB;&#x9636;&#x6BB5;"></a>&#x521D;&#x59CB;&#x9636;&#x6BB5;</h2><p>&#x2003;&#x2003;&#x521D;&#x59CB;&#x9636;&#x6BB5;&#xFF0C;&#x6211;&#x4EEC;&#x6211;&#x4EEC;&#x8BD5;&#x56FE;&#x4ECE;&#x8D77;&#x70B9;&#x5F00;&#x59CB;&#xFF0C;&#x6839;&#x636E;&#x56FE;1&#x7684;&#x8282;&#x70B9;&#x5173;&#x7CFB;&#x4ECE;&#x524D;&#x5411;&#x540E;&#x62D3;&#x5C55;&#xFF0C;&#x76F4;&#x81F3;&#x627E;&#x5230;&#x7EC8;&#x7ED3;&#x70B9;&#x6216;&#x8DF3;&#x6570;&#x8D85;&#x8FC7;&#x9650;&#x5236;&#x3002;&#x8FD9;&#x662F;&#x4E00;&#x79CD;&#x201C;&#x5927;&#x4E00;&#x7EDF;&#x201D;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x5982;&#x679C;&#x5B58;&#x5728;&#x53EF;&#x884C;&#x65B9;&#x6848;&#xFF0C;&#x5F53;&#x8DF3;&#x6570;&#x9650;&#x5236;&#x4FEE;&#x6539;&#x65F6;&#xFF0C;&#x6B64;&#x7B97;&#x6CD5;&#x4ECD;&#x65E7;&#x5B9E;&#x7528;&#x3002;&#x4E3A;&#x6B64;&#x6211;&#x4EEC;&#x7ED8;&#x5236;&#x4E86;&#x5982;&#x4E0B;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x56FE;&#xFF08;&#x7531;&#x4E8E;&#x65F6;&#x95F4;&#x6709;&#x9650;&#xFF0C;&#x56FE;&#x4E2D;&#x53EF;&#x80FD;&#x6709;&#x67D0;&#x4E9B;&#x7EC6;&#x8282;&#x5B58;&#x5728;&#x95EE;&#x9898;&#xFF09;&#xFF1A;<br><img src="/2016/05/18/&#x7F16;&#x7A0B;&#x4E4B;&#x7F8E;&#x590D;&#x8D5B;&#x603B;&#x7ED3;/bop2016-first_design-1.png" alt=""><br><img src="/2016/05/18/&#x7F16;&#x7A0B;&#x4E4B;&#x7F8E;&#x590D;&#x8D5B;&#x603B;&#x7ED3;/bop2016-first_design-2.png" alt="2 - &#x521D;&#x59CB;&#x9636;&#x6BB5;_&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x793A;&#x610F;&#x56FE;"><br>&#x2003;&#x2003;&#x7ECF;&#x8FC7;&#x521D;&#x6B65;&#x8BBE;&#x8BA1;&#xFF0C;&#x6211;&#x4EEC;&#x6839;&#x636E;&#x8FD9;&#x4E2A;&#x793A;&#x610F;&#x56FE;&#x7F16;&#x5199;&#x51FA;&#x4E86;&#x7B2C;&#x4E00;&#x7248;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x7136;&#x800C;&#x8DD1;&#x51FA;&#x6765;&#x7684;&#x7ED3;&#x679C;&#x5374;&#x8BA9;&#x4EBA;&#x5F88;&#x4E0D;&#x6EE1;&#x610F;&#xFF0C;&#x6709;&#x4E9B;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x6839;&#x672C;&#x6CA1;&#x6709;&#x8BA1;&#x7B97;&#x51FA;&#x7ED3;&#x679C;&#x6216;&#x8005;&#x8BA1;&#x7B97;&#x8D85;&#x65F6;&#x3002;&#x4E8E;&#x662F;&#xFF0C;&#x6211;&#x4EEC;&#x5F00;&#x59CB;&#x8BA8;&#x8BBA;&#x539F;&#x56E0;&#x4EE5;&#x53CA;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002;  </p>
<p><strong>&#x4E3B;&#x8981;&#x539F;&#x56E0;&#xFF1A;</strong>&#x5F53;&#x6211;&#x4EEC;&#x4EE5;id&#x6216;auid&#x4E3A;&#x67E5;&#x8BE2;&#x6761;&#x4EF6;&#x67E5;&#x8BE2;&#x65F6;&#xFF0C;&#x83B7;&#x5F97;&#x7684;&#x6570;&#x636E;&#x91CF;&#x5E76;&#x4E0D;&#x5927;&#xFF0C;&#x4F46;&#x5F53;&#x6211;&#x4EEC;&#x4EE5;FId(&#x7814;&#x7A76;&#x9886;&#x57DF;Id)&#x3001;JId(&#x671F;&#x520A;Id)&#x3001;Cid(&#x4F1A;&#x8BAE;Id)&#x4E3A;&#x67E5;&#x8BE2;&#x6761;&#x4EF6;&#x65F6;&#xFF0C;&#x83B7;&#x53D6;&#x7684;&#x6570;&#x636E;&#x91CF;&#x786E;&#x5B9E;&#x5DE8;&#x5927;&#x7684;&#x3002;&#x5927;&#x5230;&#x6211;&#x4EEC;&#x6839;&#x672C;&#x65E0;&#x6CD5;&#x5904;&#x7406;&#x3002;&#x6240;&#x4EE5;&#x624D;&#x4F1A;&#x51FA;&#x73B0;&#x65E0;&#x6CD5;&#x7EE7;&#x7EED;&#x63A2;&#x8DEF;&#x7684;&#x60C5;&#x51B5;&#x3002;<br><strong>&#x89E3;&#x51B3;&#x65B9;&#x6848;</strong><br>&#x4ECE;&#x4E24;&#x7AEF;&#x51FA;&#x53D1;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x5355;&#x7EAF;&#x7684;&#x4ECE;&#x4E00;&#x7AEF;&#x51FA;&#x53D1;&#xFF0C;&#x5373;&#x4ECE;start&#x548C;end&#x540C;&#x65F6;&#x5411;&#x4E2D;&#x95F4;&#x6C47;&#x805A;&#x3002;&#x4E0D;&#x53BB;&#x8FDB;&#x884C;FId&#x3001;JId&#x3001;FId&#x7684;&#x67E5;&#x8BE2;&#x3002;</p>
<h2 id="&#x8FDB;&#x9636;&#x9636;&#x6BB5;"><a href="#&#x8FDB;&#x9636;&#x9636;&#x6BB5;" class="headerlink" title="&#x8FDB;&#x9636;&#x9636;&#x6BB5;"></a>&#x8FDB;&#x9636;&#x9636;&#x6BB5;</h2><p>&#x2003;&#x2003;&#x6839;&#x636E;&#x4ECE;&#x4E24;&#x7AEF;&#x51FA;&#x53D1;&#x7684;&#x6307;&#x5BFC;&#x601D;&#x60F3;&#xFF0C;&#x4EE5;&#x51CF;&#x5C11;&#x8BF7;&#x6C42;&#x6B21;&#x6570;&#x4E3A;&#x8BBE;&#x8BA1;&#x76EE;&#x6807;&#xFF0C;&#x5206;&#x522B;&#x4E3A;Id-Id/Id-AuId/AuId-Id/AuId-AuId&#x56DB;&#x79CD;&#x60C5;&#x51B5;&#x8FDB;&#x884C;&#x4E86;&#x5982;&#x4E0B;&#x8BBE;&#x8BA1;&#xFF1A;<br><img src="/2016/05/18/&#x7F16;&#x7A0B;&#x4E4B;&#x7F8E;&#x590D;&#x8D5B;&#x603B;&#x7ED3;/id-id.png" alt=""><br><img src="/2016/05/18/&#x7F16;&#x7A0B;&#x4E4B;&#x7F8E;&#x590D;&#x8D5B;&#x603B;&#x7ED3;/id-auid.png" alt=""><br><img src="/2016/05/18/&#x7F16;&#x7A0B;&#x4E4B;&#x7F8E;&#x590D;&#x8D5B;&#x603B;&#x7ED3;/auid-id.png" alt=""><br><img src="/2016/05/18/&#x7F16;&#x7A0B;&#x4E4B;&#x7F8E;&#x590D;&#x8D5B;&#x603B;&#x7ED3;/auid-auid.png" alt="3 - &#x8FDB;&#x9636;&#x9636;&#x6BB5;_&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x793A;&#x610F;&#x56FE;"><br>&#x2003;&#x2003;&#x7ECF;&#x8FC7;&#x8FD9;&#x6B21;&#x8BBE;&#x8BA1;&#xFF0C;&#x6574;&#x4E2A;&#x601D;&#x8DEF;&#x5C31;&#x975E;&#x5E38;&#x6E05;&#x6670;&#x4E86;&#xFF0C;&#x81EA;&#x7136;&#x7A0B;&#x5E8F;&#x4E5F;&#x5C31;&#x6C34;&#x5230;&#x6E20;&#x6210;&#x3002;</p>
<h1 id="&#x9879;&#x76EE;&#x5DE5;&#x7A0B;&#x548C;&#x7BA1;&#x7406;&#x76F8;&#x5173;&#x5185;&#x5BB9;"><a href="#&#x9879;&#x76EE;&#x5DE5;&#x7A0B;&#x548C;&#x7BA1;&#x7406;&#x76F8;&#x5173;&#x5185;&#x5BB9;" class="headerlink" title="&#x9879;&#x76EE;&#x5DE5;&#x7A0B;&#x548C;&#x7BA1;&#x7406;&#x76F8;&#x5173;&#x5185;&#x5BB9;"></a>&#x9879;&#x76EE;&#x5DE5;&#x7A0B;&#x548C;&#x7BA1;&#x7406;&#x76F8;&#x5173;&#x5185;&#x5BB9;</h1><h2 id="&#x9879;&#x76EE;&#x67B6;&#x6784;"><a href="#&#x9879;&#x76EE;&#x67B6;&#x6784;" class="headerlink" title="&#x9879;&#x76EE;&#x67B6;&#x6784;"></a>&#x9879;&#x76EE;&#x67B6;&#x6784;</h2><ul>
<li>RESTFul&#x67B6;&#x6784;&#xFF1A;&#x9009;&#x62E9;SpringMVC&#x6846;&#x67B6;&#x4F5C;&#x4E3A;RESTFul&#x67B6;&#x6784;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#x3002;</li>
<li>JSON&#x89E3;&#x6790;&#xFF1A;FastJSON</li>
<li>Http&#x8BF7;&#x6C42;&#xFF1A;Apache HttpClient</li>
<li>Web&#x670D;&#x52A1;&#x5668;&#xFF1A;Tomcat</li>
<li>&#x9879;&#x76EE;&#x6784;&#x5EFA;&#xFF1A;Maven</li>
</ul>
<h2 id="&#x9879;&#x76EE;&#x4F18;&#x5316;"><a href="#&#x9879;&#x76EE;&#x4F18;&#x5316;" class="headerlink" title="&#x9879;&#x76EE;&#x4F18;&#x5316;"></a>&#x9879;&#x76EE;&#x4F18;&#x5316;</h2><ul>
<li>&#x591A;&#x7EBF;&#x7A0B;&#x4F18;&#x5316;&#xFF1A;&#x91C7;&#x7528;CachedThreadPool&#x7EBF;&#x7A0B;&#x6C60;&#x5BF9;&#x7A0B;&#x5E8F;&#x4F18;&#x5316;&#xFF0C;&#x5B9E;&#x9A8C;&#x53D1;&#x73B0;&#xFF0C;CachedThreadPool&#x8981;&#x4F18;&#x4E8E;FixedThreadPool&#x3002;</li>
<li>Http&#x8BF7;&#x6C42;&#x4F18;&#x5316;&#xFF1A;&#x8FD9;&#x90E8;&#x5206;&#x6709;&#x6240;&#x6B20;&#x7F3A;&#xFF0C;&#x7531;&#x4E8E;&#x758F;&#x5FFD;&#xFF0C;&#x8FD9;&#x90E8;&#x5206;&#x5E76;&#x672A;&#x8FDB;&#x884C;&#x4F18;&#x5316;&#xFF0C;&#x53EF;&#x4EE5;&#x5EFA;&#x7ACB;TCP&#x957F;&#x8FDE;&#x63A5;&#xFF0C;&#x4EE5;&#x51CF;&#x5C11;&#x8FDE;&#x63A5;&#x521B;&#x5EFA;&#x6D88;&#x8017;&#x3002;</li>
</ul>
<h2 id="&#x9879;&#x76EE;&#x6210;&#x5458;&#x4EA4;&#x6D41;&#x76F8;&#x5173;&#x5185;&#x5BB9;"><a href="#&#x9879;&#x76EE;&#x6210;&#x5458;&#x4EA4;&#x6D41;&#x76F8;&#x5173;&#x5185;&#x5BB9;" class="headerlink" title="&#x9879;&#x76EE;&#x6210;&#x5458;&#x4EA4;&#x6D41;&#x76F8;&#x5173;&#x5185;&#x5BB9;"></a>&#x9879;&#x76EE;&#x6210;&#x5458;&#x4EA4;&#x6D41;&#x76F8;&#x5173;&#x5185;&#x5BB9;</h2><ul>
<li>SVN&#xFF1A;&#x8FDB;&#x884C;&#x4EE3;&#x7801;&#x540C;&#x6B65;</li>
<li>OneNote&#xFF1A;&#x8FDB;&#x884C;&#x6587;&#x6863;&#x540C;&#x6B65;&#x548C;&#x4EA4;&#x6D41;</li>
<li>WeChat/QQ&#xFF1A;&#x8FDB;&#x884C;&#x5373;&#x65F6;&#x901A;&#x4FE1;</li>
</ul>
<h2 id="&#x9879;&#x76EE;&#x4EE3;&#x7801;"><a href="#&#x9879;&#x76EE;&#x4EE3;&#x7801;" class="headerlink" title="&#x9879;&#x76EE;&#x4EE3;&#x7801;"></a>&#x9879;&#x76EE;&#x4EE3;&#x7801;</h2><p><a href="https://github.com/ZongWenlong/AcademicSearch" target="_blank" rel="external">AcademicSearch</a></p>
<h2 id="&#x9879;&#x76EE;&#x603B;&#x7ED3;"><a href="#&#x9879;&#x76EE;&#x603B;&#x7ED3;" class="headerlink" title="&#x9879;&#x76EE;&#x603B;&#x7ED3;"></a>&#x9879;&#x76EE;&#x603B;&#x7ED3;</h2><ul>
<li>&#x76F2;&#x76EE;&#x8BBE;&#x8BA1;&#x3001;&#x76F2;&#x76EE;&#x5F00;&#x53D1;&#xFF1A;&#x5728;&#x6BD4;&#x8D5B;&#x5F00;&#x59CB;&#x9636;&#x6BB5;&#xFF0C;&#x5BF9;&#x8D5B;&#x9898;&#x5206;&#x6790;&#x4E0D;&#x591F;&#x6E05;&#x6670;&#xFF0C;&#x6D6A;&#x8D39;&#x4E86;&#x5F88;&#x591A;&#x65F6;&#x95F4;&#x3002;&#x6BD4;&#x5982;&#xFF1A;&#x6839;&#x636E;FId&#x67E5;&#x8BE2;&#x4F1A;&#x4EA7;&#x751F;&#x5927;&#x91CF;&#x65E0;&#x7528;&#x7ED3;&#x679C;&#xFF0C;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x7B80;&#x5355;&#x7684;&#x6D4B;&#x8BD5;&#x5C31;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x4F46;&#x6211;&#x4EEC;&#x5728;&#x521D;&#x671F;&#x5E76;&#x672A;&#x5BDF;&#x89C9;&#x3002;</li>
<li>Just do it&#xFF1A;&#x539F;&#x672C;&#x5728;&#x9879;&#x76EE;&#x5F00;&#x59CB;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x610F;&#x8BC6;&#x5230;&#x8BF7;&#x6C42;&#x8FDE;&#x63A5;&#x90E8;&#x5206;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x4F18;&#x5316;&#x5185;&#x5BB9;&#xFF0C;&#x4F46;&#x7531;&#x4E8E;&#x6211;&#x4EEC;&#x540E;&#x671F;&#x7684;&#x758F;&#x5FFD;&#xFF0C;&#x76F4;&#x5230;&#x6BD4;&#x8D5B;&#x7ED3;&#x675F;&#x6211;&#x4EEC;&#x4E5F;&#x6CA1;&#x6709;&#x5B9E;&#x9645;&#x8FDB;&#x884C;&#x4F18;&#x5316;&#x3002;</li>
<li>&#x56E2;&#x961F;&#x7CBE;&#x795E;&#x5F88;&#x91CD;&#x8981;&#xFF1A;&#x611F;&#x8C22;&#x4E24;&#x4F4D;&#x5C0F;&#x4F19;&#x4F34;&#x3002;&#x6BD4;&#x8D5B;&#x8FC7;&#x7A0B;&#x4E2D;&#x5927;&#x5BB6;&#x4E00;&#x8D77;&#x8BA8;&#x8BBA;&#x95EE;&#x9898;&#xFF0C;&#x4E00;&#x8D77;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#xFF0C;&#x76F8;&#x4E92;&#x6FC0;&#x53D1;&#x7075;&#x611F;&#xFF0C;&#x4F18;&#x52BF;&#x4E92;&#x8865;&#x3002;   </li>
</ul>
<p>&#x2003;&#x2003;&#x6BD4;&#x8D5B;&#x7ED3;&#x675F;&#x4E86;&#xFF0C;&#x9057;&#x61BE;&#x7684;&#x662F;&#x6CA1;&#x80FD;&#x8FDB;&#x5165;&#x51B3;&#x8D5B;&#xFF0C;&#x5E78;&#x8FD0;&#x7684;&#x662F;&#x8BA4;&#x8BC6;&#x4E86;&#x4E24;&#x4E2A;&#x5C0F;&#x4F19;&#x4F34;&#xFF0C;&#x5E76;&#x5728;&#x6BD4;&#x8D5B;&#x4E2D;&#x5B66;&#x5230;&#x4E86;&#x8BB8;&#x591A;&#x4E1C;&#x897F;&#xFF0C;&#x86EE;&#x597D;&#x3002;<br>&#x2003;&#x2003;Never give up! Be more confident!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Something about Hexo（持续更新）]]></title>
      <url>http://zongwenlong.github.io/2016/05/15/Something-about-Hexo/</url>
      <content type="html"><![CDATA[<p>&#x8BB0;&#x5F55;Hexo &#x4F7F;&#x7528;&#x7684;&#x4F7F;&#x7528;&#x6280;&#x5DE7;&#xFF0C;&#x5E76;&#x4F1A;&#x6301;&#x7EED;&#x66F4;&#x65B0;</p>
<h2 id="&#x5E38;&#x7528;&#x547D;&#x4EE4;"><a href="#&#x5E38;&#x7528;&#x547D;&#x4EE4;" class="headerlink" title="&#x5E38;&#x7528;&#x547D;&#x4EE4;"></a>&#x5E38;&#x7528;&#x547D;&#x4EE4;</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;  <span class="comment">#&#x65B0;&#x5EFA;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;</span></span><br><span class="line">hexo generate              <span class="comment">#&#x751F;&#x6210;&#x9759;&#x6001;&#x6587;&#x7AE0;</span></span><br><span class="line">hexo generate <span class="_">-d</span>           <span class="comment">#&#x6587;&#x4EF6;&#x751F;&#x6210;&#x540E;&#x7ACB;&#x5373;&#x90E8;&#x7F72;</span></span><br><span class="line">hexo server                <span class="comment">#&#x542F;&#x52A8;&#x670D;&#x52A1;&#x5668;</span></span><br><span class="line">hexo server -p [port]      <span class="comment">#&#x66F4;&#x6539;&#x670D;&#x52A1;&#x7AEF;&#x53E3;</span></span><br><span class="line">hexo deploy                <span class="comment">#&#x90E8;&#x7F72;&#x7F51;&#x7AD9;</span></span><br><span class="line"></span><br><span class="line">hexo new draft &lt;filename&gt; <span class="comment">#&#x65B0;&#x5EFA;&#x8349;&#x7A3F; </span></span><br><span class="line">hexo server --drafts       <span class="comment">#&#x9884;&#x89C8;&#x8349;&#x7A3F;</span></span><br><span class="line">hexo publish [layout] &lt;filename&gt;  <span class="comment">#&#x53D1;&#x5E03;&#x8349;&#x7A3F;&#x4E3A;&#x6587;&#x7AE0;</span></span><br></pre></td></tr></table></figure>
<h2 id="&#x4E3B;&#x9898;&#x5B89;&#x88C5;"><a href="#&#x4E3B;&#x9898;&#x5B89;&#x88C5;" class="headerlink" title="&#x4E3B;&#x9898;&#x5B89;&#x88C5;"></a>&#x4E3B;&#x9898;&#x5B89;&#x88C5;</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br><span class="line">npm install hexo-renderer-jade --save</span><br><span class="line">npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure>
<h2 id="Maupassant&#x914D;&#x7F6E;&#x4FEE;&#x6539;"><a href="#Maupassant&#x914D;&#x7F6E;&#x4FEE;&#x6539;" class="headerlink" title="Maupassant&#x914D;&#x7F6E;&#x4FEE;&#x6539;"></a>Maupassant&#x914D;&#x7F6E;&#x4FEE;&#x6539;</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme/maupassant/source/css/style.scss  #&#x663E;&#x793A;&#x7684;css&#x914D;&#x7F6E;</span><br></pre></td></tr></table></figure>
<h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><p><strong>Problem-1</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TypeError: Cannot set property &apos;lastIndex&apos; of undefined</span><br><span class="line">    at highlight (E:\workspaces\Dropbox\Hexo\node_modules\highlight.js\lib\highlight.js:471:35)</span><br><span class="line">    at E:\workspaces\Dropbox\Hexo\node_modules\highlight.js\lib\highlight.js:524:21</span><br><span class="line">    at Array.forEach (native)</span><br><span class="line">    at Object.highlightAuto (E:\workspaces\Dropbox\Hexo\node_modules\highlight.js\lib\highlight.js:520:20)</span><br><span class="line">    at highlight (E:\workspaces\Dropbox\Hexo\node_modules\hexo-util\lib\highlight.js:98:19)</span><br><span class="line">    at highlightUtil (E:\workspaces\Dropbox\Hexo\node_modules\hexo-util\lib\highlight.js:21:14)</span><br><span class="line">    at E:\workspaces\Dropbox\Hexo\node_modules\hexo\lib\plugins\filter\before_post_render\backtick_code_block.js:49:15</span><br><span class="line">    at String.replace (native)</span><br><span class="line">    at Hexo.backtickCodeBlock (E:\workspaces\Dropbox\Hexo\node_modules\hexo\lib\plugins\filter\before_post_render\backti</span><br><span class="line">ck_code_block.js:15:31)</span><br><span class="line">    at Hexo.tryCatcher (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Hexo.&lt;anonymous&gt; (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\method.js:15:34)</span><br><span class="line">    at E:\workspaces\Dropbox\Hexo\node_modules\hexo\lib\extend\filter.js:68:35</span><br><span class="line">    at tryCatcher (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Object.gotValue (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\reduce.js:145:18)</span><br><span class="line">    at Object.gotAccum (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\reduce.js:134:25)</span><br><span class="line">    at Object.tryCatcher (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\promise.js:503:31)</span><br><span class="line">    at Promise._settlePromise (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\promise.js:560:18)</span><br><span class="line">    at Promise._settlePromiseCtx (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\promise.js:597:10)</span><br><span class="line">    at Async._drainQueue (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\async.js:131:12)</span><br><span class="line">    at Async._drainQueues (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\async.js:136:10)</span><br><span class="line">    at Immediate.Async.drainQueues [as _onImmediate] (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\async.</span><br><span class="line">js:16:14)</span><br><span class="line">    at processImmediate [as _immediateCallback] (timers.js:383:17)</span><br><span class="line">FATAL Cannot set property &apos;lastIndex&apos; of undefined</span><br><span class="line">TypeError: Cannot set property &apos;lastIndex&apos; of undefined</span><br><span class="line">    at highlight (E:\workspaces\Dropbox\Hexo\node_modules\highlight.js\lib\highlight.js:471:35)</span><br><span class="line">    at E:\workspaces\Dropbox\Hexo\node_modules\highlight.js\lib\highlight.js:524:21</span><br><span class="line">    at Array.forEach (native)</span><br><span class="line">    at Object.highlightAuto (E:\workspaces\Dropbox\Hexo\node_modules\highlight.js\lib\highlight.js:520:20)</span><br><span class="line">    at highlight (E:\workspaces\Dropbox\Hexo\node_modules\hexo-util\lib\highlight.js:98:19)</span><br><span class="line">    at highlightUtil (E:\workspaces\Dropbox\Hexo\node_modules\hexo-util\lib\highlight.js:21:14)</span><br><span class="line">    at E:\workspaces\Dropbox\Hexo\node_modules\hexo\lib\plugins\filter\before_post_render\backtick_code_block.js:49:15</span><br><span class="line">    at String.replace (native)</span><br><span class="line">    at Hexo.backtickCodeBlock (E:\workspaces\Dropbox\Hexo\node_modules\hexo\lib\plugins\filter\before_post_render\backti</span><br><span class="line">ck_code_block.js:15:31)</span><br><span class="line">    at Hexo.tryCatcher (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Hexo.&lt;anonymous&gt; (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\method.js:15:34)</span><br><span class="line">    at E:\workspaces\Dropbox\Hexo\node_modules\hexo\lib\extend\filter.js:68:35</span><br><span class="line">    at tryCatcher (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Object.gotValue (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\reduce.js:145:18)</span><br><span class="line">    at Object.gotAccum (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\reduce.js:134:25)</span><br><span class="line">    at Object.tryCatcher (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\promise.js:503:31)</span><br><span class="line">    at Promise._settlePromise (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\promise.js:560:18)</span><br><span class="line">    at Promise._settlePromiseCtx (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\promise.js:597:10)</span><br><span class="line">    at Async._drainQueue (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\async.js:131:12)</span><br><span class="line">    at Async._drainQueues (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\async.js:136:10)</span><br><span class="line">    at Immediate.Async.drainQueues [as _onImmediate] (E:\workspaces\Dropbox\Hexo\node_modules\bluebird\js\release\async.</span><br><span class="line">js:16:14)</span><br><span class="line">    at processImmediate [as _immediateCallback] (timers.js:383:17)</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution-1</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set auto_detect(in _config.yml) to false solved my problem.</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OSCache分布式集群配置]]></title>
      <url>http://zongwenlong.github.io/2015/08/01/OSCache%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>&#x2003;&#x2003;&#x4E4B;&#x524D;&#x5728;IBM&#x5B9E;&#x4E60;&#x65F6;&#xFF0C;&#x7531;&#x4E8E;licence&#x7684;&#x539F;&#x56E0;&#xFF0C;&#x9879;&#x76EE;&#x4F7F;&#x7528;OScCache&#x8FDB;&#x884C;&#x6570;&#x636E;&#x7F13;&#x5B58;&#x3002;&#x5355;&#x673A;&#x90E8;&#x7F72;&#x9879;&#x76EE;&#x6D4B;&#x8BD5;&#x65F6;&#xFF0C;&#x672A;&#x51FA;&#x73B0;&#x4EC0;&#x4E48;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x591A;&#x673A;&#x6D4B;&#x8BD5;&#x65F6;&#x51FA;&#x73B0;&#x4E86;&#x95EE;&#x9898;&#xFF1A;OSCache&#x9891;&#x7E41;&#x5237;&#x65B0;&#xFF0C;&#x7F13;&#x5B58;&#x6548;&#x679C;&#x4E0B;&#x964D;&#x3002;&#x7531;&#x4E8E;OSCcache&#x5DF2;&#x7ECF;&#x505C;&#x6B62;&#x66F4;&#x65B0;&#xFF0C;OSCache&#x96C6;&#x7FA4;&#x65B9;&#x9762;&#x8D44;&#x6599;&#x8F83;&#x5C11;&#xFF0C;&#x901A;&#x8FC7;&#x4E00;&#x5468;&#x7684;&#x5B66;&#x4E60;&#x548C;&#x63A2;&#x7D22;&#xFF0C;&#x7EC8;&#x4E8E;&#x627E;&#x5230;&#x4E86;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002;</p>
<h1 id="OSCache&#x7B80;&#x4ECB;"><a href="#OSCache&#x7B80;&#x4ECB;" class="headerlink" title="OSCache&#x7B80;&#x4ECB;"></a>OSCache&#x7B80;&#x4ECB;</h1><ul>
<li>&#x7F13;&#x5B58;&#x4EFB;&#x4F55;&#x5BF9;&#x8C61;</li>
<li>&#x6C38;&#x4E45;&#x7F13;&#x5B58;&#xFF0C;&#x7F13;&#x5B58;&#x6301;&#x4E45;&#x5316;&#x5904;&#x7406;</li>
<li>&#x7F13;&#x5B58;&#x8BB0;&#x5F55;&#x7684;&#x8FC7;&#x671F;</li>
<li>&#x652F;&#x6301;&#x96C6;&#x7FA4;&#xFF08;&#x9700;&#x8981;&#x989D;&#x5916;&#x914D;&#x7F6E;&#xFF09;<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/OSCache-cluster.png?raw=true" width="300"><br></div>

</li>
</ul>
<h1 id="OSCache-&#x96C6;&#x7FA4;&#x652F;&#x6301;&#x4ECB;&#x7ECD;"><a href="#OSCache-&#x96C6;&#x7FA4;&#x652F;&#x6301;&#x4ECB;&#x7ECD;" class="headerlink" title="OSCache &#x96C6;&#x7FA4;&#x652F;&#x6301;&#x4ECB;&#x7ECD;"></a>OSCache &#x96C6;&#x7FA4;&#x652F;&#x6301;&#x4ECB;&#x7ECD;</h1><p>&#x2003;&#x2003;OScache&#x81EA;&#x8EAB;&#x4E0D;&#x5177;&#x5907;&#x96C6;&#x7FA4;&#x901A;&#x4FE1;&#x80FD;&#x529B;&#xFF0C;&#x5B83;&#x4ED6;&#x9700;&#x8981;&#x501F;&#x52A9;&#x7B2C;&#x4E09;&#x65B9;&#x901A;&#x8BAF;&#x5DE5;&#x5177;&#x6765;&#x5B9E;&#x73B0;&#x96C6;&#x7FA4;&#x7F13;&#x5B58;&#x6570;&#x636E;&#x540C;&#x6B65;&#x3002;&#x4E0B;&#x56FE;&#x6240;&#x793A;&#x662F;OScache&#x96C6;&#x7FA4;&#x76F8;&#x5173;&#x7684;Java&#x7C7B;&#xFF0C;&#x5176;&#x4E2D;</p>
<ul>
<li>AbstractBroadcastingListener&#x8D1F;&#x8D23;&#x7F13;&#x5B58;&#x540C;&#x6B65;&#x4E8B;&#x4EF6;&#x7684;&#x4E0B;&#x53D1;&#x548C;&#x5904;&#x7406;</li>
<li>&#x7C7B;ClusterNotification&#x4E3A;&#x7EC4;&#x64AD;&#x6D88;&#x606F;&#x4F53;&#xFF08;Bean&#xFF09;</li>
<li>&#x7C7B;JavaGroupsBroadcastingListener/ JMS10BroadcastingListening/ JMSBroadcastingListening&#x7531;OSCache&#x5B98;&#x65B9;&#x63D0;&#x4F9B;&#xFF0C;&#x5229;&#x7528;JGroups&#x901A;&#x4FE1;&#x6846;&#x67B6;&#x6216;JMS&#x901A;&#x4FE1;&#x6846;&#x67B6;&#x7684;&#x7EC4;&#x64AD;&#x80FD;&#x529B;&#x5B9E;&#x73B0;OSCache&#x7684;&#x7F13;&#x5B58;&#x6570;&#x636E;&#x540C;&#x6B65;&#x9700;&#x6C42;&#x3002;</li>
</ul>
<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-2.png?raw=true" width="300"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-3.png?raw=true" width="350"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-4.png?raw=true" width="500"><br></div>

<h1 id="OOSCache&#x96C6;&#x7FA4;&#x540C;&#x6B65;&#x89E3;&#x51B3;&#x65B9;&#x6848;"><a href="#OOSCache&#x96C6;&#x7FA4;&#x540C;&#x6B65;&#x89E3;&#x51B3;&#x65B9;&#x6848;" class="headerlink" title="OOSCache&#x96C6;&#x7FA4;&#x540C;&#x6B65;&#x89E3;&#x51B3;&#x65B9;&#x6848;"></a>OOSCache&#x96C6;&#x7FA4;&#x540C;&#x6B65;&#x89E3;&#x51B3;&#x65B9;&#x6848;</h1><p>&#x9D;1. OSCache+JGroups&#xFF08;&#x672C;&#x6587;&#x4ECB;&#x7ECD;&#xFF09;</p>
<ol>
<li>OSCache+JMS&#xFF08;&#x7565;&#xFF09;</li>
<li>OSCache+&#x5176;&#x4ED6;&#x7684;&#x901A;&#x4FE1;&#x6846;&#x67B6;&#xFF08;&#x7565;&#xFF09;<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-5.png?raw=true" width="500"><br></div><br>&#x4E0B;&#x9762;&#x4ECB;&#x7ECD;JMS+JGroups&#x7684;&#x914D;&#x7F6E;&#x65B9;&#x5F0F;<br><div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-6.png?raw=true" width="600"><br></div>

</li>
</ol>
<p>JavaGroupsBroadcastingListener</p>
<ul>
<li>initialize(Cache cache, Config config)  &#x2013; &#x52A0;&#x8F7D;&#x901A;&#x4FE1;&#x57FA;&#x672C;&#x914D;&#x7F6E;</li>
<li>sendNotification(ClusterNotification message) &#x2013; &#x53D1;&#x9001;&#x7EC4;&#x64AD;&#x6D88;&#x606F;</li>
<li>handleNotification(Serializable serializable)  &#x2013;  &#x5904;&#x7406;&#x63A5;&#x6536;&#x5230;&#x7684;&#x63A5;&#x6536;&#x7EC4;&#x64AD;&#x6D88;&#x606F;</li>
</ul>
<h2 id="&#x9ED8;&#x8BA4;&#x914D;&#x7F6E;"><a href="#&#x9ED8;&#x8BA4;&#x914D;&#x7F6E;" class="headerlink" title="&#x9ED8;&#x8BA4;&#x914D;&#x7F6E;"></a>&#x9ED8;&#x8BA4;&#x914D;&#x7F6E;</h2><ol>
<li>&#x6211;&#x4F7F;&#x7528;&#x7684;Jar&#x5305;&#xFF1A;jgroups-2.12.3.Final.jar(3.*&#x4EE5;&#x4E0A;JGroups&#x4E0D;&#x652F;&#x6301;)&#xFF0C;concurrent-1.3.4.jar&#xFF0C;oscache-2.4.1.jar&#xFF0C;log4j-1.2.17.jar&#xFF0C;commons-logging-1.2.jar(OScache&#x4E2D;&#x4F7F;&#x7528;&#x7684;log)</li>
<li>&#x6DFB;&#x52A0;&#x6587;&#x4EF6;src/oscache.properties&#xFF08;log4j.properties&#x4E5F;&#x53EF;&#x4EE5;&#x653E;&#x5728;src&#x76EE;&#x5F55;&#x4E0B;&#xFF09;&#xFF0C;&#x6DFB;&#x52A0;&#x4EE5;&#x4E0B;&#x5185;&#x5BB9;<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cache.event.listeners=com.opensymphony.oscache.plugins.clustersupport.JavaGroupsBroadcastingListener  -- &#x7EC4;&#x64AD;&#x4E8B;&#x4EF6;&#x76D1;&#x542C;&#x5668;</span><br><span class="line">cache.memory=<span class="literal">true</span> -- &#x662F;&#x5426;&#x4F7F;&#x7528;&#x5185;&#x5B58;</span><br><span class="line">cache.blocking=<span class="literal">true</span> -- &#x662F;&#x5426;&#x540C;&#x6B65;</span><br><span class="line">cache.cluster.properties=</span><br><span class="line">	UDP(mcast_addr=231.12.21.132;mcast_port=45566;ip_ttl=32;\</span><br><span class="line">	mcast_send_buf_size=150000;mcast_recv_buf_size=80000):\</span><br><span class="line">	PING(timeout=2000;num_initial_members=3):\</span><br><span class="line">	MERGE2(min_interval=5000;max_interval=10000):\</span><br><span class="line">	FD_SOCK:VERIFY_SUSPECT(timeout=1500):\</span><br><span class="line">	pbcast.NAKACK(gc_lag=50;retransmit_timeout=300,600,1200,2400,4800;max_xmit_size=8192):\</span><br><span class="line">	UNICAST(timeout=300,600,1200,2400):\</span><br><span class="line">	pbcast.STABLE(desired_avg_gossip=20000):\</span><br><span class="line">	FRAG(frag_size=8096;down_thread=<span class="literal">false</span>;up_thread=<span class="literal">false</span>):\</span><br><span class="line">	pbcast.GMS(join_timeout=5000;join_retry_timeout=2000;shun=<span class="literal">false</span>;<span class="built_in">print</span>_<span class="built_in">local</span>_addr=<span class="literal">true</span>)</span><br><span class="line">cache.cluster.multicast.ip=231.12.21.132 -- &#x7EC4;&#x64AD;IP</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="&#x9ED8;&#x8BA4;&#x914D;&#x7F6E;&#x7684;&#x95EE;&#x9898;&#xFF1A;"><a href="#&#x9ED8;&#x8BA4;&#x914D;&#x7F6E;&#x7684;&#x95EE;&#x9898;&#xFF1A;" class="headerlink" title="&#x9ED8;&#x8BA4;&#x914D;&#x7F6E;&#x7684;&#x95EE;&#x9898;&#xFF1A;"></a>&#x9ED8;&#x8BA4;&#x914D;&#x7F6E;&#x7684;&#x95EE;&#x9898;&#xFF1A;</h3><p>&#x5237;&#x65B0;&#x52A8;&#x4F5C;&#xFF08;&#x6570;&#x636E;&#x5E93;&#x589E;&#x5220;&#x6539;&#xFF09;&#x540C;&#x6B65;&#xFF0C;&#x4F46;&#x7F13;&#x5B58;&#x6570;&#x636E;&#x4E0D;&#x540C;&#x6B65;&#x3002;</p>
<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-7.png?raw=true" width="600"><br></div>

<h3 id="&#x7F13;&#x5B58;&#x6570;&#x636E;&#x4E0D;&#x540C;&#x6B65;&#x539F;&#x56E0;&#xFF1A;"><a href="#&#x7F13;&#x5B58;&#x6570;&#x636E;&#x4E0D;&#x540C;&#x6B65;&#x539F;&#x56E0;&#xFF1A;" class="headerlink" title="&#x7F13;&#x5B58;&#x6570;&#x636E;&#x4E0D;&#x540C;&#x6B65;&#x539F;&#x56E0;&#xFF1A;"></a>&#x7F13;&#x5B58;&#x6570;&#x636E;&#x4E0D;&#x540C;&#x6B65;&#x539F;&#x56E0;&#xFF1A;</h3><p>OSCache&#x6240;&#x63D0;&#x4F9B;&#x7684;AbstractBroadcastingListener&#x7C7B;&#x4E2D;&#x53EA;&#x6709;&#x5237;&#x65B0;&#x6D88;&#x606F;&#x7684;&#x53D1;&#x9001;&#x3001;&#x63A5;&#x6536;&#x548C;&#x5904;&#x7406;&#x903B;&#x8F91;&#xFF0C;&#x65E0;&#x5B9E;&#x65F6;&#x540C;&#x6B65;&#x903B;&#x8F91;&#x3002;</p>
<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-8.png?raw=true" width="500"><br></div>

<h2 id="&#x7F13;&#x5B58;&#x6570;&#x636E;&#x540C;&#x6B65;&#x914D;&#x7F6E;"><a href="#&#x7F13;&#x5B58;&#x6570;&#x636E;&#x540C;&#x6B65;&#x914D;&#x7F6E;" class="headerlink" title="&#x7F13;&#x5B58;&#x6570;&#x636E;&#x540C;&#x6B65;&#x914D;&#x7F6E;"></a>&#x7F13;&#x5B58;&#x6570;&#x636E;&#x540C;&#x6B65;&#x914D;&#x7F6E;</h2><ol>
<li><p>&#x589E;&#x52A0;&#x7C7B;</p>
<ul>
<li><p>JavaGroupsSyncBroadcastingListener</p>
<ul>
<li>&#x5B9E;&#x73B0;&#x65B9;&#x6CD5;&#xFF08;&#x53D1;&#x6D88;&#x606F;&#xFF09;&#xFF1A;<ul>
<li>cacheEntryAdded</li>
<li>cacheEntryRemoved</li>
<li>cacheEntryUpdated</li>
</ul>
</li>
<li>&#x6269;&#x5145;&#x65B9;&#x6CD5;&#xFF08;&#x6536;&#x6D88;&#x606F;&#xFF09;&#xFF1A;<ul>
<li>handleClusterNotification</li>
</ul>
</li>
</ul>
</li>
<li>CacheConstants  &#x2013;  &#x6DFB;&#x52A0;&#x4E8B;&#x4EF6;&#x7C7B;&#x578B;&#x5E38;&#x91CF;</li>
<li>SerialCacheEvent  &#x2013; &#x53EF;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x4E8B;&#x4EF6;&#x7C7B;</li>
</ul>
</li>
<li><p>&#x4FEE;&#x6539;&#x914D;&#x7F6E;&#x6587;&#x4EF6;oscache.properties&#xFF1A;</p>
</li>
</ol>
<ul>
<li>cache.event.listeners=JavaGroupsSyncBroadcastingListener&#xFF08;Package&#x5B8C;&#x6574;&#x8DEF;&#x5F84;&#xFF09;</li>
</ul>
<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-9.png?raw=true" width="500"><br></div>

<h3 id="&#x4EE3;&#x7801;&#x5217;&#x8868;"><a href="#&#x4EE3;&#x7801;&#x5217;&#x8868;" class="headerlink" title="&#x4EE3;&#x7801;&#x5217;&#x8868;"></a>&#x4EE3;&#x7801;&#x5217;&#x8868;</h3><ul>
<li><p>JavaGroupsSyncBroadcastingListener</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;  </span><br><span class="line"><span class="keyword">import</span> java.util.Set;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.opensymphony.oscache.base.events.CacheEntryEvent;  </span><br><span class="line"><span class="keyword">import</span> com.opensymphony.oscache.plugins.clustersupport.ClusterNotification;  </span><br><span class="line"><span class="keyword">import</span> com.opensymphony.oscache.plugins.clustersupport.JavaGroupsBroadcastingListener;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span><br><span class="line">* &#x81EA;&#x5B9A;&#x4E49;BroadCastingListener,&#x91CD;&#x5199;&#x7236;&#x7C7B;&#x65B9;&#x6CD5;&#x3002; </span><br><span class="line">*/</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaGroupsSyncBroadcastingListener</span> <span class="keyword">extends</span>  </span><br><span class="line">          <span class="title">JavaGroupsBroadcastingListener</span> </span>{  </span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Log log = LogFactory  </span><br><span class="line">               .getLog(JavaGroupsBroadcastingListenerImpl.class);  </span><br><span class="line">  </span><br><span class="line">     <span class="meta">@SuppressWarnings</span>(<span class="string">&quot;deprecation&quot;</span>)  </span><br><span class="line">     <span class="meta">@Override</span>  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleClusterNotification</span><span class="params">(ClusterNotification message)</span> </span>{  </span><br><span class="line">  </span><br><span class="line">          <span class="keyword">if</span> (cache == <span class="keyword">null</span>) {  </span><br><span class="line">               log.warn(<span class="string">&quot;A cluster notification (&quot;</span>  </span><br><span class="line">                         + message  </span><br><span class="line">                         + <span class="string">&quot;) was received, but no cache is registered on this machine. Notification ignored.&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">               <span class="keyword">return</span>;  </span><br><span class="line">          }  </span><br><span class="line">  </span><br><span class="line">          <span class="keyword">if</span> (log.isInfoEnabled()) {  </span><br><span class="line">               log.info(<span class="string">&quot;Cluster notification (&quot;</span> + message + <span class="string">&quot;) was received.&quot;</span>);  </span><br><span class="line">          }  </span><br><span class="line">  </span><br><span class="line">          <span class="keyword">switch</span> (message.getType()) {  </span><br><span class="line">          <span class="keyword">case</span> ClusterNotification.FLUSH_KEY:  </span><br><span class="line">            cache.flushEntry((String) message.getData(), CLUSTER_ORIGIN);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> ClusterNotification.FLUSH_GROUP:  </span><br><span class="line">            cache.flushGroup((String) message.getData(), CLUSTER_ORIGIN);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> ClusterNotification.FLUSH_PATTERN:  </span><br><span class="line">            cache.flushPattern((String) message.getData(), CLUSTER_ORIGIN);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> ClusterNotification.FLUSH_CACHE:  </span><br><span class="line">            cache.flushAll((Date) message.getData(), CLUSTER_ORIGIN);  </span><br><span class="line">            <span class="keyword">break</span>;      </span><br><span class="line">          <span class="keyword">case</span> CacheConstants.CLUSTER_ENTRY_ADD:  </span><br><span class="line">               log.info(<span class="string">&quot;Cluster data add (&quot;</span> + message + <span class="string">&quot;) &quot;</span>);  </span><br><span class="line">               <span class="keyword">if</span> (message.getData() <span class="keyword">instanceof</span> SerialCacheEvent ) {  </span><br><span class="line">                    SerialCacheEvent event = (SerialCacheEvent ) message.getData();  </span><br><span class="line">                    cache.putInCache(event.getKey(), event.getEntry().getContent(),setToArray(event.getEntry().getGroups()), <span class="keyword">null</span>, CLUSTER_ORIGIN);  </span><br><span class="line">               }  </span><br><span class="line">               <span class="keyword">break</span>;  </span><br><span class="line">          <span class="keyword">case</span> CacheConstants.CLUSTER_ENTRY_UPDATE:  </span><br><span class="line">               log.info(<span class="string">&quot;Cluster data update (&quot;</span> + message + <span class="string">&quot;) &quot;</span>);  </span><br><span class="line">               <span class="keyword">if</span> (message.getData() <span class="keyword">instanceof</span> SerialCacheEvent ) {  </span><br><span class="line">                    SerialCacheEvent event = (SerialCacheEvent ) message.getData();  </span><br><span class="line">                    cache.putInCache(event.getKey(), event.getEntry().getContent(),setToArray(event.getEntry().getGroups()), <span class="keyword">null</span>, CLUSTER_ORIGIN);  </span><br><span class="line">               }  </span><br><span class="line">               <span class="keyword">break</span>;  </span><br><span class="line">          <span class="keyword">case</span> CacheConstants.CLUSTER_ENTRY_DELETE:  </span><br><span class="line">               log.info(<span class="string">&quot;Cluster data delete (&quot;</span> + message + <span class="string">&quot;) &quot;</span>);  </span><br><span class="line">               <span class="keyword">if</span> (message.getData() <span class="keyword">instanceof</span> SerialCacheEvent ) {  </span><br><span class="line">                    SerialCacheEvent event = (SerialCacheEvent ) message.getData();  </span><br><span class="line">                    cache.removeEntry(event.getKey());  </span><br><span class="line">               }  </span><br><span class="line">               <span class="keyword">break</span>;  </span><br><span class="line">          <span class="keyword">default</span>:  </span><br><span class="line">               log.error(<span class="string">&quot;The cluster notification (&quot;</span> + message  </span><br><span class="line">                         + <span class="string">&quot;) is of an unknown type. Notification ignored.&quot;</span>);  </span><br><span class="line">          }  </span><br><span class="line">     }  </span><br><span class="line">  </span><br><span class="line">     <span class="meta">@Override</span>  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacheEntryAdded</span><span class="params">(CacheEntryEvent event)</span> </span>{  </span><br><span class="line">          log.info(<span class="string">&quot;attribute data add (&quot;</span> + event.getKey() + <span class="string">&quot;) &quot;</span>);  </span><br><span class="line">          <span class="keyword">super</span>.cacheEntryAdded(event);  </span><br><span class="line">          <span class="keyword">if</span> (!CLUSTER_ORIGIN.equals(event.getOrigin())) {  </span><br><span class="line">               sendNotification(<span class="keyword">new</span> ClusterNotification(  </span><br><span class="line">                         CacheConstants.CLUSTER_ENTRY_ADD, <span class="keyword">new</span> SerialCacheEvent (  </span><br><span class="line">                                   event.getMap(), event.getEntry(), CLUSTER_ORIGIN)));  </span><br><span class="line">          }  </span><br><span class="line">     }  </span><br><span class="line">  </span><br><span class="line">     <span class="meta">@Override</span>  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacheEntryRemoved</span><span class="params">(CacheEntryEvent event)</span> </span>{  </span><br><span class="line">          log.info(<span class="string">&quot;attribute data delete (&quot;</span> + event.getKey() + <span class="string">&quot;) &quot;</span>);  </span><br><span class="line">          <span class="keyword">super</span>.cacheEntryRemoved(event);  </span><br><span class="line">          <span class="keyword">if</span> (!CLUSTER_ORIGIN.equals(event.getOrigin())) {  </span><br><span class="line">               sendNotification(<span class="keyword">new</span> ClusterNotification(  </span><br><span class="line">                         CacheConstants.CLUSTER_ENTRY_DELETE, <span class="keyword">new</span> SerialCacheEvent (  </span><br><span class="line">                                   event.getMap(), event.getEntry(), CLUSTER_ORIGIN)));  </span><br><span class="line">          }  </span><br><span class="line">     }  </span><br><span class="line">  </span><br><span class="line">     <span class="meta">@Override</span>  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacheEntryUpdated</span><span class="params">(CacheEntryEvent event)</span> </span>{  </span><br><span class="line">          log.info(<span class="string">&quot;attribute data update (&quot;</span> + event.getKey() + <span class="string">&quot;) &quot;</span>);  </span><br><span class="line">          <span class="keyword">super</span>.cacheEntryUpdated(event);  </span><br><span class="line">          <span class="keyword">if</span> (!CLUSTER_ORIGIN.equals(event.getOrigin())) {  </span><br><span class="line">               sendNotification(<span class="keyword">new</span> ClusterNotification(  </span><br><span class="line">                         CacheConstants.CLUSTER_ENTRY_UPDATE, <span class="keyword">new</span> SerialCacheEvent (  </span><br><span class="line">                                   event.getMap(), event.getEntry(), CLUSTER_ORIGIN)));  </span><br><span class="line">          }  </span><br><span class="line">     }  </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">     <span class="keyword">private</span> String[] setToArray(Set set){  </span><br><span class="line">          String[] strArray = <span class="keyword">new</span> String[set.size()];  </span><br><span class="line">           </span><br><span class="line">          <span class="keyword">int</span> i = <span class="number">0</span>;  </span><br><span class="line">          <span class="keyword">for</span>(Object str : set){  </span><br><span class="line">               strArray[i] = (String) str;  </span><br><span class="line">               i++;  </span><br><span class="line">          }  </span><br><span class="line">          <span class="keyword">return</span> strArray;  </span><br><span class="line">     }  </span><br><span class="line">  </span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</li>
<li><p>CacheConstants </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> FLUSH_PATTERN = <span class="number">3</span>;</span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * &#x5237;&#x65B0;&#x7F13;&#x5B58;&#x5BF9;&#x8C61;</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> FLUSH_CACHE = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * &#x96C6;&#x7FA4;entry add&#x5904;&#x7406;</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> CLUSTER_ENTRY_ADD = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * &#x96C6;&#x7FA4;entry update&#x5904;&#x7406;</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> CLUSTER_ENTRY_UPDATE = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * &#x96C6;&#x7FA4;entry delete&#x5904;&#x7406;</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> CLUSTER_ENTRY_DELETE = <span class="number">22</span>;</span><br><span class="line">      </span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</li>
<li><p>SerialCacheEvent </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.oscache.base.Cache;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.oscache.base.CacheEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialCacheEvent</span>  <span class="keyword">implements</span> <span class="title">Serializable</span></span>{</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       *</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">649226025117113267L</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * The cache where the entry resides.</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">private</span> Cache map = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * The entry that the event applies to.</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">private</span> CacheEntry entry = <span class="keyword">null</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">private</span> String origin = <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * Constructs a cache entry event object with no specified origin</span><br><span class="line">       *</span><br><span class="line">       * <span class="doctag">@param</span> map</span><br><span class="line">       *            The cache map of the cache entry</span><br><span class="line">       * <span class="doctag">@param</span> entry</span><br><span class="line">       *            The cache entry that the event applies to</span><br><span class="line">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span>  <span class="title">SerialCacheEvent</span>  <span class="params">(Cache map, CacheEntry entry)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>( map, entry, <span class="keyword">null</span>);</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * Constructs a cache entry event object</span><br><span class="line">       *</span><br><span class="line">       * <span class="doctag">@param</span> map</span><br><span class="line">       *            The cache map of the cache entry</span><br><span class="line">       * <span class="doctag">@param</span> entry</span><br><span class="line">       *            The cache entry that the event applies to</span><br><span class="line">       * <span class="doctag">@param</span> origin</span><br><span class="line">       *            The origin of this event</span><br><span class="line">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span>  <span class="title">SerialCacheEvent</span>  <span class="params">(Cache map, CacheEntry entry, String origin)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>. map = map;</span><br><span class="line">             <span class="keyword">this</span>. entry = entry;</span><br><span class="line">             <span class="keyword">this</span>. origin = origin;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * Retrieve the cache entry that the event applies to.</span><br><span class="line">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> CacheEntry <span class="title">getEntry</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> entry;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * Retrieve the cache entry key</span><br><span class="line">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> entry.getKey();</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * Retrieve the cache map where the entry resides.</span><br><span class="line">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Cache <span class="title">getMap</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> map;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">getOrigin</span><span class="params">()</span> </span>{</span><br><span class="line">             <span class="keyword">return</span> origin;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrigin</span><span class="params">(String origin)</span> </span>{</span><br><span class="line">             <span class="keyword">this</span>. origin = origin;</span><br><span class="line">      }</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="&#x9057;&#x7559;&#x95EE;&#x9898;"><a href="#&#x9057;&#x7559;&#x95EE;&#x9898;" class="headerlink" title="&#x9057;&#x7559;&#x95EE;&#x9898;"></a>&#x9057;&#x7559;&#x95EE;&#x9898;</h1><p>&#x9D;1. OSCache&#xFF1A;&#x5DF2;&#x505C;&#x6B62;&#x66F4;&#x65B0;&#xFF0C;&#x96C6;&#x7FA4;&#x65B9;&#x9762;&#x5B58;&#x5728;&#x95EE;&#x9898;&#xFF08;&#x96C6;&#x7FA4;&#x89C4;&#x6A21;&#x4E0D;&#x80FD;&#x592A;&#x5927;&#x7B49;&#xFF09;&#xFF0C;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x8003;&#x8651;&#x4F7F;&#x7528;&#x5176;&#x4ED6;&#x7F13;&#x5B58;&#x6846;&#x67B6;&#x3002;<br>&#x9D;2. JGroups&#xFF1A;&#x76EE;&#x524D;&#x4F7F;&#x7528;&#x7684;JGroups&#x7248;&#x672C;&#x8F83;&#x4F4E;&#xFF0C;&#x5176;&#x4E2D;&#x4E00;&#x4E9B;&#x7C7B;&#x5DF2;&#x7ECF;&#x5E9F;&#x5F03;&#x3002;&#x9AD8;&#x7248;&#x672C;&#x6709;&#x66F4;&#x4F18;&#x3001;&#x66F4;&#x7A33;&#x5B9A;&#x7684;&#x6027;&#x80FD;&#xFF0C;&#x662F;&#x5426;&#x6709;&#x5FC5;&#x8981;&#x6839;&#x636E;&#x9AD8;&#x7248;&#x672C;JGroups&#x91CD;&#x5199;JavaGroupsBroadcastingListener&#x8FD8;&#x9700;&#x8981;&#x8003;&#x91CF;&#x3002;&#x5982;&#x679C;&#x60F3;&#x5F15;&#x5165;&#x5176;&#x4ED6;&#x901A;&#x4FE1;&#x6846;&#x67B6;&#xFF0C;&#x91CD;&#x5199;JavaGroupsBroadcastingListener&#x5373;&#x53EF;&#x3002;</p>
<h1 id="&#x53C2;&#x8003;"><a href="#&#x53C2;&#x8003;" class="headerlink" title="&#x53C2;&#x8003;"></a>&#x53C2;&#x8003;</h1><ol>
<li><a href="http://blog.csdn.net/laven90/article/details/9567499" target="_blank" rel="external">oscache&#x5206;&#x5E03;&#x5F0F;&#x7F13;&#x5B58;</a>JavaGroupsBroadcastingListenerImpl&#x6E90;&#x7801;&#x5B58;&#x5728;&#x9519;&#x8BEF;&#xFF0C;&#x4FEE;&#x6539;&#x89C1;&#x672C;&#x6587;JavaGroupsSyncBroadcastingListener</li>
<li><a href="http://3001448.blog.51cto.com/2991448/1202879" target="_blank" rel="external">Oscache&#x5206;&#x5E03;&#x5F0F;&#x96C6;&#x7FA4;&#x914D;&#x7F6E;&#x603B;&#x7ED3;</a></li>
</ol>
]]></content>
    </entry>
    
  
  
</search>

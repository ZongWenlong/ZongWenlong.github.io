<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[OSCache分布式集群配置]]></title>
      <url>http://zongwenlong.github.io/2015/08/01/OSCache%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="1-OSCache简介"><a href="#1-OSCache简介" class="headerlink" title="1. OSCache简介"></a>1. OSCache简介</h1><ul>
<li>缓存任何对象</li>
<li>永久缓存，缓存持久化处理</li>
<li>缓存记录的过期</li>
<li>支持集群（需要额外配置）<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/OSCache-cluster.png?raw=true" width="300"><br></div>

</li>
</ul>
<h1 id="2-OSCache-集群支持介绍"><a href="#2-OSCache-集群支持介绍" class="headerlink" title="2. OSCache 集群支持介绍"></a>2. OSCache 集群支持介绍</h1><p>&emsp;&emsp;OScache自身不具备集群通信能力，它他需要借助第三方通讯工具来实现集群缓存数据同步。下图所示是OScache集群相关的Java类，其中</p>
<ul>
<li>AbstractBroadcastingListener负责缓存同步事件的下发和处理</li>
<li>类ClusterNotification为组播消息体（Bean）</li>
<li>类JavaGroupsBroadcastingListener/ JMS10BroadcastingListening/ JMSBroadcastingListening由OSCache官方提供，利用JGroups通信框架或JMS通信框架的组播能力实现OSCache的缓存数据同步需求。</li>
</ul>
<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-2.png?raw=true" width="300"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-3.png?raw=true" width="350"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-4.png?raw=true" width="500"><br></div>

<h1 id="3-OOSCache集群同步解决方案"><a href="#3-OOSCache集群同步解决方案" class="headerlink" title="3. OOSCache集群同步解决方案"></a>3. OOSCache集群同步解决方案</h1><p>1. OSCache+JGroups（本文介绍）</p>
<ol>
<li>OSCache+JMS（略）</li>
<li>OSCache+其他的通信框架（略）<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-5.png?raw=true" width="500"><br></div><br>下面介绍JMS+JGroups的配置方式<br><div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-6.png?raw=true" width="600"><br></div>

</li>
</ol>
<p>JavaGroupsBroadcastingListener</p>
<ul>
<li>initialize(Cache cache, Config config)  – 加载通信基本配置</li>
<li>sendNotification(ClusterNotification message) – 发送组播消息</li>
<li>handleNotification(Serializable serializable)  –  处理接收到的接收组播消息</li>
</ul>
<h2 id="3-1-默认配置"><a href="#3-1-默认配置" class="headerlink" title="3.1 默认配置"></a>3.1 默认配置</h2><ol>
<li>我使用的Jar包：jgroups-2.12.3.Final.jar(3.*以上JGroups不支持)，concurrent-1.3.4.jar，oscache-2.4.1.jar，log4j-1.2.17.jar，commons-logging-1.2.jar(OScache中使用的log)</li>
<li>添加文件src/oscache.properties（log4j.properties也可以放在src目录下），添加以下内容<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cache.event.listeners=com.opensymphony.oscache.plugins.clustersupport.JavaGroupsBroadcastingListener  -- 组播事件监听器</span><br><span class="line">cache.memory=<span class="literal">true</span> -- 是否使用内存</span><br><span class="line">cache.blocking=<span class="literal">true</span> -- 是否同步</span><br><span class="line">cache.cluster.properties=</span><br><span class="line">	UDP(mcast_addr=<span class="number">231.12</span>.<span class="number">21.132</span>;mcast_port=<span class="number">45566</span>;ip_ttl=<span class="number">32</span>;<span class="string">\</span></span><br><span class="line">	mcast_send_buf_size=<span class="number">150000</span>;mcast_recv_buf_size=<span class="number">80000</span>):<span class="string">\</span></span><br><span class="line">	PING(timeout=<span class="number">2000</span>;num_initial_members=<span class="number">3</span>):<span class="string">\</span></span><br><span class="line">	MERGE2(min_interval=<span class="number">5000</span>;max_interval=<span class="number">10000</span>):<span class="string">\</span></span><br><span class="line">	FD_SOCK:VERIFY_SUSPECT(timeout=<span class="number">1500</span>):<span class="string">\</span></span><br><span class="line">	pbcast.NAKACK(gc_lag=<span class="number">50</span>;retransmit_timeout=<span class="number">300</span>,<span class="number">600</span>,<span class="number">1200</span>,<span class="number">2400</span>,<span class="number">4800</span>;max_xmit_size=<span class="number">8192</span>):<span class="string">\</span></span><br><span class="line">	UNICAST(timeout=<span class="number">300</span>,<span class="number">600</span>,<span class="number">1200</span>,<span class="number">2400</span>):<span class="string">\</span></span><br><span class="line">	pbcast.STABLE(desired_avg_gossip=<span class="number">20000</span>):<span class="string">\</span></span><br><span class="line">	FRAG(frag_size=<span class="number">8096</span>;down_thread=<span class="literal">false</span>;up_thread=<span class="literal">false</span>):<span class="string">\</span></span><br><span class="line">	pbcast.GMS(join_timeout=<span class="number">5000</span>;join_retry_timeout=<span class="number">2000</span>;shun=<span class="literal">false</span>;print_local_addr=<span class="literal">true</span>)</span><br><span class="line">cache.cluster.multicast.ip=<span class="number">231.12</span>.<span class="number">21.132</span> -- 组播IP</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="默认配置的问题："><a href="#默认配置的问题：" class="headerlink" title="默认配置的问题："></a>默认配置的问题：</h3><p>刷新动作（数据库增删改）同步，但缓存数据不同步。</p>
<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-7.png?raw=true" width="600"><br></div>

<h3 id="缓存数据不同步原因："><a href="#缓存数据不同步原因：" class="headerlink" title="缓存数据不同步原因："></a>缓存数据不同步原因：</h3><p>OSCache所提供的AbstractBroadcastingListener类中只有刷新消息的发送、接收和处理逻辑，无实时同步逻辑。</p>
<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-8.png?raw=true" width="500"><br></div>

<h2 id="3-2-缓存数据同步配置"><a href="#3-2-缓存数据同步配置" class="headerlink" title="3.2 缓存数据同步配置"></a>3.2 缓存数据同步配置</h2><ol>
<li><p>增加类</p>
<ul>
<li><p>JavaGroupsSyncBroadcastingListener</p>
<ul>
<li>实现方法（发消息）：<ul>
<li>cacheEntryAdded</li>
<li>cacheEntryRemoved</li>
<li>cacheEntryUpdated</li>
</ul>
</li>
<li>扩充方法（收消息）：<ul>
<li>handleClusterNotification</li>
</ul>
</li>
</ul>
</li>
<li>CacheConstants  –  添加事件类型常量</li>
<li>SerialCacheEvent  – 可序列化的事件类</li>
</ul>
</li>
<li><p>修改配置文件oscache.properties：</p>
</li>
</ol>
<ul>
<li>cache.event.listeners=JavaGroupsSyncBroadcastingListener（Package完整路径）</li>
</ul>
<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-9.png?raw=true" width="500"><br></div>

<h3 id="代码列表"><a href="#代码列表" class="headerlink" title="代码列表"></a>代码列表</h3><ul>
<li><p>JavaGroupsSyncBroadcastingListener</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;  </span><br><span class="line"><span class="keyword">import</span> java.util.Set;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.opensymphony.oscache.base.events.CacheEntryEvent;  </span><br><span class="line"><span class="keyword">import</span> com.opensymphony.oscache.plugins.clustersupport.ClusterNotification;  </span><br><span class="line"><span class="keyword">import</span> com.opensymphony.oscache.plugins.clustersupport.JavaGroupsBroadcastingListener;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span><br><span class="line">* 自定义BroadCastingListener,重写父类方法。 </span><br><span class="line">*/</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaGroupsSyncBroadcastingListener</span> <span class="keyword">extends</span>  </span><br><span class="line">          <span class="title">JavaGroupsBroadcastingListener</span> </span>&#123;  </span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Log log = LogFactory  </span><br><span class="line">               .getLog(JavaGroupsBroadcastingListenerImpl.class);  </span><br><span class="line">  </span><br><span class="line">     <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)  </span><br><span class="line">     <span class="meta">@Override</span>  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleClusterNotification</span><span class="params">(ClusterNotification message)</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">          <span class="keyword">if</span> (cache == <span class="keyword">null</span>) &#123;  </span><br><span class="line">               log.warn(<span class="string">"A cluster notification ("</span>  </span><br><span class="line">                         + message  </span><br><span class="line">                         + <span class="string">") was received, but no cache is registered on this machine. Notification ignored."</span>);  </span><br><span class="line">  </span><br><span class="line">               <span class="keyword">return</span>;  </span><br><span class="line">          &#125;  </span><br><span class="line">  </span><br><span class="line">          <span class="keyword">if</span> (log.isInfoEnabled()) &#123;  </span><br><span class="line">               log.info(<span class="string">"Cluster notification ("</span> + message + <span class="string">") was received."</span>);  </span><br><span class="line">          &#125;  </span><br><span class="line">  </span><br><span class="line">          <span class="keyword">switch</span> (message.getType()) &#123;  </span><br><span class="line">          <span class="keyword">case</span> ClusterNotification.FLUSH_KEY:  </span><br><span class="line">            cache.flushEntry((String) message.getData(), CLUSTER_ORIGIN);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> ClusterNotification.FLUSH_GROUP:  </span><br><span class="line">            cache.flushGroup((String) message.getData(), CLUSTER_ORIGIN);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> ClusterNotification.FLUSH_PATTERN:  </span><br><span class="line">            cache.flushPattern((String) message.getData(), CLUSTER_ORIGIN);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> ClusterNotification.FLUSH_CACHE:  </span><br><span class="line">            cache.flushAll((Date) message.getData(), CLUSTER_ORIGIN);  </span><br><span class="line">            <span class="keyword">break</span>;      </span><br><span class="line">          <span class="keyword">case</span> CacheConstants.CLUSTER_ENTRY_ADD:  </span><br><span class="line">               log.info(<span class="string">"Cluster data add ("</span> + message + <span class="string">") "</span>);  </span><br><span class="line">               <span class="keyword">if</span> (message.getData() <span class="keyword">instanceof</span> SerialCacheEvent ) &#123;  </span><br><span class="line">                    SerialCacheEvent event = (SerialCacheEvent ) message.getData();  </span><br><span class="line">                    cache.putInCache(event.getKey(), event.getEntry().getContent(),setToArray(event.getEntry().getGroups()), <span class="keyword">null</span>, CLUSTER_ORIGIN);  </span><br><span class="line">               &#125;  </span><br><span class="line">               <span class="keyword">break</span>;  </span><br><span class="line">          <span class="keyword">case</span> CacheConstants.CLUSTER_ENTRY_UPDATE:  </span><br><span class="line">               log.info(<span class="string">"Cluster data update ("</span> + message + <span class="string">") "</span>);  </span><br><span class="line">               <span class="keyword">if</span> (message.getData() <span class="keyword">instanceof</span> SerialCacheEvent ) &#123;  </span><br><span class="line">                    SerialCacheEvent event = (SerialCacheEvent ) message.getData();  </span><br><span class="line">                    cache.putInCache(event.getKey(), event.getEntry().getContent(),setToArray(event.getEntry().getGroups()), <span class="keyword">null</span>, CLUSTER_ORIGIN);  </span><br><span class="line">               &#125;  </span><br><span class="line">               <span class="keyword">break</span>;  </span><br><span class="line">          <span class="keyword">case</span> CacheConstants.CLUSTER_ENTRY_DELETE:  </span><br><span class="line">               log.info(<span class="string">"Cluster data delete ("</span> + message + <span class="string">") "</span>);  </span><br><span class="line">               <span class="keyword">if</span> (message.getData() <span class="keyword">instanceof</span> SerialCacheEvent ) &#123;  </span><br><span class="line">                    SerialCacheEvent event = (SerialCacheEvent ) message.getData();  </span><br><span class="line">                    cache.removeEntry(event.getKey());  </span><br><span class="line">               &#125;  </span><br><span class="line">               <span class="keyword">break</span>;  </span><br><span class="line">          <span class="keyword">default</span>:  </span><br><span class="line">               log.error(<span class="string">"The cluster notification ("</span> + message  </span><br><span class="line">                         + <span class="string">") is of an unknown type. Notification ignored."</span>);  </span><br><span class="line">          &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">  </span><br><span class="line">     <span class="meta">@Override</span>  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacheEntryAdded</span><span class="params">(CacheEntryEvent event)</span> </span>&#123;  </span><br><span class="line">          log.info(<span class="string">"attribute data add ("</span> + event.getKey() + <span class="string">") "</span>);  </span><br><span class="line">          <span class="keyword">super</span>.cacheEntryAdded(event);  </span><br><span class="line">          <span class="keyword">if</span> (!CLUSTER_ORIGIN.equals(event.getOrigin())) &#123;  </span><br><span class="line">               sendNotification(<span class="keyword">new</span> ClusterNotification(  </span><br><span class="line">                         CacheConstants.CLUSTER_ENTRY_ADD, <span class="keyword">new</span> SerialCacheEvent (  </span><br><span class="line">                                   event.getMap(), event.getEntry(), CLUSTER_ORIGIN)));  </span><br><span class="line">          &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">  </span><br><span class="line">     <span class="meta">@Override</span>  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacheEntryRemoved</span><span class="params">(CacheEntryEvent event)</span> </span>&#123;  </span><br><span class="line">          log.info(<span class="string">"attribute data delete ("</span> + event.getKey() + <span class="string">") "</span>);  </span><br><span class="line">          <span class="keyword">super</span>.cacheEntryRemoved(event);  </span><br><span class="line">          <span class="keyword">if</span> (!CLUSTER_ORIGIN.equals(event.getOrigin())) &#123;  </span><br><span class="line">               sendNotification(<span class="keyword">new</span> ClusterNotification(  </span><br><span class="line">                         CacheConstants.CLUSTER_ENTRY_DELETE, <span class="keyword">new</span> SerialCacheEvent (  </span><br><span class="line">                                   event.getMap(), event.getEntry(), CLUSTER_ORIGIN)));  </span><br><span class="line">          &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">  </span><br><span class="line">     <span class="meta">@Override</span>  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacheEntryUpdated</span><span class="params">(CacheEntryEvent event)</span> </span>&#123;  </span><br><span class="line">          log.info(<span class="string">"attribute data update ("</span> + event.getKey() + <span class="string">") "</span>);  </span><br><span class="line">          <span class="keyword">super</span>.cacheEntryUpdated(event);  </span><br><span class="line">          <span class="keyword">if</span> (!CLUSTER_ORIGIN.equals(event.getOrigin())) &#123;  </span><br><span class="line">               sendNotification(<span class="keyword">new</span> ClusterNotification(  </span><br><span class="line">                         CacheConstants.CLUSTER_ENTRY_UPDATE, <span class="keyword">new</span> SerialCacheEvent (  </span><br><span class="line">                                   event.getMap(), event.getEntry(), CLUSTER_ORIGIN)));  </span><br><span class="line">          &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">     <span class="keyword">private</span> String[] setToArray(Set set)&#123;  </span><br><span class="line">          String[] strArray = <span class="keyword">new</span> String[set.size()];  </span><br><span class="line">           </span><br><span class="line">          <span class="keyword">int</span> i = <span class="number">0</span>;  </span><br><span class="line">          <span class="keyword">for</span>(Object str : set)&#123;  </span><br><span class="line">               strArray[i] = (String) str;  </span><br><span class="line">               i++;  </span><br><span class="line">          &#125;  </span><br><span class="line">          <span class="keyword">return</span> strArray;  </span><br><span class="line">     &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>CacheConstants </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> FLUSH_PATTERN = <span class="number">3</span>;</span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * 刷新缓存对象</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> FLUSH_CACHE = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * 集群entry add处理</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> CLUSTER_ENTRY_ADD = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * 集群entry update处理</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> CLUSTER_ENTRY_UPDATE = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * 集群entry delete处理</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> CLUSTER_ENTRY_DELETE = <span class="number">22</span>;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>SerialCacheEvent </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.oscache.base.Cache;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.oscache.base.CacheEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialCacheEvent</span>  <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       *</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">649226025117113267L</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * The cache where the entry resides.</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">private</span> Cache map = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * The entry that the event applies to.</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">private</span> CacheEntry entry = <span class="keyword">null</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">private</span> String origin = <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * Constructs a cache entry event object with no specified origin</span><br><span class="line">       *</span><br><span class="line">       * <span class="doctag">@param</span> map</span><br><span class="line">       *            The cache map of the cache entry</span><br><span class="line">       * <span class="doctag">@param</span> entry</span><br><span class="line">       *            The cache entry that the event applies to</span><br><span class="line">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span>  <span class="title">SerialCacheEvent</span>  <span class="params">(Cache map, CacheEntry entry)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">this</span>( map, entry, <span class="keyword">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * Constructs a cache entry event object</span><br><span class="line">       *</span><br><span class="line">       * <span class="doctag">@param</span> map</span><br><span class="line">       *            The cache map of the cache entry</span><br><span class="line">       * <span class="doctag">@param</span> entry</span><br><span class="line">       *            The cache entry that the event applies to</span><br><span class="line">       * <span class="doctag">@param</span> origin</span><br><span class="line">       *            The origin of this event</span><br><span class="line">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span>  <span class="title">SerialCacheEvent</span>  <span class="params">(Cache map, CacheEntry entry, String origin)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">this</span>. map = map;</span><br><span class="line">             <span class="keyword">this</span>. entry = entry;</span><br><span class="line">             <span class="keyword">this</span>. origin = origin;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * Retrieve the cache entry that the event applies to.</span><br><span class="line">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> CacheEntry <span class="title">getEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> entry;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * Retrieve the cache entry key</span><br><span class="line">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> entry.getKey();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * Retrieve the cache map where the entry resides.</span><br><span class="line">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Cache <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> map;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">getOrigin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> origin;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrigin</span><span class="params">(String origin)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">this</span>. origin = origin;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="4-遗留问题"><a href="#4-遗留问题" class="headerlink" title="4. 遗留问题"></a>4. 遗留问题</h1><p>1. OSCache：已停止更新，集群方面存在问题（集群规模不能太大等），是否可以考虑使用其他缓存框架。<br>2. JGroups：目前使用的JGroups版本较低，其中一些类已经废弃。高版本有更优、更稳定的性能，是否有必要根据高版本JGroups重写JavaGroupsBroadcastingListener还需要考量。如果想引入其他通信框架，重写JavaGroupsBroadcastingListener即可。</p>
<h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h1><ol>
<li><a href="http://blog.csdn.net/laven90/article/details/9567499" target="_blank" rel="external">oscache分布式缓存</a>JavaGroupsBroadcastingListenerImpl源码存在错误，修改见本文JavaGroupsSyncBroadcastingListener</li>
<li><a href="http://3001448.blog.51cto.com/2991448/1202879" target="_blank" rel="external">Oscache分布式集群配置总结</a></li>
</ol>
]]></content>
    </entry>
    
  
  
</search>

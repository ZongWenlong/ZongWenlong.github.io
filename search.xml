<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[编程之美复赛总结]]></title>
      <url>http://zongwenlong.github.io/2016/05/18/%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E%E5%A4%8D%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>&#x2003;&#x2003;&#x4E0A;&#x5468;&#x53C2;&#x52A0;&#x7F16;&#x7A0B;&#x4E4B;&#x7F8E;&#x590D;&#x8D5B;&#xFF0C;&#x5728;&#x548C;&#x4E24;&#x4E2A;&#x5C0F;&#x4F19;&#x4F34;&#x7684;&#x5171;&#x540C;&#x52AA;&#x529B;&#x4E0B;&#xFF0C;&#x6700;&#x7EC8;&#x590D;&#x8D5B;&#x53D6;&#x5F97;&#x4E86;22&#x540D;&#x7684;&#x6210;&#x7EE9;&#xFF0C;&#x5F88;&#x9057;&#x61BE;&#x6CA1;&#x6709;&#x8FDB;&#x5165;&#x51B3;&#x8D5B;&#x3002;&#x4F46;&#x5728;&#x8FD9;&#x6B21;&#x6BD4;&#x8D5B;&#x4E2D;&#xFF0C;&#x4E5F;&#x5B66;&#x5230;&#x4E86;&#x8BB8;&#x591A;&#x4E1C;&#x897F;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x603B;&#x7ED3;&#x4E00;&#x4E0B;&#x3002;</p>
<h1 id="&#x8D5B;&#x9898;&#x4ECB;&#x7ECD;"><a href="#&#x8D5B;&#x9898;&#x4ECB;&#x7ECD;" class="headerlink" title="&#x8D5B;&#x9898;&#x4ECB;&#x7ECD;"></a>&#x8D5B;&#x9898;&#x4ECB;&#x7ECD;</h1><p>Microsoft Academic Graph (MAG) is a large heterogeneous graph containing entities such as authors, papers, journals, conferences and relations between them. Microsoft provides <a href="https://www.microsoft.com/cognitive-services/en-us/academic-knowledge-api" target="_blank" rel="external">Academic Knowledge API</a> for this contest. The Entity attributes are defined <a href="https://www.microsoft.com/cognitive-services/en-us/academic-knowledge-api/documentation/EntityAttributes" target="_blank" rel="external">here</a>.</p>
<p>Participants are supposed to provide a REST service endpoint that can find all the 1-hop, 2-hop, and 3-hop graph paths connecting a given pair of entity identifiers in MAG. The given pair of entity identifiers could be [Id, Id], [Id, AA.AuId], [AA.AuId, Id], [AA.AuId, AA.AuId]. Each node of a path should be one of the following identifiers: Id, F.Fid, J.JId, C.CId, AA.AuId, AA.AfId. Possible edges (a pair of adjacent nodes) of a path are:<br><img src="/2016/05/18/&#x7F16;&#x7A0B;&#x4E4B;&#x7F8E;&#x590D;&#x8D5B;&#x603B;&#x7ED3;/bop2016-1.png" alt="1 - &#x8282;&#x70B9;&#x95F4;&#x6307;&#x5411;&#x5173;&#x7CFB;&#x8BF4;&#x660E;"><br>For each test case, the REST service endpoint will receive a JSON array via HTTP with a pair of entity identifiers, where the identifiers are 64-bit integers, e.g. [123, 456]. The service endpoint needs to respond with a JSON array within 300 seconds. The response JSON array consists of a list of graph paths in the form of [path1, path2, &#x2026;, pathn], where each path is an array of entity identifiers. For example, if your program finds one 1-hop paths, two 2-hop paths, and one 3-hop paths, the results may look like this: [[123,456], [123,2,456], [123,3,456], [123,4,5,456]]. For a path such as [123,4,5,456], the integers are the identifiers of the entities on the path. After receiving the response, the evaluator will wait for a random period of time before sending the next requests.</p>
<h1 id="&#x8D5B;&#x9898;&#x5206;&#x6790;"><a href="#&#x8D5B;&#x9898;&#x5206;&#x6790;" class="headerlink" title="&#x8D5B;&#x9898;&#x5206;&#x6790;"></a>&#x8D5B;&#x9898;&#x5206;&#x6790;</h1><p><strong>&#x7B80;&#x5355;&#x603B;&#x7ED3;&#xFF1A;</strong>&#x8D5B;&#x9898;&#x7684;&#x6838;&#x5FC3;&#x95EE;&#x9898;&#x5728;&#x4E8E;&#xFF0C;&#x5BFB;&#x627E;&#x4ECE;&#x7ED9;&#x5B9A;&#x7684;&#x8D77;&#x70B9;&#x5230;&#x7ED9;&#x5B9A;&#x7684;&#x7EC8;&#x70B9;&#x7684;&#x8DEF;&#x5F84;&#x3002;&#x5176;&#x4E2D;&#x8D77;&#x70B9;&#x548C;&#x7EC8;&#x70B9;&#x53EF;&#x4EE5;&#x662F;&#x8BBA;&#x6587;Id&#x6216;&#x8005;&#x4F5C;&#x8005;AuId,&#x8DEF;&#x5F84;&#x4E2D;&#x7684;&#x8282;&#x70B9;&#x95F4;&#x6307;&#x5411;&#x5173;&#x7CFB;&#x5982;&#x4E0A;&#x56FE;&#x6240;&#x793A;&#xFF0C;&#x8DEF;&#x5F84;&#x7684;&#x957F;&#x5EA6;&#x4E3A;&#x5C0F;&#x4E8E;&#x6216;&#x7B49;&#x4E8E;3&#x3002;</p>
<h2 id="&#x521D;&#x59CB;&#x9636;&#x6BB5;"><a href="#&#x521D;&#x59CB;&#x9636;&#x6BB5;" class="headerlink" title="&#x521D;&#x59CB;&#x9636;&#x6BB5;"></a>&#x521D;&#x59CB;&#x9636;&#x6BB5;</h2><p>&#x2003;&#x2003;&#x521D;&#x59CB;&#x9636;&#x6BB5;&#xFF0C;&#x6211;&#x4EEC;&#x6211;&#x4EEC;&#x8BD5;&#x56FE;&#x4ECE;&#x8D77;&#x70B9;&#x5F00;&#x59CB;&#xFF0C;&#x6839;&#x636E;&#x56FE;1&#x7684;&#x8282;&#x70B9;&#x5173;&#x7CFB;&#x4ECE;&#x524D;&#x5411;&#x540E;&#x62D3;&#x5C55;&#xFF0C;&#x76F4;&#x81F3;&#x627E;&#x5230;&#x7EC8;&#x7ED3;&#x70B9;&#x6216;&#x8DF3;&#x6570;&#x8D85;&#x8FC7;&#x9650;&#x5236;&#x3002;&#x8FD9;&#x662F;&#x4E00;&#x79CD;&#x201C;&#x5927;&#x4E00;&#x7EDF;&#x201D;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x5982;&#x679C;&#x5B58;&#x5728;&#x53EF;&#x884C;&#x65B9;&#x6848;&#xFF0C;&#x5F53;&#x8DF3;&#x6570;&#x9650;&#x5236;&#x4FEE;&#x6539;&#x65F6;&#xFF0C;&#x6B64;&#x7B97;&#x6CD5;&#x4ECD;&#x65E7;&#x5B9E;&#x7528;&#x3002;&#x4E3A;&#x6B64;&#x6211;&#x4EEC;&#x7ED8;&#x5236;&#x4E86;&#x5982;&#x4E0B;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x56FE;&#xFF08;&#x7531;&#x4E8E;&#x65F6;&#x95F4;&#x6709;&#x9650;&#xFF0C;&#x56FE;&#x4E2D;&#x53EF;&#x80FD;&#x6709;&#x67D0;&#x4E9B;&#x7EC6;&#x8282;&#x5B58;&#x5728;&#x95EE;&#x9898;&#xFF09;&#xFF1A;<br><img src="/2016/05/18/&#x7F16;&#x7A0B;&#x4E4B;&#x7F8E;&#x590D;&#x8D5B;&#x603B;&#x7ED3;/bop2016-first_design-1.png" alt=""><br><img src="/2016/05/18/&#x7F16;&#x7A0B;&#x4E4B;&#x7F8E;&#x590D;&#x8D5B;&#x603B;&#x7ED3;/bop2016-first_design-2.png" alt="2 - &#x521D;&#x59CB;&#x9636;&#x6BB5;_&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x793A;&#x610F;&#x56FE;"><br>&#x2003;&#x2003;&#x7ECF;&#x8FC7;&#x521D;&#x6B65;&#x8BBE;&#x8BA1;&#xFF0C;&#x6211;&#x4EEC;&#x6839;&#x636E;&#x8FD9;&#x4E2A;&#x793A;&#x610F;&#x56FE;&#x7F16;&#x5199;&#x51FA;&#x4E86;&#x7B2C;&#x4E00;&#x7248;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x7136;&#x800C;&#x8DD1;&#x51FA;&#x6765;&#x7684;&#x7ED3;&#x679C;&#x5374;&#x8BA9;&#x4EBA;&#x5F88;&#x4E0D;&#x6EE1;&#x610F;&#xFF0C;&#x6709;&#x4E9B;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x6839;&#x672C;&#x6CA1;&#x6709;&#x8BA1;&#x7B97;&#x51FA;&#x7ED3;&#x679C;&#x6216;&#x8005;&#x8BA1;&#x7B97;&#x8D85;&#x65F6;&#x3002;&#x4E8E;&#x662F;&#xFF0C;&#x6211;&#x4EEC;&#x5F00;&#x59CB;&#x8BA8;&#x8BBA;&#x539F;&#x56E0;&#x4EE5;&#x53CA;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002;  </p>
<p><strong>&#x4E3B;&#x8981;&#x539F;&#x56E0;&#xFF1A;</strong>&#x5F53;&#x6211;&#x4EEC;&#x4EE5;id&#x6216;auid&#x4E3A;&#x67E5;&#x8BE2;&#x6761;&#x4EF6;&#x67E5;&#x8BE2;&#x65F6;&#xFF0C;&#x83B7;&#x5F97;&#x7684;&#x6570;&#x636E;&#x91CF;&#x5E76;&#x4E0D;&#x5927;&#xFF0C;&#x4F46;&#x5F53;&#x6211;&#x4EEC;&#x4EE5;FId(&#x7814;&#x7A76;&#x9886;&#x57DF;Id)&#x3001;JId(&#x671F;&#x520A;Id)&#x3001;Cid(&#x4F1A;&#x8BAE;Id)&#x4E3A;&#x67E5;&#x8BE2;&#x6761;&#x4EF6;&#x65F6;&#xFF0C;&#x83B7;&#x53D6;&#x7684;&#x6570;&#x636E;&#x91CF;&#x786E;&#x5B9E;&#x5DE8;&#x5927;&#x7684;&#x3002;&#x5927;&#x5230;&#x6211;&#x4EEC;&#x6839;&#x672C;&#x65E0;&#x6CD5;&#x5904;&#x7406;&#x3002;&#x6240;&#x4EE5;&#x624D;&#x4F1A;&#x51FA;&#x73B0;&#x65E0;&#x6CD5;&#x7EE7;&#x7EED;&#x63A2;&#x8DEF;&#x7684;&#x60C5;&#x51B5;&#x3002;<br><strong>&#x89E3;&#x51B3;&#x65B9;&#x6848;</strong><br>&#x4ECE;&#x4E24;&#x7AEF;&#x51FA;&#x53D1;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x5355;&#x7EAF;&#x7684;&#x4ECE;&#x4E00;&#x7AEF;&#x51FA;&#x53D1;&#xFF0C;&#x5373;&#x4ECE;start&#x548C;end&#x540C;&#x65F6;&#x5411;&#x4E2D;&#x95F4;&#x6C47;&#x805A;&#x3002;&#x4E0D;&#x53BB;&#x8FDB;&#x884C;FId&#x3001;JId&#x3001;FId&#x7684;&#x67E5;&#x8BE2;&#x3002;</p>
<h2 id="&#x8FDB;&#x9636;&#x9636;&#x6BB5;"><a href="#&#x8FDB;&#x9636;&#x9636;&#x6BB5;" class="headerlink" title="&#x8FDB;&#x9636;&#x9636;&#x6BB5;"></a>&#x8FDB;&#x9636;&#x9636;&#x6BB5;</h2><p>&#x2003;&#x2003;&#x6839;&#x636E;&#x4ECE;&#x4E24;&#x7AEF;&#x51FA;&#x53D1;&#x7684;&#x6307;&#x5BFC;&#x601D;&#x60F3;&#xFF0C;&#x4EE5;&#x51CF;&#x5C11;&#x8BF7;&#x6C42;&#x6B21;&#x6570;&#x4E3A;&#x8BBE;&#x8BA1;&#x76EE;&#x6807;&#xFF0C;&#x5206;&#x522B;&#x4E3A;Id-Id/Id-AuId/AuId-Id/AuId-AuId&#x56DB;&#x79CD;&#x60C5;&#x51B5;&#x8FDB;&#x884C;&#x4E86;&#x5982;&#x4E0B;&#x8BBE;&#x8BA1;&#xFF1A;<br><img src="/2016/05/18/&#x7F16;&#x7A0B;&#x4E4B;&#x7F8E;&#x590D;&#x8D5B;&#x603B;&#x7ED3;/id-id.png" alt=""><br><img src="/2016/05/18/&#x7F16;&#x7A0B;&#x4E4B;&#x7F8E;&#x590D;&#x8D5B;&#x603B;&#x7ED3;/id-auid.png" alt=""><br><img src="/2016/05/18/&#x7F16;&#x7A0B;&#x4E4B;&#x7F8E;&#x590D;&#x8D5B;&#x603B;&#x7ED3;/auid-id.png" alt=""><br><img src="/2016/05/18/&#x7F16;&#x7A0B;&#x4E4B;&#x7F8E;&#x590D;&#x8D5B;&#x603B;&#x7ED3;/auid-auid.png" alt="3 - &#x8FDB;&#x9636;&#x9636;&#x6BB5;_&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x793A;&#x610F;&#x56FE;"><br>&#x2003;&#x2003;&#x7ECF;&#x8FC7;&#x8FD9;&#x6B21;&#x8BBE;&#x8BA1;&#xFF0C;&#x6574;&#x4E2A;&#x601D;&#x8DEF;&#x5C31;&#x975E;&#x5E38;&#x6E05;&#x6670;&#x4E86;&#xFF0C;&#x81EA;&#x7136;&#x7A0B;&#x5E8F;&#x4E5F;&#x5C31;&#x6C34;&#x5230;&#x6E20;&#x6210;&#x3002;</p>
<h1 id="&#x9879;&#x76EE;&#x5DE5;&#x7A0B;&#x548C;&#x7BA1;&#x7406;&#x76F8;&#x5173;&#x5185;&#x5BB9;"><a href="#&#x9879;&#x76EE;&#x5DE5;&#x7A0B;&#x548C;&#x7BA1;&#x7406;&#x76F8;&#x5173;&#x5185;&#x5BB9;" class="headerlink" title="&#x9879;&#x76EE;&#x5DE5;&#x7A0B;&#x548C;&#x7BA1;&#x7406;&#x76F8;&#x5173;&#x5185;&#x5BB9;"></a>&#x9879;&#x76EE;&#x5DE5;&#x7A0B;&#x548C;&#x7BA1;&#x7406;&#x76F8;&#x5173;&#x5185;&#x5BB9;</h1><h2 id="&#x9879;&#x76EE;&#x67B6;&#x6784;"><a href="#&#x9879;&#x76EE;&#x67B6;&#x6784;" class="headerlink" title="&#x9879;&#x76EE;&#x67B6;&#x6784;"></a>&#x9879;&#x76EE;&#x67B6;&#x6784;</h2><ul>
<li>RESTFul&#x67B6;&#x6784;&#xFF1A;&#x9009;&#x62E9;SpringMVC&#x6846;&#x67B6;&#x4F5C;&#x4E3A;RESTFul&#x67B6;&#x6784;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#x3002;</li>
<li>JSON&#x89E3;&#x6790;&#xFF1A;FastJSON</li>
<li>Http&#x8BF7;&#x6C42;&#xFF1A;Apache HttpClient</li>
<li>Web&#x670D;&#x52A1;&#x5668;&#xFF1A;Tomcat</li>
<li>&#x9879;&#x76EE;&#x6784;&#x5EFA;&#xFF1A;Maven</li>
</ul>
<h2 id="&#x9879;&#x76EE;&#x4F18;&#x5316;"><a href="#&#x9879;&#x76EE;&#x4F18;&#x5316;" class="headerlink" title="&#x9879;&#x76EE;&#x4F18;&#x5316;"></a>&#x9879;&#x76EE;&#x4F18;&#x5316;</h2><ul>
<li>&#x591A;&#x7EBF;&#x7A0B;&#x4F18;&#x5316;&#xFF1A;&#x91C7;&#x7528;CachedThreadPool&#x7EBF;&#x7A0B;&#x6C60;&#x5BF9;&#x7A0B;&#x5E8F;&#x4F18;&#x5316;&#xFF0C;&#x5B9E;&#x9A8C;&#x53D1;&#x73B0;&#xFF0C;CachedThreadPool&#x8981;&#x4F18;&#x4E8E;FixedThreadPool&#x3002;</li>
<li>Http&#x8BF7;&#x6C42;&#x4F18;&#x5316;&#xFF1A;&#x8FD9;&#x90E8;&#x5206;&#x6709;&#x6240;&#x6B20;&#x7F3A;&#xFF0C;&#x7531;&#x4E8E;&#x758F;&#x5FFD;&#xFF0C;&#x8FD9;&#x90E8;&#x5206;&#x5E76;&#x672A;&#x8FDB;&#x884C;&#x4F18;&#x5316;&#xFF0C;&#x53EF;&#x4EE5;&#x5EFA;&#x7ACB;TCP&#x957F;&#x8FDE;&#x63A5;&#xFF0C;&#x4EE5;&#x51CF;&#x5C11;&#x8FDE;&#x63A5;&#x521B;&#x5EFA;&#x6D88;&#x8017;&#x3002;</li>
</ul>
<h2 id="&#x9879;&#x76EE;&#x6210;&#x5458;&#x4EA4;&#x6D41;&#x76F8;&#x5173;&#x5185;&#x5BB9;"><a href="#&#x9879;&#x76EE;&#x6210;&#x5458;&#x4EA4;&#x6D41;&#x76F8;&#x5173;&#x5185;&#x5BB9;" class="headerlink" title="&#x9879;&#x76EE;&#x6210;&#x5458;&#x4EA4;&#x6D41;&#x76F8;&#x5173;&#x5185;&#x5BB9;"></a>&#x9879;&#x76EE;&#x6210;&#x5458;&#x4EA4;&#x6D41;&#x76F8;&#x5173;&#x5185;&#x5BB9;</h2><ul>
<li>SVN&#xFF1A;&#x8FDB;&#x884C;&#x4EE3;&#x7801;&#x540C;&#x6B65;</li>
<li>OneNote&#xFF1A;&#x8FDB;&#x884C;&#x6587;&#x6863;&#x540C;&#x6B65;&#x548C;&#x4EA4;&#x6D41;</li>
<li>WeChat/QQ&#xFF1A;&#x8FDB;&#x884C;&#x5373;&#x65F6;&#x901A;&#x4FE1;</li>
</ul>
<h2 id="&#x9879;&#x76EE;&#x4EE3;&#x7801;"><a href="#&#x9879;&#x76EE;&#x4EE3;&#x7801;" class="headerlink" title="&#x9879;&#x76EE;&#x4EE3;&#x7801;"></a>&#x9879;&#x76EE;&#x4EE3;&#x7801;</h2><p><a href="https://github.com/ZongWenlong/AcademicSearch" target="_blank" rel="external">AcademicSearch</a></p>
<h2 id="&#x9879;&#x76EE;&#x603B;&#x7ED3;"><a href="#&#x9879;&#x76EE;&#x603B;&#x7ED3;" class="headerlink" title="&#x9879;&#x76EE;&#x603B;&#x7ED3;"></a>&#x9879;&#x76EE;&#x603B;&#x7ED3;</h2><ul>
<li>&#x76F2;&#x76EE;&#x8BBE;&#x8BA1;&#x3001;&#x76F2;&#x76EE;&#x5F00;&#x53D1;&#xFF1A;&#x5728;&#x6BD4;&#x8D5B;&#x5F00;&#x59CB;&#x9636;&#x6BB5;&#xFF0C;&#x5BF9;&#x8D5B;&#x9898;&#x5206;&#x6790;&#x4E0D;&#x591F;&#x6E05;&#x6670;&#xFF0C;&#x6D6A;&#x8D39;&#x4E86;&#x5F88;&#x591A;&#x65F6;&#x95F4;&#x3002;&#x6BD4;&#x5982;&#xFF1A;&#x6839;&#x636E;FId&#x67E5;&#x8BE2;&#x4F1A;&#x4EA7;&#x751F;&#x5927;&#x91CF;&#x65E0;&#x7528;&#x7ED3;&#x679C;&#xFF0C;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x7B80;&#x5355;&#x7684;&#x6D4B;&#x8BD5;&#x5C31;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x4F46;&#x6211;&#x4EEC;&#x5728;&#x521D;&#x671F;&#x5E76;&#x672A;&#x5BDF;&#x89C9;&#x3002;</li>
<li>Just do it&#xFF1A;&#x539F;&#x672C;&#x5728;&#x9879;&#x76EE;&#x5F00;&#x59CB;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x610F;&#x8BC6;&#x5230;&#x8BF7;&#x6C42;&#x8FDE;&#x63A5;&#x90E8;&#x5206;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x4F18;&#x5316;&#x5185;&#x5BB9;&#xFF0C;&#x4F46;&#x7531;&#x4E8E;&#x6211;&#x4EEC;&#x540E;&#x671F;&#x7684;&#x758F;&#x5FFD;&#xFF0C;&#x76F4;&#x5230;&#x6BD4;&#x8D5B;&#x7ED3;&#x675F;&#x6211;&#x4EEC;&#x4E5F;&#x6CA1;&#x6709;&#x5B9E;&#x9645;&#x8FDB;&#x884C;&#x4F18;&#x5316;&#x3002;</li>
<li>&#x56E2;&#x961F;&#x7CBE;&#x795E;&#x5F88;&#x91CD;&#x8981;&#xFF1A;&#x611F;&#x8C22;&#x4E24;&#x4F4D;&#x5C0F;&#x4F19;&#x4F34;&#x3002;&#x6BD4;&#x8D5B;&#x8FC7;&#x7A0B;&#x4E2D;&#x5927;&#x5BB6;&#x4E00;&#x8D77;&#x8BA8;&#x8BBA;&#x95EE;&#x9898;&#xFF0C;&#x4E00;&#x8D77;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#xFF0C;&#x76F8;&#x4E92;&#x6FC0;&#x53D1;&#x7075;&#x611F;&#xFF0C;&#x4F18;&#x52BF;&#x4E92;&#x8865;&#x3002;   </li>
</ul>
<p>&#x2003;&#x2003;&#x6BD4;&#x8D5B;&#x7ED3;&#x675F;&#x4E86;&#xFF0C;&#x9057;&#x61BE;&#x7684;&#x662F;&#x6CA1;&#x80FD;&#x8FDB;&#x5165;&#x51B3;&#x8D5B;&#xFF0C;&#x5E78;&#x8FD0;&#x7684;&#x662F;&#x8BA4;&#x8BC6;&#x4E86;&#x4E24;&#x4E2A;&#x5C0F;&#x4F19;&#x4F34;&#xFF0C;&#x5E76;&#x5728;&#x6BD4;&#x8D5B;&#x4E2D;&#x5B66;&#x5230;&#x4E86;&#x8BB8;&#x591A;&#x4E1C;&#x897F;&#xFF0C;&#x86EE;&#x597D;&#x3002;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Something about Hexo]]></title>
      <url>http://zongwenlong.github.io/2016/05/15/Something-about-Hexo/</url>
      <content type="html"><![CDATA[<p>&#x8BB0;&#x5F55;Hexo &#x4F7F;&#x7528;&#x7684;&#x4F7F;&#x7528;&#x6280;&#x5DE7;&#xFF0C;&#x5E76;&#x4F1A;&#x6301;&#x7EED;&#x66F4;&#x65B0;</p>
<h2 id="&#x5E38;&#x7528;&#x547D;&#x4EE4;"><a href="#&#x5E38;&#x7528;&#x547D;&#x4EE4;" class="headerlink" title="&#x5E38;&#x7528;&#x547D;&#x4EE4;"></a>&#x5E38;&#x7528;&#x547D;&#x4EE4;</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;  <span class="comment">#&#x65B0;&#x5EFA;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;</span></span><br><span class="line">hexo generate              <span class="comment">#&#x751F;&#x6210;&#x9759;&#x6001;&#x6587;&#x7AE0;</span></span><br><span class="line">hexo generate <span class="_">-d</span>           <span class="comment">#&#x6587;&#x4EF6;&#x751F;&#x6210;&#x540E;&#x7ACB;&#x5373;&#x90E8;&#x7F72;</span></span><br><span class="line">hexo server                <span class="comment">#&#x542F;&#x52A8;&#x670D;&#x52A1;&#x5668;</span></span><br><span class="line">hexo deploy                <span class="comment">#&#x90E8;&#x7F72;&#x7F51;&#x7AD9;</span></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OSCache分布式集群配置]]></title>
      <url>http://zongwenlong.github.io/2015/08/01/OSCache%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;之前在IBM实习时，由于licence的原因，项目使用OScCache进行数据缓存。单机部署项目测试时，未出现什么问题，但多机测试时出现了问题：OSCache频繁刷新，缓存效果下降。由于OSCcache已经停止更新，OSCache集群方面资料较少，通过一周的学习和探索，终于找到了解决方案。</p>
<h1 id="OSCache简介"><a href="#OSCache简介" class="headerlink" title="OSCache简介"></a>OSCache简介</h1><ul>
<li>缓存任何对象</li>
<li>永久缓存，缓存持久化处理</li>
<li>缓存记录的过期</li>
<li>支持集群（需要额外配置）<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/OSCache-cluster.png?raw=true" width="300"><br></div>

</li>
</ul>
<h1 id="OSCache-集群支持介绍"><a href="#OSCache-集群支持介绍" class="headerlink" title="OSCache 集群支持介绍"></a>OSCache 集群支持介绍</h1><p>&emsp;&emsp;OScache自身不具备集群通信能力，它他需要借助第三方通讯工具来实现集群缓存数据同步。下图所示是OScache集群相关的Java类，其中</p>
<ul>
<li>AbstractBroadcastingListener负责缓存同步事件的下发和处理</li>
<li>类ClusterNotification为组播消息体（Bean）</li>
<li>类JavaGroupsBroadcastingListener/ JMS10BroadcastingListening/ JMSBroadcastingListening由OSCache官方提供，利用JGroups通信框架或JMS通信框架的组播能力实现OSCache的缓存数据同步需求。</li>
</ul>
<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-2.png?raw=true" width="300"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-3.png?raw=true" width="350"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-4.png?raw=true" width="500"><br></div>

<h1 id="OOSCache集群同步解决方案"><a href="#OOSCache集群同步解决方案" class="headerlink" title="OOSCache集群同步解决方案"></a>OOSCache集群同步解决方案</h1><p>1. OSCache+JGroups（本文介绍）</p>
<ol>
<li>OSCache+JMS（略）</li>
<li>OSCache+其他的通信框架（略）<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-5.png?raw=true" width="500"><br></div><br>下面介绍JMS+JGroups的配置方式<br><div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-6.png?raw=true" width="600"><br></div>

</li>
</ol>
<p>JavaGroupsBroadcastingListener</p>
<ul>
<li>initialize(Cache cache, Config config)  – 加载通信基本配置</li>
<li>sendNotification(ClusterNotification message) – 发送组播消息</li>
<li>handleNotification(Serializable serializable)  –  处理接收到的接收组播消息</li>
</ul>
<h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><ol>
<li>我使用的Jar包：jgroups-2.12.3.Final.jar(3.*以上JGroups不支持)，concurrent-1.3.4.jar，oscache-2.4.1.jar，log4j-1.2.17.jar，commons-logging-1.2.jar(OScache中使用的log)</li>
<li>添加文件src/oscache.properties（log4j.properties也可以放在src目录下），添加以下内容<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cache.event.listeners=com.opensymphony.oscache.plugins.clustersupport.JavaGroupsBroadcastingListener  -- 组播事件监听器</span><br><span class="line">cache.memory=<span class="literal">true</span> -- 是否使用内存</span><br><span class="line">cache.blocking=<span class="literal">true</span> -- 是否同步</span><br><span class="line">cache.cluster.properties=</span><br><span class="line">	UDP(mcast_addr=231.12.21.132;mcast_port=45566;ip_ttl=32;\</span><br><span class="line">	mcast_send_buf_size=150000;mcast_recv_buf_size=80000):\</span><br><span class="line">	PING(timeout=2000;num_initial_members=3):\</span><br><span class="line">	MERGE2(min_interval=5000;max_interval=10000):\</span><br><span class="line">	FD_SOCK:VERIFY_SUSPECT(timeout=1500):\</span><br><span class="line">	pbcast.NAKACK(gc_lag=50;retransmit_timeout=300,600,1200,2400,4800;max_xmit_size=8192):\</span><br><span class="line">	UNICAST(timeout=300,600,1200,2400):\</span><br><span class="line">	pbcast.STABLE(desired_avg_gossip=20000):\</span><br><span class="line">	FRAG(frag_size=8096;down_thread=<span class="literal">false</span>;up_thread=<span class="literal">false</span>):\</span><br><span class="line">	pbcast.GMS(join_timeout=5000;join_retry_timeout=2000;shun=<span class="literal">false</span>;<span class="built_in">print</span>_<span class="built_in">local</span>_addr=<span class="literal">true</span>)</span><br><span class="line">cache.cluster.multicast.ip=231.12.21.132 -- 组播IP</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="默认配置的问题："><a href="#默认配置的问题：" class="headerlink" title="默认配置的问题："></a>默认配置的问题：</h3><p>刷新动作（数据库增删改）同步，但缓存数据不同步。</p>
<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-7.png?raw=true" width="600"><br></div>

<h3 id="缓存数据不同步原因："><a href="#缓存数据不同步原因：" class="headerlink" title="缓存数据不同步原因："></a>缓存数据不同步原因：</h3><p>OSCache所提供的AbstractBroadcastingListener类中只有刷新消息的发送、接收和处理逻辑，无实时同步逻辑。</p>
<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-8.png?raw=true" width="500"><br></div>

<h2 id="缓存数据同步配置"><a href="#缓存数据同步配置" class="headerlink" title="缓存数据同步配置"></a>缓存数据同步配置</h2><ol>
<li><p>增加类</p>
<ul>
<li><p>JavaGroupsSyncBroadcastingListener</p>
<ul>
<li>实现方法（发消息）：<ul>
<li>cacheEntryAdded</li>
<li>cacheEntryRemoved</li>
<li>cacheEntryUpdated</li>
</ul>
</li>
<li>扩充方法（收消息）：<ul>
<li>handleClusterNotification</li>
</ul>
</li>
</ul>
</li>
<li>CacheConstants  –  添加事件类型常量</li>
<li>SerialCacheEvent  – 可序列化的事件类</li>
</ul>
</li>
<li><p>修改配置文件oscache.properties：</p>
</li>
</ol>
<ul>
<li>cache.event.listeners=JavaGroupsSyncBroadcastingListener（Package完整路径）</li>
</ul>
<div align="center"><br><img src="https://raw.githubusercontent.com/ZongWenlong/ZongWenlong.github.io/master/image/oscache-9.png?raw=true" width="500"><br></div>

<h3 id="代码列表"><a href="#代码列表" class="headerlink" title="代码列表"></a>代码列表</h3><ul>
<li><p>JavaGroupsSyncBroadcastingListener</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;  </span><br><span class="line"><span class="keyword">import</span> java.util.Set;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.opensymphony.oscache.base.events.CacheEntryEvent;  </span><br><span class="line"><span class="keyword">import</span> com.opensymphony.oscache.plugins.clustersupport.ClusterNotification;  </span><br><span class="line"><span class="keyword">import</span> com.opensymphony.oscache.plugins.clustersupport.JavaGroupsBroadcastingListener;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span><br><span class="line">* 自定义BroadCastingListener,重写父类方法。 </span><br><span class="line">*/</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaGroupsSyncBroadcastingListener</span> <span class="keyword">extends</span>  </span><br><span class="line">          <span class="title">JavaGroupsBroadcastingListener</span> </span>&#123;  </span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Log log = LogFactory  </span><br><span class="line">               .getLog(JavaGroupsBroadcastingListenerImpl.class);  </span><br><span class="line">  </span><br><span class="line">     <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)  </span><br><span class="line">     <span class="meta">@Override</span>  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleClusterNotification</span><span class="params">(ClusterNotification message)</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">          <span class="keyword">if</span> (cache == <span class="keyword">null</span>) &#123;  </span><br><span class="line">               log.warn(<span class="string">"A cluster notification ("</span>  </span><br><span class="line">                         + message  </span><br><span class="line">                         + <span class="string">") was received, but no cache is registered on this machine. Notification ignored."</span>);  </span><br><span class="line">  </span><br><span class="line">               <span class="keyword">return</span>;  </span><br><span class="line">          &#125;  </span><br><span class="line">  </span><br><span class="line">          <span class="keyword">if</span> (log.isInfoEnabled()) &#123;  </span><br><span class="line">               log.info(<span class="string">"Cluster notification ("</span> + message + <span class="string">") was received."</span>);  </span><br><span class="line">          &#125;  </span><br><span class="line">  </span><br><span class="line">          <span class="keyword">switch</span> (message.getType()) &#123;  </span><br><span class="line">          <span class="keyword">case</span> ClusterNotification.FLUSH_KEY:  </span><br><span class="line">            cache.flushEntry((String) message.getData(), CLUSTER_ORIGIN);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> ClusterNotification.FLUSH_GROUP:  </span><br><span class="line">            cache.flushGroup((String) message.getData(), CLUSTER_ORIGIN);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> ClusterNotification.FLUSH_PATTERN:  </span><br><span class="line">            cache.flushPattern((String) message.getData(), CLUSTER_ORIGIN);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> ClusterNotification.FLUSH_CACHE:  </span><br><span class="line">            cache.flushAll((Date) message.getData(), CLUSTER_ORIGIN);  </span><br><span class="line">            <span class="keyword">break</span>;      </span><br><span class="line">          <span class="keyword">case</span> CacheConstants.CLUSTER_ENTRY_ADD:  </span><br><span class="line">               log.info(<span class="string">"Cluster data add ("</span> + message + <span class="string">") "</span>);  </span><br><span class="line">               <span class="keyword">if</span> (message.getData() <span class="keyword">instanceof</span> SerialCacheEvent ) &#123;  </span><br><span class="line">                    SerialCacheEvent event = (SerialCacheEvent ) message.getData();  </span><br><span class="line">                    cache.putInCache(event.getKey(), event.getEntry().getContent(),setToArray(event.getEntry().getGroups()), <span class="keyword">null</span>, CLUSTER_ORIGIN);  </span><br><span class="line">               &#125;  </span><br><span class="line">               <span class="keyword">break</span>;  </span><br><span class="line">          <span class="keyword">case</span> CacheConstants.CLUSTER_ENTRY_UPDATE:  </span><br><span class="line">               log.info(<span class="string">"Cluster data update ("</span> + message + <span class="string">") "</span>);  </span><br><span class="line">               <span class="keyword">if</span> (message.getData() <span class="keyword">instanceof</span> SerialCacheEvent ) &#123;  </span><br><span class="line">                    SerialCacheEvent event = (SerialCacheEvent ) message.getData();  </span><br><span class="line">                    cache.putInCache(event.getKey(), event.getEntry().getContent(),setToArray(event.getEntry().getGroups()), <span class="keyword">null</span>, CLUSTER_ORIGIN);  </span><br><span class="line">               &#125;  </span><br><span class="line">               <span class="keyword">break</span>;  </span><br><span class="line">          <span class="keyword">case</span> CacheConstants.CLUSTER_ENTRY_DELETE:  </span><br><span class="line">               log.info(<span class="string">"Cluster data delete ("</span> + message + <span class="string">") "</span>);  </span><br><span class="line">               <span class="keyword">if</span> (message.getData() <span class="keyword">instanceof</span> SerialCacheEvent ) &#123;  </span><br><span class="line">                    SerialCacheEvent event = (SerialCacheEvent ) message.getData();  </span><br><span class="line">                    cache.removeEntry(event.getKey());  </span><br><span class="line">               &#125;  </span><br><span class="line">               <span class="keyword">break</span>;  </span><br><span class="line">          <span class="keyword">default</span>:  </span><br><span class="line">               log.error(<span class="string">"The cluster notification ("</span> + message  </span><br><span class="line">                         + <span class="string">") is of an unknown type. Notification ignored."</span>);  </span><br><span class="line">          &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">  </span><br><span class="line">     <span class="meta">@Override</span>  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacheEntryAdded</span><span class="params">(CacheEntryEvent event)</span> </span>&#123;  </span><br><span class="line">          log.info(<span class="string">"attribute data add ("</span> + event.getKey() + <span class="string">") "</span>);  </span><br><span class="line">          <span class="keyword">super</span>.cacheEntryAdded(event);  </span><br><span class="line">          <span class="keyword">if</span> (!CLUSTER_ORIGIN.equals(event.getOrigin())) &#123;  </span><br><span class="line">               sendNotification(<span class="keyword">new</span> ClusterNotification(  </span><br><span class="line">                         CacheConstants.CLUSTER_ENTRY_ADD, <span class="keyword">new</span> SerialCacheEvent (  </span><br><span class="line">                                   event.getMap(), event.getEntry(), CLUSTER_ORIGIN)));  </span><br><span class="line">          &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">  </span><br><span class="line">     <span class="meta">@Override</span>  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacheEntryRemoved</span><span class="params">(CacheEntryEvent event)</span> </span>&#123;  </span><br><span class="line">          log.info(<span class="string">"attribute data delete ("</span> + event.getKey() + <span class="string">") "</span>);  </span><br><span class="line">          <span class="keyword">super</span>.cacheEntryRemoved(event);  </span><br><span class="line">          <span class="keyword">if</span> (!CLUSTER_ORIGIN.equals(event.getOrigin())) &#123;  </span><br><span class="line">               sendNotification(<span class="keyword">new</span> ClusterNotification(  </span><br><span class="line">                         CacheConstants.CLUSTER_ENTRY_DELETE, <span class="keyword">new</span> SerialCacheEvent (  </span><br><span class="line">                                   event.getMap(), event.getEntry(), CLUSTER_ORIGIN)));  </span><br><span class="line">          &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">  </span><br><span class="line">     <span class="meta">@Override</span>  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacheEntryUpdated</span><span class="params">(CacheEntryEvent event)</span> </span>&#123;  </span><br><span class="line">          log.info(<span class="string">"attribute data update ("</span> + event.getKey() + <span class="string">") "</span>);  </span><br><span class="line">          <span class="keyword">super</span>.cacheEntryUpdated(event);  </span><br><span class="line">          <span class="keyword">if</span> (!CLUSTER_ORIGIN.equals(event.getOrigin())) &#123;  </span><br><span class="line">               sendNotification(<span class="keyword">new</span> ClusterNotification(  </span><br><span class="line">                         CacheConstants.CLUSTER_ENTRY_UPDATE, <span class="keyword">new</span> SerialCacheEvent (  </span><br><span class="line">                                   event.getMap(), event.getEntry(), CLUSTER_ORIGIN)));  </span><br><span class="line">          &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">     <span class="keyword">private</span> String[] setToArray(Set set)&#123;  </span><br><span class="line">          String[] strArray = <span class="keyword">new</span> String[set.size()];  </span><br><span class="line">           </span><br><span class="line">          <span class="keyword">int</span> i = <span class="number">0</span>;  </span><br><span class="line">          <span class="keyword">for</span>(Object str : set)&#123;  </span><br><span class="line">               strArray[i] = (String) str;  </span><br><span class="line">               i++;  </span><br><span class="line">          &#125;  </span><br><span class="line">          <span class="keyword">return</span> strArray;  </span><br><span class="line">     &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>CacheConstants </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> FLUSH_PATTERN = <span class="number">3</span>;</span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * 刷新缓存对象</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> FLUSH_CACHE = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * 集群entry add处理</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> CLUSTER_ENTRY_ADD = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * 集群entry update处理</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> CLUSTER_ENTRY_UPDATE = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * 集群entry delete处理</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> CLUSTER_ENTRY_DELETE = <span class="number">22</span>;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>SerialCacheEvent </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.oscache.base.Cache;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.oscache.base.CacheEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialCacheEvent</span>  <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       *</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">649226025117113267L</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * The cache where the entry resides.</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">private</span> Cache map = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * The entry that the event applies to.</span><br><span class="line">       */</span></span><br><span class="line">      <span class="keyword">private</span> CacheEntry entry = <span class="keyword">null</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">private</span> String origin = <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * Constructs a cache entry event object with no specified origin</span><br><span class="line">       *</span><br><span class="line">       * <span class="doctag">@param</span> map</span><br><span class="line">       *            The cache map of the cache entry</span><br><span class="line">       * <span class="doctag">@param</span> entry</span><br><span class="line">       *            The cache entry that the event applies to</span><br><span class="line">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span>  <span class="title">SerialCacheEvent</span>  <span class="params">(Cache map, CacheEntry entry)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">this</span>( map, entry, <span class="keyword">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * Constructs a cache entry event object</span><br><span class="line">       *</span><br><span class="line">       * <span class="doctag">@param</span> map</span><br><span class="line">       *            The cache map of the cache entry</span><br><span class="line">       * <span class="doctag">@param</span> entry</span><br><span class="line">       *            The cache entry that the event applies to</span><br><span class="line">       * <span class="doctag">@param</span> origin</span><br><span class="line">       *            The origin of this event</span><br><span class="line">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span>  <span class="title">SerialCacheEvent</span>  <span class="params">(Cache map, CacheEntry entry, String origin)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">this</span>. map = map;</span><br><span class="line">             <span class="keyword">this</span>. entry = entry;</span><br><span class="line">             <span class="keyword">this</span>. origin = origin;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * Retrieve the cache entry that the event applies to.</span><br><span class="line">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> CacheEntry <span class="title">getEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> entry;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * Retrieve the cache entry key</span><br><span class="line">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> entry.getKey();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span><br><span class="line">       * Retrieve the cache map where the entry resides.</span><br><span class="line">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Cache <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> map;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">getOrigin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> origin;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrigin</span><span class="params">(String origin)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">this</span>. origin = origin;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><p>1. OSCache：已停止更新，集群方面存在问题（集群规模不能太大等），是否可以考虑使用其他缓存框架。<br>2. JGroups：目前使用的JGroups版本较低，其中一些类已经废弃。高版本有更优、更稳定的性能，是否有必要根据高版本JGroups重写JavaGroupsBroadcastingListener还需要考量。如果想引入其他通信框架，重写JavaGroupsBroadcastingListener即可。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://blog.csdn.net/laven90/article/details/9567499" target="_blank" rel="external">oscache分布式缓存</a>JavaGroupsBroadcastingListenerImpl源码存在错误，修改见本文JavaGroupsSyncBroadcastingListener</li>
<li><a href="http://3001448.blog.51cto.com/2991448/1202879" target="_blank" rel="external">Oscache分布式集群配置总结</a></li>
</ol>
]]></content>
    </entry>
    
  
  
</search>
